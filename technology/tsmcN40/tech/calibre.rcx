#!tvf

tvf::VERBATIM {


// xCalibre/calibre  RC/LVS command file based on the follow calibre command file//
/////////////////////////////////////////////////////////////////////////////////
// 
//   @(#) TSMC 40nm CALIBRE LVS/RC COMMAND FILE  
//   @(#) TSMC 40 NM CMOS LOW POWER PROCESS 
//   @(#) DEVICE FORMATION EXAMPLE AND LVS PROPERTIES DOCUMENT: T-N40-CL-LS-001 v2.0_1 
//   @(#) COMMAND FILE DOCUMENT: T-N40-CM-SP-015-C1 
//   @(#) COMMAND FILE VERSION: v1.5_2a 
//   @(#) COMMAND FILE METAL SCHEME: 1P6M 
//   @(#) COMMAND FILE DATE: 01/06/2020 
//   @(#) EDA TOOL VERSION: Calibre v2015.3_76.70 
// 
//////////////////////////////////////////////////////////////////////////////// 
// DISCLAIMER 
// 
// This file usually contains the super set of device extraction rule at TSMC
// processes. However, all of device in basic deck may not be offered at current
// SPICE model. PLEASE ALWAYS REFER TO THE CORRESPONDING SPICE MODEL DOCUMENT
// FOR ANY DEVICE YOU WOULD LIKE USE.
// 
// The information contained herein is provided by TSMC on an "AS IS" basis 
// without any warranty, and TSMC has no obligation to support or otherwise 
// maintain the information.  TSMC disclaims any representation that the 
// information does not infringe any intellectual property rights or proprietary 
// rights of any third parties.  There are no other warranties given by TSMC, 
// whether express, implied or statutory, including, without limitation, implied 
// warranties of merchantability and fitness for a particular purpose. 
// 
// STATEMENT OF USE 
// 
// This information contains confidential and proprietary information of TSMC. 
// No part of this information may be reproduced, transmitted, transcribed, 
// stored in a retrieval system, or translated into any human or computer 
// language, in any form or by any means, electronic, mechanical, magnetic, 
// optical, chemical, manual, or otherwise, without the prior written permission 
// of TSMC.  This information was prepared for informational purpose and is for 
// use by TSMC's customers only.  TSMC reserves the right to make changes in the 
// information at any time and without notice. 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//                             DEVICE FORMULA 
//	 CORE == 0.9v or 1.1v or 1.2v  
//	 I/O  == 2.5v or 3.3v or 1.8v 
//   ----- ----------------------------- ---------------------------------- 
//   NAME     DESCRIPTION                   DEVICE LAYER OPERATION 
//   ----- ----------------------------- ---------------------------------- 
// 
//    
//    
//    
//   
//   M[CG]	        Flash control gate             (CG*OD*PO*MCEL*NP-CGCT) 
//   M[WL]	        Flash select gate              (PO*OD-CG-HVII*MCEL*NP-CO) 
//   C[EG]	        pseudo capacitor               (MCEL*PO*OD*NP*HVII-CG) 
//   M[nch_na]            CORE native device              ((NGATE-OD25-OD18-OD33)*NT_N-LP_NTN-VTZ_N-SRM-DCO-CORELDD_IO-VTL_N-VTH_N-ELVT_N)  
//   M[nch_naavt]         AVT  native device              ((NGATE-OD25-OD18-OD25_33-OD25_18)*NT_N-EHVT_N-VTH_N-VTL_N-ELVT_N-RPO-RH-HVD_N-ULP_WR*CORELDD_IO)  
// 
//   M[nch]               CORE Nominal VT NMOS            ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-VTUL_N-EHVT_N-VTL_N-VTH_N-ELVT_N-DNW-SRM-OD1T-DCO-POS-CORELDD_IO) 
// 
//	  
//   M[nchpg_sr]          SRAM passgate NMOS sp           (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT*SRM_IMP-SRM_DP-SRM_ULL)-DCO) 
//   M[nchpd_sr]          SRAM pulldown NMOS sp           (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT*SRM_IMP-SRM_DP-SRM_ULL)-DCO) 
//   M[nchpg_ullsr]       SRAM passgate NMOS sp ull       (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT*SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D4)-DCO) 
//   M[nchpd_ullsr]       SRAM pulldown NMOS sp ull       (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT*SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D4)-DCO) 
//   M[nchpg_ull10ttpsr]  SRAM passgate NMOS sp ull10ttp  (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT*SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D8)-DCO) 
//   M[nchpd_ull10ttpsr]  SRAM pulldown NMOS sp ull10ttp  (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT*SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D8)-DCO) 
//   M[nchpg_ull10ttprpsr] SRAM passgate NMOS sp ull10ttprp (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT-SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D8)-DCO) 
//   M[nchpd_ull10ttprpsr] SRAM pulldown NMOS sp sull10ttpr (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT-SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D8)-DCO) 
// 
// 
//   M[nchpg_ncisr]       SRAM passgate NMOS sp nci       (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT-SRM_IMP-SRM_DP)-DCO)  
//   M[nchpd_ncisr]       SRAM pulldown NMOS sp nci       (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT-SRM_IMP-SRM_DP)-DCO) 
//   M[nchpg_dpncisr]     SRAM passgate NMOS dp nci       (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT-SRM_IMP*SRM_DP)-DCO) 
//   M[nchpd_dpncisr]     SRAM pulldown NMOS dp nci       (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT-SRM_IMP*SRM_DP)-DCO) 
// 
// 
// 
// 
//    
//   M[nch_ehvt]					1.1V Extreme High-Vt NMOS				  ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-VTUL_N*EHVT_N-ELVT_N-DCO_LPP-DNW-SRM-OD1T-DCO-ROM-POS-CORELDD_IO) 
//   M[nch_ehvt_dnw]				1.1V Extreme High-Vt NMOS/DNW			  ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-VTUL_N*EHVT_N-ELVT_N-DCO_LPP*DNW-SRM-OD1T-DCO-ROM-POS-CORELDD_IO) 
//   M[nch_elvt]				1.1V Extreme Low-Vt  NMOS			  ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-VTUL_N-EHVT_N*ELVT_N-DCO_LPP-DNW-SRM-OD1T-DCO-ROM-POS-CORELDD_IO) 
//   M[nch_elvt_dnw]			1.1V Extreme Low-Vt  NMOS/DNW			  ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-VTUL_N-EHVT_N*ELVT_N-DCO_LPP*DNW-SRM-OD1T-DCO-ROM-POS-CORELDD_IO) 
//   M[nchpg_ullhcsr]     SRAM passgate NMOS ull hcsr     (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM*SRAMPSGT*SRM_IMP-SRM_DP*SRMLOP_D3)*SRM_ULL)  
//   M[nchpd_ullhcsr]     SRAM pulldown NMOS ull hcsr     (((NGATE-OD25-OD18-OD33-NT_N-VTL_N-VTH_N)*SRM-SRAMPSGT*SRM_IMP-SRM_DP*SRMLOP_D3)*SRM_ULL)  
// 
//   M[nch_dnw]           CORE Nominal VT NMOS            ((NGATE-OD25-OD18-OD33-OD_12-OD_6-NT_N)-VTUL_N-VTL_N-VTH_N-ELVT_N-ILVT-EHVT_N*DNW-SRM-OD1T-DCO-POS-CORELDD_IO) 
//    
//   M[nch_hvt]           CORE HIGH-VT NMOS               ((NGATE-OD25-OD18-OD33-NT_N)-DNW*VTH_N-SRM-DCO-POS) 
//   M[nch_lvt]           CORE LOW-VT NMOS                ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-DNW*VTL_N-DCO-POS) 
//   LDDN[nch_hv25_snw]   HV 2.5V NMOS                    ((NGATE*HVD_N*OD25-OD18-OD33-NT_N-RPO)-HVDDMY-DNW) 
//   M[nch_avt]           AVT NMOS	                ((NGATE-OD25-OD18-OD33-OD_12-NT_N)-DNW-SRM-OD1T-DCO-ROM-POS-SR_ESD*CORELDD_IO) 
//   M[nch_avt_dnw]       AVT NMOS/DNW	                ((NGATE-OD25-OD18-OD33-OD_12-NT_N)*DNW-SRM-OD1T-DCO-ROM-POS-SR_ESD*CORELDD_IO) 
//   M[pch_avt]           AVT PMOS	                ((PGATE-OD25-OD33-OD18-OD_12)-SRM-OD1T-DCO-POS*CORELDD_IO) 
// 
// 
// 
// 
//   M[nch_hvt_dnw]        CORE HIGH-VT NMOS/DNW                      ((NGATE-OD25-OD18-OD33-NT_N)*DNW*VTH_N-SRM-POS)  
//   M[nch_lvt_dnw]        CORE LOW-VT NMOS/DNW                       ((NGATE-OD25-OD18-OD33-OD_12-NT_N)*DNW*VTL_N-SRM-POS) 
//   M[nch_18]            I/O 1.8V Nominal VT NMOS                    ((NGATE*OD18-OD25-OD33-NT_N-RH)-DNW)  
//   M[nch_25]            I/O 2.5V Nominal VT NMOS                    ((NGATE*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)-DNW)  
//   M[nch_25od33]        I/O 2.5V Nominal VT NMOS over-drive 3.3V    ((NGATE*OD25-OD33-OD18-NT_N-OD25_18*OD25_33)-DNW)  
//   M[nch_25ud18]        I/O 2.5V Nominal VT NMOS under-drive 1.8V   ((NGATE*OD25-OD33-OD18-NT_N*OD25_18-OD25_33)-DNW)  
//   M[nch_ana25_mac]     I/O 2.5V Low Noise  NMOS                    ((NGATE*ANALOG*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)-DNW) 
//   M[nch_25_fgd_mac]    I/O 2.5V FGD NMOS                           ((NGATE*FGDDMY*PP*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)-DNW) 
//   M[nch_25_ngd_mac]    I/O 2.5V NGD NMOS                           ((NGATE*FGDDMY-PP*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)-DNW) 
//   M[nch_18_dnw]        I/O 1.8V Nominal VT NMOS/DNW                ((NGATE*OD18-OD25-OD33-NT_N)*DNW)-RH  
//   M[nch_18ud15]        I/O 1.8V Nominal VT NMOS under-drive        ((NGATE*OD18-OD25-OD33-NT_N*OD18_15)-DNW) 
//   M[nch_18ud15_dnw]    I/O 1.8V Nominal VT NMOS/DNW under-drive    ((NGATE*OD18-OD25-OD33-NT_N*OD18_15)*DNW) 
//   M[nch_25_dnw]        I/O 2.5V Nominal VT NMOS/DNW                  ((NGATE*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)*DNW)  
//   M[nch_25od33_dnw]    I/O 2.5V Nominal VT NMOS/DNW over-drive 3.3V  ((NGATE*OD25-OD33-OD18-NT_N-OD25_18*OD25_33)*DNW)  
//   M[nch_25ud18_dnw]    I/O 2.5V Nominal VT NMOS/DNW under-drive 1.8V ((NGATE*OD25-OD33-OD18-NT_N*OD25_18-OD25_33)*DNW)  
//   M[nch_ana25_dnw_mac]     I/O 2.5V Low Noise  NMOS/DNW              ((NGATE*ANALOG*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)*DNW) 
//   M[nch_25_fgd_dnw_mac]    I/O 2.5V FGD NMOS                         ((NGATE*FGDDMY*PP*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)*DNW) 
//   M[nch_25_ngd_dnw_mac]    I/O 2.5V NGD NMOS                         ((NGATE*FGDDMY-PP*OD25-OD33-OD18-NT_N-OD25_18-OD25_33)*DNW) 
//   M[nch_na18]          I/O 1.8V native device                    ((NGATE*OD18-OD25-OD33-OD18_15)*NT_N-VTL_N_18)    
//   M[nch_na25]          I/O 2.5V native device                    ((NGATE*OD25-OD33-OD18-OD25_33-OD25_18)*NT_N-LP_NTN)   
//   M[nch_na25ud18]      I/O 2.5V native device under-drive 1.8V   ((NGATE*OD25-OD33-OD18-OD25_33*OD25_18)*NT_N-LP_NTN)   
//   M[nch_na25od33]      I/O 2.5V native device over-drive 3.3V    ((NGATE*OD25-OD33-OD18*OD25_33-OD25_18)*NT_N-LP_NTN)   
// 
//   M[pch]               CORE Nominal VT PMOS                      ((PGATE-OD25-OD33-OD18-OD_12)-VTUL_P-EHVT_P-VTL_P-VTH_P-ELVT_P-SRM-OD1T-DCO-POS-CORELDD_IO) 
// 
//    
// 
//   M[pchpu_sr]          SRAM PMOS sp                              ((PGATE-OD25-OD33-OD18-VTH_P*SRM*SRM_IMP-SRM_DP-SRM_ULL)-DCO)    
//   M[pchpu_ncisr]       SRAM PMOS sp nci                          ((PGATE-OD25-OD33-OD18-VTH_P*SRM-SRM_IMP-SRM_DP)-DCO)  
//   M[pchpu_dpncisr]     SRAM PMOS dp nci                          ((PGATE-OD25-OD33-OD18-VTH_P*SRM-SRM_IMP*SRM_DP)-DCO)  
// 
//   M[pchpu_ullsr]       SRAM PMOS sp ull                          ((PGATE-OD25-OD33-OD18-VTH_P*SRM*SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D4)-DCO) 
//   M[pchpu_ull10ttpsr]  SRAM PMOS sp ull10ttp                     ((PGATE-OD25-OD33-OD18-VTH_P*SRM*SRM_IMP-SRM_DP*SRM_ULL*SRMLOP_D8)-DCO) 
// 
//   M[pch_ehvt]          1.1V Extreme High-Vt PMOS                 ((PGATE-OD25-OD33-OD18-OD_12)-VTUL_P*EHVT_P-ELVT_P-DCO_LPP-SRM-OD1T-DCO-POS-CORELDD_IO) 
//   M[pch_elvt]          1.1V Extreme Low-Vt  PMOS                 ((PGATE-OD25-OD33-OD18-OD_12)-VTUL_P-EHVT_P*ELVT_P-DCO_LPP-SRM-OD1T-DCO-POS-CORELDD_IO) 
//   M[pchpu_ullhcsr]     SRAM PMOS ull hcsr                        ((PGATE-OD25-OD33-OD18-VTH_P*SRM*SRM_IMP-SRM_DP*SRMLOP_D3)*SRM_ULL) 
//   M[pch_hvt]           CORE High-VT PMOS                         ((PGATE-OD25-OD33-OD18*VTH_P)-SRM-DCO-POS)  
//   M[pch_lvt]           CORE LOW-VT PMOS                          ((PGATE-OD25-OD33-OD18-OD_12*VTL_P)-SRM-DCO) 
//   LDDP[pch_hv25_spw]   HV 2.5V PMOS                              (PGATE*HVD_P*DNW*OD25-OD18-OD33-NT_N-RPO-HVDDMY) 
//   M[pch_18]            I/O 1.8V Nominal VT PMOS                  (PGATE*OD18-OD25-OD33)  
//   M[pch_18ud15]        I/O 1.8V Nominal VT PMOS under-drive      (PGATE*OD18-OD25-OD33*OD18_15)   
//   M[pch_25]            I/O 2.5V Nominal VT PMOS                  (PGATE*OD25-OD33-OD18-OD25_18-OD25_33) 
//   M[pch_25od33]        I/O 2.5V Nominal VT PMOS over-drive 3.3V  (PGATE*OD25-OD33-OD18-OD25_18*OD25_33) 
//   M[pch_25ud18]        I/O 2.5V Nominal VT PMOS under-drive 1.8V (PGATE*OD25-OD33-OD18*OD25_18-OD25_33) 
// 
//    
//   rnwsti_m     N-Well resister under STI 3T                      (NWDMY1*NW-(OD*RPO)) 
//   rnwod        N-Well resistor under OD 2T                       (NWDMYi*NW*(OD*RPO))  
//   rnwod_m      N-Well resistor under OD 3T                       (NWDMY1*NW*(OD*RPO))  
//   rnwsti       N-Well resister under STI 2T                      (NWDMYi*NW-(OD*RPO))  
//   rppolywo     P+Poly resistor w/o Silicide 2T                   (RPDMYi*PO*PP*RPO*RH-RFDMY)  
//   rppolywo_m   P+Poly resistor w/o Silicide 3T                   (RPDMY1*PO*PP*RPO*RH-RFDMY)  
//   rnpolywo     N+Poly resistor w/o Silicide 2T                   (RPDMYi*PO*NP*RPO*RH)  
//   rnpolywo_m   N+Poly resistor w/o Silicide 3T                   (RPDMY1*PO*NP*RPO*RH)  
//   rpodwo       P+diff resistor w/o Silicide                      (RPDMYi*OD*PP*RPO*RH)  
//   rnodwo       N+diff resistor w/o Silicide                      (RPDMYi*OD*NP*RPO*RH)  
//   rppolywo_rf  RF P+Poly resistor w/o Silicide 3T (RPDMYi*PO*PP*RPO*RH*RFDMY)  
//   rnpolywo_rf  RF N+Poly resistor w/o Silicide 3T (RPDMYi*PO*NP*RPO*RH*RFDMY)  
//   rppolywo_serp_m   3T Serpentine P+PO Resistor                  (RPDMY1*SERPDMY*PO*PP*RPO*RH)  
// 
//   rm1w       METAL1 resistor                    (RMDMY1*M1) 
//   rm2w       METAL2 resistor                    (RMDMY2*M2) 
//   rm3w       METAL3 resistor                    (RMDMY3*M3) 
//   rm4w       METAL4 resistor                    (RMDMY4*M4) 
//   rm5w       METAL5 resistor                    (RMDMY5*M5) 
//   rm6w       METAL6 resistor                    (RMDMY6*M6) 
//   rm11    AP resistor                        (RMDMYAP*AP) 
// 
//   D[pdio]      CORE diode P+/NW                   (DIODMY*OD*PP-OD25-OD33-OD18*NW-VTL_P-VTH_P-ELVT_P-CORELDD_IO-VTUL_P-EHVT_P-ILVT-VTUL_P_EDM-OD1T-DCO)  
//   D[ndio]      CORE diode N+/PW                   (DIODMY*OD*NP-OD25-OD33-OD18*PSUB-VTL_N-VTH_N-ELVT_N-CORELDD_IO-VTUL_N-EHVT_N-ILVT-VTUL_N_EDM-OD1T-DCO)  
// 
//   D[nwdio]          CORE diode NW/PW                            (DIODMY*NW-DCO-OD_50F)  
//   D[pdio_hvt]       CORE High-VT diode P+/NW                    (DIODMY*OD*PP-OD25-OD33-OD18*NW*VTH_P-DCO)  
//   D[ndio_hvt]       CORE High-VT diode N+/PW                    (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*VTH_N-DCO)  
//   D[pdio_lvt]       CORE Low-VT diode P+/NW                     (DIODMY*OD*PP-OD25-OD33-OD18*NW*VTL_P-DCO)  
//   D[ndio_lvt]       CORE Low-VT diode N+/PW                     (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*VTL_N-DCO) 
//   D[ndio_ehvt]      CORE EHVT diode N+/PW                       (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*EHVT_N-DCO) 
//   D[pdio_ehvt]      CORE EHVT diode P+/NW                       (DIODMY*OD*PP-OD25-OD33-OD18*NW*EHVT_P-DCO) 
//   D[ndio_elvt]      CORE ELVT diode N+/PW                       (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*ELVT_N-DCO) 
//   D[ndio_avt]       CORE AVT diode N+/PW                        (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*CORELDD_IO-DCO)  
//   D[pdio_elvt]      CORE ELVT diode P+/NW                       (DIODMY*OD*PP-OD25-OD33-OD18*NW*ELVT_P-DCO) 
//   D[pdio_avt]       CORE AVT diode P+/NW                        (DIODMY*OD*PP-OD25-OD33-OD18*NW*CORELDD_IO-DCO) 
//         
// 
//   D[pdio_18]       I/O 1.8V diode P+/NW                         (DIODMY*OD*PP*OD18*NW-OD18_15)  
//   D[ndio_18]       I/O 1.8V diode N+/PW                         (DIODMY*OD*NP*OD18*PSUB-OD18_15)  
//   D[pdio_25]       I/O 2.5V diode P+/NW                         (DIODMY*OD*PP*OD25-OD25_18-OD25_33*NW)  
//   D[pdio_25ud18]   I/O 2.5V diode P+/NW under-drive 1.8V        (DIODMY*OD*PP*OD25*OD25_18-OD25_33*NW)  
//   D[pdio_25od33]   I/O 2.5V diode P+/NW over-drive 3.3V         (DIODMY*OD*PP*OD25-OD25_18*OD25_33*NW)  
//   D[ndio_25]       I/O 2.5V diode N+/PW                         (DIODMY*OD*NP*OD25-OD25_18-OD25_33*PSUB)  
//   D[ndio_25ud18]   I/O 2.5V diode N+/PW under-drive 1.8V        (DIODMY*OD*NP*OD25*OD25_18-OD25_33*PSUB)  
//   D[ndio_25od33]   I/O 2.5V diode N+/PW over-drive 3.3V         (DIODMY*OD*NP*OD25-OD25_18*OD25_33*PSUB)  
//   D[ndio_na]       CORE native diode N+/PW                      (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*NT_N-VTL_N-VTH_N-ELVT_N-VTZ_N-DCO-CORELDD_IO-LP_NTN) 
//   D[ndio_naavt]    AVT  native diode N+/PW                      (DIODMY*OD*NP-OD25-OD33-OD18*PSUB*NT_N-VTZ_N-DCO*CORELDD_IO-ULP_WR) 
//   D[ndio_na18]     I/O 1.8V native diode N+/PW                  (DIODMY*OD*NP*OD18*PSUB*NT_N-VTL_N_18)  
//   D[ndio_na25]         I/O 2.5V native diode N+/PW                              (DIODMY*OD*NP*OD25*PSUB*NT_N-LP_NTN) 
//   D[ndio_na25od33]     I/O 2.5V native diode N+/PW over-drive  3.3V             (DIODMY*OD*NP*OD25-OD25_18*OD25_33*PSUB*NT_N-LP_NTN) 
//   D[ndio_na25ud18]     I/O 2.5V native diode N+/PW under-drive 1.8V             (DIODMY*OD*NP*OD25*OD25_18-OD25_33*PSUB*NT_N-LP_NTN) 
//   D[pdio_18ud15]   I/O 1.8V diode P+/NW under-drive 1.5V        (DIODMY*OD*PP*OD18*NW*OD18_15) 
//   D[ndio_18ud15]   I/O 1.8V diode N+/PW under-drive 1.5V        (DIODMY*OD*NP*OD18*PSUB*OD18_15) 
//	 
// 
// 
// 
//   Q[pnp10]         CORE PNP-BJT                        (BJTDMY*OD*PP*NW*RPO)  
//   Q[pnp5]          CORE PNP-BJT                        (BJTDMY*OD*PP*NW*RPO)  
//   Q[pnp2]          CORE PNP-BJT                        (BJTDMY*OD*PP*NW*RPO)  
//    
// 
//   nmoscap        CORE MOSCAP Varactor                  ((VARGT*NW-OD_12-OD18-OD25-OD33)-RFDMY-DCO-OD1T) 
//   pmoscap_rf	     CORE RF PMOS Varactor               (PVARGT-NW-SR_DPO*VARi*RFDMY*DNW-OD18) 
//   pmoscap_rf25      I/O 2.5V RF PMOS Varactor           (PVARGT-NW-SR_DPO*OD25*VARi*RFDMY*DNW-OD18) 
//   nmoscap_25        I/O 2.5V MOSCAP Varactor            ((VARGT*NW-OD_12-OD18*OD25-OD33)-RFDMY) 
//   nmoscap_18        I/O 1.8V MOSCAP Varactor            ((VARGT*NW-OD_12*OD18-OD25-OD33)-RFDMY) 
//   moscap_rf         RF MOSCAP Varactor                  ((VARGT*NW-OD18-OD25-OD33-VTH_P)*RFDMY*DNW) 
//   moscap_rf_nw      RF MOSCAP Varactor w/i NW           ((VARGT*NW-OD18-OD25-OD33-VTH_P)*RFDMY-DNW) 
//   moscap_rf25       I/O 2.5V MOSCAP Varactor            ((VARGT*NW-OD18*OD25-OD33)*RFDMY*DNW) 
//   moscap_rf25_nw    I/O 2.5V MOSCAP Varactor w/i NW     ((VARGT*NW-OD18*OD25-OD33)*RFDMY-DNW) 
//   sbd_pw_mac            2T Schottky Diode               (DNW*OD*NW-NT_N-PO*NP*PP*SBDDMY-DIODMY) 
//   njf_poly_25_mac       2.5V NJFET                      (OD*DNW*OD25-OD18*NP*PP*PO*JDMY*ANALOG-JNW*RPO)  
//   pjf_poly_25_mac       2.5V PJFET                      (OD-DNW-NW*OD25-OD18*NP*PP*PO*JDMY*ANALOG*JNW*RPO) 
//   njf_4_mac             4V NJFET                        (OD*DNW*NW*OD25-OD18*NP*PP*HVJDMY*JFET_BLK_DNW) 
//   pjf_4_mac             4V PJFET                        (OD*DNW*NW*OD25-OD18*NP*HVJDMY*JFET_BLK_PSUB*JNW*RPO) 
//   rpodwo_m          P+diff resistor w/o Silicide         (RPDMY1*OD*PP*RPO*RH*NW)  
//   rnodwo_m          N+diff resistor w/o Silicide         (RPDMY1*OD*NP*RPO*RH-NW)  
//   rnodl             N+diff resistor w/i Silicide >=2 2T  (RPDMYi*OD*NP-RPO*RH)  
//   rnodl_m           N+diff resistor w/i Silicide >=2 3T  (RPDMY1*OD*NP-RPO*RH-NW)  
//   rnods             N+diff resistor w/i Silicide <2 2T   (RPDMYi*OD*NP-RPO*RH)  
//   rnods_m           N+diff resistor w/i Silicide <2 3T   (RPDMY1*OD*NP-RPO*RH-NW)  
//   rpodl             P+diff resistor w/i Silicide >=2 2T  (RPDMYi*OD*PP-RPO*RH)  
//   rpodl_m           P+diff resistor w/i Silicide >=2 3T  (RPDMY1*OD*PP-RPO*RH*NW)  
//   rpods             P+diff resistor w/i Silicide <2 2T   (RPDMYi*OD*PP-RPO*RH)  
//   rpods_m           P+diff resistor w/i Silicide <2 3T   (RPDMY1*OD*PP-RPO*RH*NW)  
//   rnpolyl           N+Poly resistor w/i Silicide >=2 2T  (RPDMYi*PO*NP-RPO*RH)  
//   rnpolyl_m         N+Poly resistor w/i Silicide >=2 3T  (RPDMY1*PO*NP-RPO*RH)  
//   rnpolys           N+Poly resistor w/i Silicide <2 2T   (RPDMYi*PO*NP-RPO*RH)  
//   rnpolys_m         N+Poly resistor w/i Silicide <2 3T   (RPDMY1*PO*NP-RPO*RH)  
//   rppolyl           P+Poly resistor w/i Silicide >=2 2T  (RPDMYi*PO*PP-RPO*RH-RFDMY) 
//   rppolyl_rf        RF P+Poly resistor w/i Silicide >=2 3T (RPDMYi*PO*PP-RPO*RH*RFDMY)  
//   rppolyl_m         P+Poly resistor w/i Silicide >=2 3T    (RPDMY1*PO*PP-RPO*RH-RFDMY)  
//   rppolys           P+Poly resistor w/i Silicide <2 2T     (RPDMYi*PO*PP-RPO*RH-RFDMY)  
//   rppolys_rf        RF P+Poly resistor w/i Silicide <2 3T  (RPDMYi*PO*PP-RPO*RH*RFDMY)  
//   rppolys_m         P+Poly resistor w/i Silicide <2 3T     (RPDMY1*PO*PP-RPO*RH-RFDMY)  
// 
// 
// 
// 
//   D[ndio_esd]       ESD Diode DB                         (ESDIMP*NP*OD*RPO)  
//   D[dnwpsub]        Diode DNW/PSUB                       (DNW*PSUB)            
//   D[pwdnw]          Diode DNW/PSUB                       (DNW-NW) 
//   D[pnwdio]         Parasitic NW/PSUB Diode              (NW*PSUB-DNW-DIODMY)   
//   Q[npn10]         CORE NPN10X10                         (DNW*BJTDMY*OD*NP*RPO-OD_50F) 
//   Q[npn5]          CORE NPN5X5                           (DNW*BJTDMY*OD*NP*RPO-OD_50F) 
//   Q[npn2]          CORE NPN2X2                           (DNW*BJTDMY*OD*NP*RPO-OD_50F) 
// 
// 
//   nmos_rf_hv25         2.5V RF DEMOS                          ((NGATE-OD18*OD25-OD33-NT_N-VTH_N-VTL_N)-DNW*RFDMY) 
//   nmos_rf        	CORE RF NMOS                           ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-ELVT_N)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_nodnw  	CORE RF NMOS w/o DNW                   ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-ELVT_N)-DNW*RFDMY) 
//   nmos_rf_25     	2.5V RF NMOS                           ((NGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_N-VTL_N)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_25_nodnw  	2.5V RF NMOS w/o DNW                   ((NGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_N-VTL_N)-DNW*RFDMY) 
//   nmos_rf_25od33     	2.5V RF NMOS over-drive 3.3V           ((NGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_N-VTL_N)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_25od33_nodnw 2.5V RF NMOS w/o DNW  over-drive 3.3V  ((NGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_N-VTL_N)-DNW*RFDMY) 
//   nmos_rf_25ud18     	2.5V RF NMOS under-drive 1.8V 	       ((NGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_N-VTL_N)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_25ud18_nodnw 2.5V RF NMOS w/o DNW  under-drive 1.8V ((NGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_N-VTL_N)-DNW*RFDMY)  
//   nmos_rf_hvt     	HVT RF NMOS                            ((NGATE-OD18-OD25-OD33-NT_N*VTH_N-VTL_N)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_hvt_nodnw  	HVT RF NMOS w/o DNW                    ((NGATE-OD18-OD25-OD33-NT_N*VTH_N-VTL_N)-DNW*RFDMY) 
//   nmos_rf_lvt     	LVT RF NMOS                            ((NGATE-OD18-OD25-OD33-NT_N-VTH_N*VTL_N-ILVT)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_lvt_nodnw  	LVT RF NMOS w/o DNW                    ((NGATE-OD18-OD25-OD33-NT_N-VTH_N*VTL_N-ILVT)-DNW*RFDMY) 
//   nmos_rf_elvt        	ELVT RF NMOS                           ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT*ELVT_N)*DNW*RFDMY-RFDMY6T) 
//   nmos_rf_elvt_nodnw 	ELVT RF NMOS w/o DNW                   ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT*ELVT_N)-DNW*RFDMY)    
//   pmos_rf        	CORE RF PMOS                           ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-ELVT_P)*DNW*RFDMY-RFDMY5T) 
//   pmos_rf_nw  		CORE RF PMOS w/o DNW                   ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT)-DNW*RFDMY-RFDMY5T)   
//   pmos_rf_25     	2.5V RF PMOS                           ((PGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_P-VTL_P)*DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25_nw  	2.5V RF PMOS w/o DNW                   ((PGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_P-VTL_P)-DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25od33 	2.5V RF PMOS over-drive 3.3V           ((PGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_P-VTL_P)*DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25od33_nw  	2.5V RF PMOS w/o DNW over-drive 3.3V   ((PGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_P-VTL_P)-DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25ud18 	2.5V RF PMOS under-drive 1.8V          ((PGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_P-VTL_P)*DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25ud18_nw  	2.5V RF PMOS w/o DNW under-drive 1.8V  ((PGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_P-VTL_P)-DNW*RFDMY-RFDMY5T) 
//   pmos_rf_hvt     	HVT RF PMOS                            ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P)*DNW*RFDMY-RFDMY5T) 
//   pmos_rf_hvt_nw  	HVT RF PMOS w/o DNW                    ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P)-DNW*RFDMY-RFDMY5T) 
//   pmos_rf_lvt     	LVT RF PMOS                            ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT)*DNW*RFDMY-RFDMY5T) 
//   pmos_rf_lvt_nw  	LVT RF PMOS w/o DNW                    ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT)-DNW*RFDMY-RFDMY5T)   
//   pmos_rf_elvt		ELVT RF PMOS				((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*ELVT_P)*DNW*RFDMY-RFDMY5T)  
//   pmos_rf_elvt_nw	ELVT RF PMOS w/o DNW			((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*ELVT_P)-DNW*RFDMY-RFDMY5T)  
//   nmos_rf_6t     	6T CORE RF NMOS                        ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT)*NW*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_25_6t  	6T 2.5V RF NMOS                        ((NGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_N-VTL_N)*NW*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_25od33_6t	6T 2.5V RF NMOS over-drive 3.3V        ((NGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_N-VTL_N)*NW*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_25ud18_6t 	6T 2.5V RF NMOS under-drive 1.8V       ((NGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_N-VTL_N)*NW*DNW*RFDMY*RFDMY6T)  
//   nmos_rf_hvt_6t     	6T HVT RF NMOS                         ((NGATE-OD18-OD25-OD33-NT_N*VTH_N-VTL_N)*NW*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_lvt_6t 	6T LVT RF NMOS                         ((NGATE-OD18-OD25-OD33-NT_N-VTH_N*VTL_N-ILVT)*NW*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_elvt_6t	6T ELVT RF NMOS			       ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT*ELVT_N)*NW*DNW*RFDMY*RFDMY6T)  
//   pmos_rf_5t        	5T CORE RF PMOS                        ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_nw_5t 	5T CORE RF PMOS w/o DNW                ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT)-DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25_5t     	5T 2.5V RF PMOS                        ((PGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_P-VTL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25_nw_5t  	5T 2.5V RF PMOS w/o DNW                ((PGATE-OD18*OD25-OD33-OD25_18-OD25_33-NT_N-VTH_P-VTL_P)-DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25od33_5t 	5T 2.5V RF PMOS over-drive 3.3V        ((PGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_P-VTL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25od33_nw_5t 5T 2.5V RF PMOS w/o DNW over-drive 3.3V  ((PGATE-OD18*OD25-OD33-OD25_18*OD25_33-NT_N-VTH_P-VTL_P)-DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25ud18_5t 	5T 2.5V RF PMOS under-drive 1.8V         ((PGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_P-VTL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25ud18_nw_5t 5T 2.5V RF PMOS w/o DNW under-drive 1.8V ((PGATE-OD18*OD25-OD33*OD25_18-OD25_33-NT_N-VTH_P-VTL_P)-DNW*RFDMY*RFDMY5T)    
//   pmos_rf_hvt_5t     	5T HVT RF PMOS                         ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_hvt_nw_5t  	5T HVT RF PMOS w/o DNW                 ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P)-DNW*RFDMY*RFDMY5T) 
//   pmos_rf_lvt_5t     	5T LVT RF PMOS                         ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_lvt_nw_5t  	5T LVT RF PMOS w/o DNW                 ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT)-DNW*RFDMY*RFDMY5T) 
//   pmos_rf_elvt_5t     	5T ELVT RF PMOS                        ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*ELVT_P)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_elvt_nw_5t 	5T ELVT RF PMOS w/o DNW                ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*ELVT_P)-DNW*RFDMY*RFDMY5T)  
//  
//   xjvar             	XJ varactor                            (VAR*RFDMY*NW*DNW*OD*NP*PP)      
//   xjvar_nw          	XJ varactor w/o DNW                    (VAR*RFDMY*NW-DNW*OD*NP*PP)      
// 
//   probe1             	Probe M1                               (PROBEM1) 
//   probe2             	Probe M2                               (PROBEM2) 
//   probe3             	Probe M3                               (PROBEM3) 
//   probe4             	Probe M4                               (PROBEM4) 
// 
// 
//   ndio_hia_rf		High-Current RF N+/PSUB Diode          (HIA_DUMMY*OD*NP-OD25-OD33-OD18*PSUB-OD1T-DCO*RFDMY) 
//   pdio_hia_rf		High-Current RF P+/NW Diode            (HIA_DUMMY*OD*PP-OD25-OD33-OD18*NW-OD1T-DCO*RFDMY) 
//   
//   crtmom          crtmom                    (((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*SR_DPO-RFDMY-MOMDMY22)) 
//   cfmom           cfmom                     (((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*SR_DPO-RFDMY-MOMDMY22)) 
//   crtmom_2t       crtmom 2T                 (((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*MOMDMY_2T-SR_DPO-RFDMY-MOMDMY22)) 
// 
//   crtmom_wo       crtmom w/o poly-shielding       (((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)-RFDMY-MOMDMY22*MOMDMY_NPO*RPO)) 
//   crtmom_wo_mx    cross crtmom w/o poly-shielding (((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*MOMDMY22*MOMDMY_NPO*RPO)) 
//   crtmom_wo_rf    RF crtmom w/o poly-shielding    ((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*RFDMY-MOMDMY22*MOMDMY_NPO*RPO) 
//   cfmom_wo        cfmom w/o poly-shielding        (((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)-RFDMY-MOMDMY22*MOMDMY_NPO*RPO)) 
//   cfmom_wo_mx     cross cfmom w/o poly-shielding  (((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*MOMDMY22*MOMDMY_NPO*RPO)) 
//   cfmom_wo_rf     RF cfmom w/o poly-shielding     ((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*RFDMY-MOMDMY22*MOMDMY_NPO*RPO) 
//   cfmom_2t        cfmom 2T                  (((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*MOMDMY_2T-SR_DPO-RFDMY-MOMDMY22-MOMDMY_120F_EF)) 
// 
// 
//   crtmom_rf       RF crtmom                 ((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*SR_DPO*RFDMY-MOMDMY22) 
//   crtmom_mx       cross crtmom              (((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*SR_DPO*MOMDMY22)) 
//   crtmom_mx_4t    cross crtmom 4T           (((MOMDMY0*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*MOMDMY_2T-SR_DPO*MOMDMY22)) 
//   cfmom_rf        RF cfmom                  ((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*SR_DPO*RFDMY-MOMDMY22) 
//   cfmom_mx        cross cfmom               (((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*SR_DPO*MOMDMY22)) 
//   cfmom_mx_4t     cross cfmom 4T            (((MOMDMY100*M1*MOMDMY1*M2*MOMDMY2*M3*MOMDMY3)*MOMDMY_2T-SR_DPO*MOMDMY22)) 
// 
// 
//   spiral_std_mz_a        Standard inductor       (M6*INDDMY) 
//   spiral_sym_mz_a	   Symmetric inductor      (M6*INDDMY)	 
//   spiral_sym_ct_mz_a_x   Centro-tap inductor     (M6*INDDMY*IND_D4)	 
//   spiral_sym_mz_ax       Symmetric inductor      (M6*INDDMY) 
//   spiral_sym_ct_mz_ax_a  Centro-tap inductor     (M6*INDDMY*IND_D4) 
//   spiral_std_mza_a       Standard inductor       (M6*INDDMY) 
//   spiral_sym_mza_a       Symmetric inductor      (M6*INDDMY) 
//   spiral_sym_mu_a  	   Symmetric inductor Mu_a (M6*INDDMY) 	 
//   spiral_sym_ct_mza_a_x  Centro-tap inductor     (M6*INDDMY*IND_D4) 
//   spiral_sym_ct_mu_a_a   Centro-tap inductor Mu_a    	    (M6*INDDMY*IND_D4) 	 	      
//   spiral_std_m2za_za      Standard inductor      (M6*INDDMY) 
//   spiral_sym_m2za_z       Symmetric inductor     (M6*INDDMY) 
//   spiral_sym_ct_m2za_z_a  Centro-tap inductor    (M6*INDDMY*IND_D4) 
//   spiral_std_mu_x               Standard inductor Top(Mu) coil(Mu) cross(Mx)            (M6*INDDMY) 
//   spiral_std_mu_z               Standard inductor Top(Mu) coil(Mu) cross(Mz)            (M6*INDDMY) 
//   spiral_sym_mu_x               Symmetric inductor Top(Mu) coil(Mu) cross(Mx)           (M6*INDDMY) 
//   spiral_sym_mu_z               Symmetric inductor Top(Mu) coil(Mu) cross(Mz)           (M6*INDDMY) 
//   spiral_sym_ct_mu_x_a          Centro-tap inductor Top(Mu) coil(Mu) cross(Mx) Tap(AP)  (M6*INDDMY*IND_D4) 
//   spiral_sym_ct_mu_z_x          Centro-tap inductor Top(Mu) coil(Mu) cross(Mz) Tap(Mu)  (M6*INDDMY*IND_D4)     
//   spiral_sym_ct_mu_z_a   Centro-tap inductor Mu_z    	    (M6*INDDMY*IND_D4) 
//   spiral_std_mu_a		  Standard inductor Mu_a    	    (M6*INDDMY) 	 
//   spiral_sym_ct_mu_a_x          Centro-tap inductor Mu_a    	    (M6*INDDMY*IND_D4) 	 	      
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
//   ----- ----------------------------- ---------------------------------- 
//   * OD    = ODI 
//   * PO    = POI 
//   * DNW   = DNWi 
//   * HVNW = HVNWi 
//   * HVPW = HVPWi 
// 
//   * NGATE = ODI * POI * NP - NW - NWLVT - PWLVT 
//   * PGATE = ODI * POI * PP * NW - NWLVT - PWLVT 
//   * VARGT = ODI * POI * NP * NW * VARi - SR_DPO 
//   * PVARGT = ODI * POI * PP - NW * VARi - SR_DPO 
//   * PSUB  = BULK 
//   * SRM   = SRMD0 - SRMD5 
//   * SRM_RP  = SRMD0 * SRMD5 
//   * SRM_IMP = SRMD1 + SRMD2 
//   * SRM_DP = SRMLOP_DP + SRMLOP_D6 
//   * RPDMYi = RPDMYai - SR_DOD 
//   * RPDMY1 = RPDMYa1 - SR_DOD 
//   * VAR   = VARi - SR_DOD 
//   * BJTDMY = BJTDMYi - SR_DOD  
//   * DIODMY = DIODMYi - SR_DOD 
//   * POS   = POS1 + POS2 
//   * DCO   = DCOi 
//   * MOMDMY_NPO = MOMDMY31 + MOMDMY32 + MOMDMY33 - SR_DPO 
//   * M1   = M1i 
//   * M2   = M2i 
//   * M3   = M3i 
//   * M4   = M4i 
//   * M5   = M5i 
//   * M6   = M6i 
//   * AP   = API 
//    
//////////////////////////////////////////////////////////////////////////////// 
// 
// USER NOTES :  
//  
// 1) Must execute LVS_install.pl to get LVS decks with different metal scheme. 
//  
// 2) Turn on DFM switch is recommended in N45/N40 process. Please turn on switch "DFM_RULE" 
//    in LVS command fle. 
// 
// 3) By default, VIRTUAL CONNECT COLON is set yes. Please set to "NO" as doing full-chip checking. 
// 
// 4) The switch "extract_compact_model"is turn off by default.  
//    In general, MOS devices use macro model in N45 process for accuracy.   
//    When the switch is turn on, MOS devices use compact model if there is no MAC(208,1) layer. 
// 
// 5) For Calibre "EDTEXT" file, use .INCLUDE strings.txt.  
//        LAYOUT TEXT  "text string" [x] [y]  (layer num) (cell name)  
//  
// 6) Input layer 'OD' is defined as thin oxide (OD) area which would   
//    be drawn by one generic od mask or by seperated N+OD and P+OD.   
//    Remove layers in the 'OD' entries you don't want to use at   
//    layer definition block.  
//  
// 7) Default setting for property check is 0%. Users should check with  
//    IP/Designe providers for proper tolerance.  
//  
// 8) It's recommended to run Calibre LVS by hierarchical mode since false  
//    errors have been encountered by only flat mode option '-lvs'.  
//  
// 9) Default property resolution for ambiguity is set to 32. It could be  
//    necessary to increase this setting to resolve serious ambiguity.  
//    Uncomment statement 'LVS PROPERTY RESOLUTION MAXIMUM' in this deck  
//    to reset the capability of property resolution.  
//  
// 10) This deck does not extract MOS AS/AD property by default. To turn on the  
//    extraction of MOS AS/AD property, please uncomment the line  
//    "#DEFINE extract_as_ad". It would cause SEED PROMOTION, and pose  
//    much overhead on layout netlist extraction, erc checks, and lvs comparison.  
//  
// 11) Thin oxide layers PDIFF (7;0) and NDIFF (8;0) are not recommended to be  
//    used as tape out layers. Please use OD (6:0) for thin oxide tape out layers.  
//    If PDIFF (7;0) and NDIFF (8;0) layers are used, be sure to check MT (tape out)  
//    form for correctness after modifying this LVS deck (to pass LVS check)  
//  
// 12) This lvs command file does not support four resistors "rrwod,rrwsti,rdnwod,rdnwsti".  
//    Spice model defines them just for providing the sheet resistance of RWELL  
//    and DNW, not for the purpose of forming devices. We can not guarantee the resistance  
//    value if these four devices are applied in customer's design.  
//  
// 13) By default, the two diodes, PWDNW and DNWPSUB, are not extracted in this command   
//     file.  Please turn on the switch, "#DEFINE extract_dnwdio",  
//     to apply the extraction of these two diode. 
// 
// 14) Turn on "FILTER_DGS_TIED_MOS" switch to filter drain, gate and source tied MOS devices. 
//     Turn off it to filter all pins tied MOS devices. (Recommend to turn off)   
//   
// 15) Please set "TSMC_CAL_DFM_PATH" path in your environment. 
//     For example, if your DFM directory located on /net/user/tsmc/DFM,  
//     please set "TSMC_CAL_DFM_PATH" path like 
// 
//     %setenv TSMC_CAL_DFM_PATH /net/user/tsmc/DFM 
// 
//lvs_gen.pl version: 1.365
//calibre.pl version: 1.510

// LVS/RC_DFM switch option
// --------------------
//#define DFM_RULE    //uncomment this line when this deck would like to include DFM rules
#define RC_DECK    //uncomment this line when this deck would be used as a RC command file
//#define ZERO_NRS_NRD    //uncomment this line when this deck would set NRS=0 and NRD=0 
//#define SKIP_PSE   //uncomment this line to skip poly_space_effect
//#define SKIP_ODSE  //uncomment this line to skip od_space_effect
//#define extract_compact_model // If there is no MAC layer(208,1), MOS devices use compact model
//#define FILTER_DGS_TIED_MOS // uncomment this line to filter MOS with D, G and S tied together (default filter MOS with all pins tied)
#define WELL_TO_PG_CHECK 
// Default is on. Turn on to highlight if nwell connects to ground or psub connects to power.
//#define GATE_TO_PG_CHECK 
// Default is off. Turn on to highlight if a mos gate directly connects to power or ground.
//#define PATH_CHECK 
// Default is off. Turn on to highlight if
//(1) nodes have a path to power but no path to ground
//(2) nodes have a path to ground but no path to power
//(3) nodes have no path to power or ground
//(4) nodes have no path to any label net
#define DS_TO_PG_CHECK 
// Default is on. Turn on to highlight if drain connects to power and source connects to ground.
#define FLOATING_WELL_CHECK 
// Default is on. Turn on to highlight if well does not connect to power or ground. 
//The nwell of moscaps and nwell-resistor are excluded.
//#define NATIVE_N40

#IFDEF NATIVE_N40
VARIABLE WPED 5.0
VARIABLE PRESCALE 1.0
#ELSE
VARIABLE WPED 5.556
VARIABLE PRESCALE 0.9
#ENDIF

//#define NW_RING	//uncomment this line to enable the NW ring to separate the node from BULK

// POWER and GROUND name string variable setting
VARIABLE POWER_NAME  "AHVDD"  "AHVDDB"  "AHVDDG"  "AHVDDR"  "AHVDDWELL"  "AVDD"  "AVDDB"  "AVDDBG"  "AVDDG"  "AVDDR"  "AVDWELL"  "DHVDD"  "DVDD"  "HVDDWELL"  "TACVDD"  "TAVD33"  "TAVD33PST"  "TAVDD"  "TAVDDPST"  "TVDD"  "VD33"  "VDD"  "VDD5V"  "VDDESD"  "VDDG"  "VDDM"  "VDDPST"  "VDDSA"  "VDWELL" 

VARIABLE GROUND_NAME  "AGND"  "AHVSS"  "AHVSSB"  "AHVSSG"  "AHVSSR"  "AHVSSUB"  "AVSS"  "AVSSB"  "AVSSBG"  "AVSSG"  "AVSSR"  "AVSSUB"  "DHVSS"  "DVSS"  "GND"  "HVSSUB"  "TACVSS"  "TAVSS"  "TAVSSPST"  "TVSS"  "VS33"  "VSS"  "VSSESD"  "VSSG"  "VSSM"  "VSSPST"  "VSSUB" 

//#########################################################################
//# ENVIRONMENT SETTING                              
//#########################################################################
// LVS option
// --------------------
//#define extract_as_ad
//

//  RC_BLOCKING SETTING
LAYOUT CELL LIST pcells "cfmom*" "cfmom_2t*" "cfmom_mx*" "cfmom_mx_4t*" "cfmom_rf*" "cfmom_wo*" "cfmom_wo_mx*" "cfmom_wo_rf*" "crtmom*" "crtmom_2t*" "crtmom_mx*" "crtmom_mx_4t*" "crtmom_rf*" "crtmom_wo*" "crtmom_wo_mx*" "crtmom_wo_rf*" "moscap_rf*" "moscap_rf25*" "moscap_rf25_nw*" "moscap_rf_nw*" "ndio_hia_rf*" "nmos_rf*" "nmos_rf_25*" "nmos_rf_25_6t*" "nmos_rf_25_nodnw*" "nmos_rf_25od33*" "nmos_rf_25od33_6t*" "nmos_rf_25od33_nodnw*" "nmos_rf_25ud18*" "nmos_rf_25ud18_6t*" "nmos_rf_25ud18_nodnw*" "nmos_rf_6t*" "nmos_rf_elvt*" "nmos_rf_elvt_6t*" "nmos_rf_elvt_nodnw*" "nmos_rf_hv25*" "nmos_rf_hvt*" "nmos_rf_hvt_6t*" "nmos_rf_hvt_nodnw*" "nmos_rf_lvt*" "nmos_rf_lvt_6t*" "nmos_rf_lvt_nodnw*" "nmos_rf_nodnw*" "pdio_hia_rf*" "pmos_rf*" "pmos_rf_25*" "pmos_rf_25_5t*" "pmos_rf_25_nw*" "pmos_rf_25_nw_5t*" "pmos_rf_25od33*" "pmos_rf_25od33_5t*" "pmos_rf_25od33_nw*" "pmos_rf_25od33_nw_5t*" "pmos_rf_25ud18*" "pmos_rf_25ud18_5t*" "pmos_rf_25ud18_nw*" "pmos_rf_25ud18_nw_5t*" "pmos_rf_5t*" "pmos_rf_elvt*" "pmos_rf_elvt_5t*" "pmos_rf_elvt_nw*" "pmos_rf_elvt_nw_5t*" "pmos_rf_hvt*" "pmos_rf_hvt_5t*" "pmos_rf_hvt_nw*" "pmos_rf_hvt_nw_5t*" "pmos_rf_lvt*" "pmos_rf_lvt_5t*" "pmos_rf_lvt_nw*" "pmos_rf_lvt_nw_5t*" "pmos_rf_nw*" "pmos_rf_nw_5t*" "pmoscap_rf*" "pmoscap_rf25*" "rnpolywo_rf*" "rppoly_rf*" "rppoly_rf*" "rppolywo_rf*" "spiral_std_m2za_za*" "spiral_std_mu_a*" "spiral_std_mu_x*" "spiral_std_mu_z*" "spiral_std_mz_a*" "spiral_std_mza_a*" "spiral_sym_ct_m2za_z_a*" "spiral_sym_ct_mu_a_a*" "spiral_sym_ct_mu_a_x*" "spiral_sym_ct_mu_x_a*" "spiral_sym_ct_mu_z_a*" "spiral_sym_ct_mu_z_x*" "spiral_sym_ct_mz_a_x*" "spiral_sym_ct_mz_ax_a*" "spiral_sym_ct_mza_a_x*" "spiral_sym_m2za_z*" "spiral_sym_mu_a*" "spiral_sym_mu_x*" "spiral_sym_mu_z*" "spiral_sym_mz_a*" "spiral_sym_mz_ax*" "spiral_sym_mza_a*" "xjvar*" "xjvar_nw*" 
LAYOUT PRESERVE CELL LIST pcells


//#define STD_LIB_9_TRACK 	// uncomment this line to estimate 9 track WPE on STD cell, do not uncomment STD_LIB_11_TRACK at the same time.
//#define STD_LIB_11_TRACK	// uncomment this line to estimate 11 track WPE on STD cell, do not uncomment STD_LIB_9_TRACK at the same time.
//#define SKIP_ODR		// uncomment this line to skip DFM od rounding effect( only valid when turn on DFM_RULE )
//#define SKIP_POR		// uncomment this line to skip DFM po rounding effect( only valid when turn on DFM_RULE )
//#define SKIP_COP		// uncomment this line to skip DFM co placement effect( only valid when turn on DFM_RULE )
//#define RES_WO_RH		// uncomment this line to ignore RH checking for silicided PO resistors and OD resistors.
#define FLICKER_CORNER_EXTRACTION   // uncomment this line to enable flicker corner extraction. 

#IFDEF FLICKER_CORNER_EXTRACTION
   #define MULTI_DEVICE_EXTRACTION    // avoid forgetting to turn on MULTI_DEVICE_EXTRACTION when user want to extract relative parameter. 
#ENDIF    

// n-well approximity parameter     
#IFDEF STD_LIB_9_TRACK       
VARIABLE	PMOS_TOP_EXT 	0.51*1e-6
VARIABLE	PMOS_BOT_EXT 	0
VARIABLE	NMOS_TOP_EXT 	0
VARIABLE	NMOS_BOT_EXT 	0.46*1e-6
VARIABLE	MOS_LR_EXT 	5.0*1e-6
#ELSE
#IFDEF STD_LIB_11_TRACK
VARIABLE	PMOS_TOP_EXT    0.67*1e-6	
VARIABLE	PMOS_BOT_EXT 	0
VARIABLE	NMOS_TOP_EXT 	0
VARIABLE	NMOS_BOT_EXT    0.50*1e-6	
VARIABLE	MOS_LR_EXT 	5.0*1e-6
#ELSE
VARIABLE	PMOS_TOP_EXT 	0
VARIABLE	PMOS_BOT_EXT 	0
VARIABLE	NMOS_TOP_EXT 	0
VARIABLE	NMOS_BOT_EXT 	0
VARIABLE	MOS_LR_EXT 	0
#ENDIF
#ENDIF
//LVS HEAP DIRECTORY "/tmp"
//#define extract_dnwdio   // Turn on to extract parasitic dnw diode
//#define extract_pnwdio   // Turn on to extract parasitic nw-psub diode
// LVS Error tolerance
VARIABLE  MOS_Werr  	0
VARIABLE  MOS_Lerr  	0
VARIABLE  DIO_Aerr  	0
VARIABLE  DIO_Werr  	0
VARIABLE  DIO_Lerr  	0
VARIABLE  DIOWELL_Aerr 	0
VARIABLE  BJT_Aerr  	0
VARIABLE  RES_Werr  	0
VARIABLE  RES_Lerr  	0
VARIABLE  VAR_Werr  	0
VARIABLE  VAR_Lerr  	0
VARIABLE  PROBE_Aerr    0
VARIABLE  PROBE_Perr    0
VARIABLE  RFMOS_Werr  	0
VARIABLE  RFMOS_Lerr  	0
VARIABLE  MOSCAP_Werr  	0
VARIABLE  MOSCAP_Lerr  	0
VARIABLE  SPIRAL_Werr  	0
VARIABLE  SPIRAL_Serr  	0
VARIABLE  MOM_Lerr  	0
VARIABLE  MOM_Werr  	0
VARIABLE  MOM_Serr  	0
VARIABLE  MIN_MOM_LR    1

//It's recommended to turn on the "FLATTEN CELL" option when dummy patterns are insered.
//======================================================================================
//FLATTEN CELL TOP_CELL_DM TOP_CELL_DODDPO  // fill in topcell name of dummy patterns.   
    
LAYOUT PRIMARY "lvs_top"
LAYOUT PATH "lvs_top.gds"
LAYOUT SYSTEM GDSII
//LAYOUT PATH "layout.net"
//LAYOUT SYSTEM SPICE

SOURCE PRIMARY "lvs_top"
SOURCE PATH "lvs_top.cdl"
SOURCE SYSTEM SPICE

DRC RESULTS DATABASE "calibre_drc.db" ASCII // ASCII or GDSII
DRC SUMMARY REPORT "calibre_drc.sum"

ERC RESULTS DATABASE "calibre_erc.db" ASCII // ASCII or GDSII
ERC SUMMARY REPORT "calibre_erc.sum"

LVS REPORT "lvs.rep"
LVS REPORT MAXIMUM 1000 // ALL
MASK RESULTS DATABASE NONE //"mask.db"

#IFDEF RC_DECK
  //MASK SVDB DIRECTORY "svdb" QUERY
#ELSE
  MASK SVDB DIRECTORY "svdb" QUERY
#ENDIF
LVS ISOLATE SHORTS YES
LVS REPORT OPTION S
//LAYOUT CASE YES			    // uncomment this line for layout case-sensitive
//SOURCE CASE YES			    // uncomment this line for source case-sensitive
//LVS COMPARE CASE NAMES TYPES		    // set case sensititive during LVS comparison    

PRECISION 1000
RESOLUTION 1
UNIT LENGTH U

TEXT DEPTH PRIMARY
PORT DEPTH PRIMARY

FLAG SKEW YES
FLAG OFFGRID YES
//LAYOUT ALLOW DUPLICATE CELL YES

LVS SPICE PREFER PINS	         YES
LVS ABORT ON SUPPLY ERROR        NO
LVS ALL CAPACITOR PINS SWAPPABLE YES
LVS RECOGNIZE GATES              NONE
LVS IGNORE PORTS                 NO
LVS CHECK PORT NAMES             YES
LVS REDUCE PARALLEL BIPOLAR      YES
LVS REDUCE PARALLEL MOS          YES
LVS REDUCE PARALLEL DIODES       YES
LVS REDUCE PARALLEL CAPACITORS   YES
LVS REDUCE SERIES RESISTORS      YES      //Smashes series resistors
LVS REDUCE PARALLEL RESISTORS    YES
LVS REDUCE SERIES CAPACITORS     YES      //Smashes series capacitors
LVS REDUCE SPLIT GATES           NO       //Smashes MOS split-gates.
//LVS FILTER UNUSED OPTION B D E O
//Strongly recommand to comment FILTER_DGS_TIED_MOS switch
//AG is to filter MOS with all pins tied together, AB is to filter MOS with D,G,S tied together
#IFNDEF FILTER_DGS_TIED_MOS
LVS FILTER UNUSED OPTION AG RC RE RG
#ELSE
LVS FILTER UNUSED OPTION AB RC RE RG
#ENDIF
LVS PROPERTY RESOLUTION MAXIMUM 65536 // ALL
LVS INJECT LOGIC NO
//User Define Device Reduce
//====================================================================




LVS REDUCE nmoscap PARALLEL YES
[ TOLERANCE lr 0 
  EFFECTIVE wr, lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE nmoscap_18 PARALLEL YES
[ TOLERANCE lr 0 
  EFFECTIVE wr, lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE nmoscap_25 PARALLEL YES
[ TOLERANCE lr 0 
  EFFECTIVE wr, lr
  lr = sum(lr)/count()
  wr = sum(wr)
]









LVS REDUCE rpodwo_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpodwo_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnodwo PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnodwo SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnodwo_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnodwo_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnpolyl_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnpolyl_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rpodl PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpodl SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rpodl_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpodl_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnodl PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnodl SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnodl_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnodl_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnpolys_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnpolys_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rpods PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpods SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rpods_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpods_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnods PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnods SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnods_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnods_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnpolywo_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnpolywo_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rppolywo PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rppolywo SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnpolywo PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnpolywo SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rppolywo_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rppolywo_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rpodwo PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpodwo SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rppolyl PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rppolyl SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnpolyl PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnpolyl SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rppolyl_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rppolyl_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rppolys PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rppolys SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnpolys PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnpolys SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rppolys_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rppolys_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]


LVS REDUCE rppolywo_serp_m PARALLEL NO
LVS REDUCE rppolywo_serp_m SERIES PLUS MINUS NO


LVS REDUCE rm1w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm1w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rm2w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm2w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rm3w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm3w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rm4w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm4w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rm5w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm5w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rm6w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm6w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rm11 PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm11 SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]


LVS REDUCE rnwod PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnwod SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnwod_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnwod_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rnwsti PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnwsti SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]

LVS REDUCE rnwsti_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnwsti_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]


//================================================================
//LAYOUT BASE LAYER ODI POI NW DNW NP PP 
LAYOUT BASE LAYER ODI POI NP PP CO MOMDMY0 MOMDMY100 INDDMY

VIRTUAL CONNECT COLON YES

#IFDEF MULTI_DEVICE_EXTRACTION
LVS PUSH DEVICES SEPARATE PROPERTIES YES
LVS CENTER DEVICE PINS YES
#ENDIF
LVS POWER NAME POWER_NAME 
LVS GROUND NAME GROUND_NAME 
//#############################################
//# MAPPING                                   #
//#############################################
LAYER MACi           300 
LAYER MAP 208 DATATYPE 1 300 //  This layer is used to identify the mismatch devices for LVS.
LAYER DNWi            1  //  Deep N-Well
LAYER NW              3  //  N-Well
LAYER ODI             6  7  8  //  Active area, thin oxide for device, or interconnection.
LAYER DOD            301 
LAYER MAP 6 DATATYPE 1 301 //  Dummy OD layer for dummy pattern.
LAYER DRAIN          302 
LAYER MAP 6 DATATYPE 3 302 //  LVS dummy layer for mixed-mode process to recognize RF MOS drain region.
LAYER SR_DOD         303 
LAYER MAP 6 DATATYPE 7 303 //  For dummy patterns.
LAYER NT_N            11  //   Native NMOS blocked implant
LAYER VTZ_N          304 
LAYER MAP 11 DATATYPE 200 304 //   Native NMOS blocked implant for core zero Vt transistor
LAYER VTL_N          305 
LAYER MAP 12 DATATYPE 0 305 //  Low Vt NMOS implant.
LAYER VTL_N_18       306 
LAYER MAP 79 DATATYPE 1 306 //  I/O 1.8V LVT Device.
LAYER VTL_N25        307 
LAYER MAP 12 DATATYPE 2 307 //  I/O 2.5V LVT NMOS Device.
LAYER VTL_P          308 
LAYER MAP 13 DATATYPE 0 308 //  Low Vt PMOS implant.
LAYER VTL_P25        309 
LAYER MAP 13 DATATYPE 2 309 //  I/O 2.5V LVT PMOS Device.
LAYER OD_12          310 
LAYER MAP 14 DATATYPE 1 310 //  1.2V core device
LAYER OD33            15  //  Thick Oxide (dual gate oxide) for 3.3V device
LAYER OD18           311 
LAYER MAP 16 DATATYPE 0 311 //  FOR 1.8V device 
LAYER OD18_15        312 
LAYER MAP 16 DATATYPE 4 312 //  FOR 1.8V under_drive 1.5V
LAYER POI             17  //  Gate poly, poly Si
LAYER TPO            313 
LAYER MAP 17 DATATYPE 11 313 //  Dummy layer for SRAM process 
LAYER DPO            314 
LAYER MAP 17 DATATYPE 1 314 //  Dummy PO
LAYER SR_DPO         315 
LAYER MAP 17 DATATYPE 7 315 //  Only can be used for dummy patterns.
LAYER ILVT           316 
LAYER MAP 17 DATATYPE 51 316 //  for LP process ilvt devices
LAYER OD25           317 
LAYER MAP 18 DATATYPE 0 317 //  Thick Oxide (dual gate oxide) for 2.5V device
LAYER OD25_33        318 
LAYER MAP 18 DATATYPE 3 318 //  2.5V device over_drive 3.3V
LAYER OD25_18        319 
LAYER MAP 18 DATATYPE 4 319 //  2.5V device under_drive 1.8V
LAYER crown           102  //  crown capacitor for embDRAM process.
LAYER p3              103  //  Top plate of capacitor for embDRAM process.
LAYER OD1T            27  //  1T RAM memory array thick oxide layer for 1TRAM process.
LAYER CAP1TDMY        78  //  DRC dummy layer for cell array rule checking, for Emb1TRAM process.
LAYER blc             101  //  DRAM cell storage node contact for embDRAM process.
LAYER CLDD           320 
LAYER MAP 92 DATATYPE 0 320 //  1TRAM cell array region.
LAYER EDRAM_DECAP    321 
LAYER MAP 92 DATATYPE 1 321 //  Layer for drawing decoupling capacitor in EDRAM process.
LAYER PP              25  //  P+ S/D Implant
LAYER NP              26  //  N+ S/D Implant
LAYER RPO             29  //  Non silicided area definition
LAYER CO              30  //  Contact Window
LAYER M1i             31  //  M1
LAYER DUM1           322 
LAYER MAP 31 DATATYPE 1 322 //  Dummy Metal-1
LAYER M1i_mark_layer 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 
LAYER MAP 31 DATATYPE >=123 <=129 323
LAYER MAP 31 DATATYPE >=150 <=160 324
LAYER MAP 31 DATATYPE >=166 <=169 325
LAYER MAP 31 DATATYPE >=180 <=189 326
LAYER MAP 31 DATATYPE 191 327
LAYER MAP 31 DATATYPE 200 328
LAYER MAP 31 DATATYPE 201 329
LAYER MAP 31 DATATYPE 202 330
LAYER MAP 31 DATATYPE 203 331
LAYER MAP 31 DATATYPE 204 332
LAYER MAP 31 DATATYPE 205 333
LAYER MAP 31 DATATYPE 206 334
LAYER MAP 31 DATATYPE 207 335
LAYER MAP 31 DATATYPE 208 336
LAYER MAP 31 DATATYPE 209 337
LAYER MAP 31 DATATYPE 210 338
LAYER MAP 31 DATATYPE 211 339
LAYER MAP 31 DATATYPE 212 340
LAYER MAP 31 DATATYPE 213 341
LAYER MAP 31 DATATYPE 214 342
LAYER MAP 31 DATATYPE 215 343
LAYER MAP 31 DATATYPE 216 344
LAYER MAP 31 DATATYPE 217 345
LAYER MAP 31 DATATYPE 218 346
LAYER MAP 31 DATATYPE 219 347
LAYER MAP 31 DATATYPE 220 348
LAYER MAP 31 DATATYPE 221 349
LAYER MAP 31 DATATYPE 222 350
LAYER MAP 31 DATATYPE 223 351
LAYER MAP 31 DATATYPE 225 352
LAYER MAP 31 DATATYPE 226 353
LAYER MAP 31 DATATYPE 227 354
LAYER MAP 31 DATATYPE 228 355
LAYER MAP 31 DATATYPE 229 356
LAYER MAP 31 DATATYPE 235 357
LAYER MAP 31 DATATYPE 236 358
LAYER MAP 31 DATATYPE 237 359
LAYER MAP 31 DATATYPE 238 360
LAYER MAP 31 DATATYPE 239 361
LAYER MAP 31 DATATYPE 241 362
LAYER MAP 31 DATATYPE 242 363
LAYER MAP 31 DATATYPE 243 364
LAYER MAP 31 DATATYPE 244 365
LAYER MAP 31 DATATYPE 245 366
LAYER MAP 31 DATATYPE 246 367
LAYER MAP 31 DATATYPE 247 368 // 
LAYER M2i             32  //  M2
LAYER DUM2           369 
LAYER MAP 32 DATATYPE 1 369 //  Dummy Metal-2
LAYER M2i_mark_layer 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 
LAYER MAP 32 DATATYPE >=123 <=129 370
LAYER MAP 32 DATATYPE >=150 <=160 371
LAYER MAP 32 DATATYPE >=166 <=169 372
LAYER MAP 32 DATATYPE >=180 <=189 373
LAYER MAP 32 DATATYPE 191 374
LAYER MAP 32 DATATYPE 200 375
LAYER MAP 32 DATATYPE 201 376
LAYER MAP 32 DATATYPE 202 377
LAYER MAP 32 DATATYPE 203 378
LAYER MAP 32 DATATYPE 204 379
LAYER MAP 32 DATATYPE 205 380
LAYER MAP 32 DATATYPE 206 381
LAYER MAP 32 DATATYPE 207 382
LAYER MAP 32 DATATYPE 208 383
LAYER MAP 32 DATATYPE 209 384
LAYER MAP 32 DATATYPE 210 385
LAYER MAP 32 DATATYPE 211 386
LAYER MAP 32 DATATYPE 212 387
LAYER MAP 32 DATATYPE 213 388
LAYER MAP 32 DATATYPE 214 389
LAYER MAP 32 DATATYPE 215 390
LAYER MAP 32 DATATYPE 216 391
LAYER MAP 32 DATATYPE 217 392
LAYER MAP 32 DATATYPE 218 393
LAYER MAP 32 DATATYPE 219 394
LAYER MAP 32 DATATYPE 220 395
LAYER MAP 32 DATATYPE 221 396
LAYER MAP 32 DATATYPE 222 397
LAYER MAP 32 DATATYPE 223 398
LAYER MAP 32 DATATYPE 225 399
LAYER MAP 32 DATATYPE 226 400
LAYER MAP 32 DATATYPE 227 401
LAYER MAP 32 DATATYPE 228 402
LAYER MAP 32 DATATYPE 229 403
LAYER MAP 32 DATATYPE 235 404
LAYER MAP 32 DATATYPE 236 405
LAYER MAP 32 DATATYPE 237 406
LAYER MAP 32 DATATYPE 238 407
LAYER MAP 32 DATATYPE 239 408
LAYER MAP 32 DATATYPE 241 409
LAYER MAP 32 DATATYPE 242 410
LAYER MAP 32 DATATYPE 243 411
LAYER MAP 32 DATATYPE 244 412
LAYER MAP 32 DATATYPE 245 413
LAYER MAP 32 DATATYPE 246 414
LAYER MAP 32 DATATYPE 247 415 // 
LAYER M3i             33  //  M3
LAYER DUM3           416 417 418 419 420 
LAYER MAP 33 DATATYPE 1 416
LAYER MAP 33 DATATYPE 21 417
LAYER MAP 33 DATATYPE 41 418
LAYER MAP 33 DATATYPE 61 419
LAYER MAP 33 DATATYPE 81 420 //  Dummy Metal-3
LAYER M3i_mark_layer 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 
LAYER MAP 33 DATATYPE >=123 <=129 421
LAYER MAP 33 DATATYPE >=150 <=160 422
LAYER MAP 33 DATATYPE >=166 <=169 423
LAYER MAP 33 DATATYPE >=180 <=189 424
LAYER MAP 33 DATATYPE 191 425
LAYER MAP 33 DATATYPE 200 426
LAYER MAP 33 DATATYPE 201 427
LAYER MAP 33 DATATYPE 202 428
LAYER MAP 33 DATATYPE 203 429
LAYER MAP 33 DATATYPE 204 430
LAYER MAP 33 DATATYPE 205 431
LAYER MAP 33 DATATYPE 206 432
LAYER MAP 33 DATATYPE 207 433
LAYER MAP 33 DATATYPE 208 434
LAYER MAP 33 DATATYPE 209 435
LAYER MAP 33 DATATYPE 210 436
LAYER MAP 33 DATATYPE 211 437
LAYER MAP 33 DATATYPE 212 438
LAYER MAP 33 DATATYPE 213 439
LAYER MAP 33 DATATYPE 214 440
LAYER MAP 33 DATATYPE 215 441
LAYER MAP 33 DATATYPE 216 442
LAYER MAP 33 DATATYPE 217 443
LAYER MAP 33 DATATYPE 218 444
LAYER MAP 33 DATATYPE 219 445
LAYER MAP 33 DATATYPE 220 446
LAYER MAP 33 DATATYPE 221 447
LAYER MAP 33 DATATYPE 222 448
LAYER MAP 33 DATATYPE 223 449
LAYER MAP 33 DATATYPE 225 450
LAYER MAP 33 DATATYPE 226 451
LAYER MAP 33 DATATYPE 227 452
LAYER MAP 33 DATATYPE 228 453
LAYER MAP 33 DATATYPE 229 454
LAYER MAP 33 DATATYPE 235 455
LAYER MAP 33 DATATYPE 236 456
LAYER MAP 33 DATATYPE 237 457
LAYER MAP 33 DATATYPE 238 458
LAYER MAP 33 DATATYPE 239 459
LAYER MAP 33 DATATYPE 241 460
LAYER MAP 33 DATATYPE 242 461
LAYER MAP 33 DATATYPE 243 462
LAYER MAP 33 DATATYPE 244 463
LAYER MAP 33 DATATYPE 245 464
LAYER MAP 33 DATATYPE 246 465
LAYER MAP 33 DATATYPE 247 466 // 
LAYER M4i             34  //  M4
LAYER DUM4           467 468 469 470 471 
LAYER MAP 34 DATATYPE 1 467
LAYER MAP 34 DATATYPE 21 468
LAYER MAP 34 DATATYPE 41 469
LAYER MAP 34 DATATYPE 61 470
LAYER MAP 34 DATATYPE 81 471 //  Dummy Metal-#
LAYER M4i_mark_layer 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 
LAYER MAP 34 DATATYPE >=123 <=129 472
LAYER MAP 34 DATATYPE >=150 <=160 473
LAYER MAP 34 DATATYPE >=166 <=169 474
LAYER MAP 34 DATATYPE >=180 <=189 475
LAYER MAP 34 DATATYPE 191 476
LAYER MAP 34 DATATYPE 200 477
LAYER MAP 34 DATATYPE 201 478
LAYER MAP 34 DATATYPE 202 479
LAYER MAP 34 DATATYPE 203 480
LAYER MAP 34 DATATYPE 204 481
LAYER MAP 34 DATATYPE 205 482
LAYER MAP 34 DATATYPE 206 483
LAYER MAP 34 DATATYPE 207 484
LAYER MAP 34 DATATYPE 208 485
LAYER MAP 34 DATATYPE 209 486
LAYER MAP 34 DATATYPE 210 487
LAYER MAP 34 DATATYPE 211 488
LAYER MAP 34 DATATYPE 212 489
LAYER MAP 34 DATATYPE 213 490
LAYER MAP 34 DATATYPE 214 491
LAYER MAP 34 DATATYPE 215 492
LAYER MAP 34 DATATYPE 216 493
LAYER MAP 34 DATATYPE 217 494
LAYER MAP 34 DATATYPE 218 495
LAYER MAP 34 DATATYPE 219 496
LAYER MAP 34 DATATYPE 220 497
LAYER MAP 34 DATATYPE 221 498
LAYER MAP 34 DATATYPE 222 499
LAYER MAP 34 DATATYPE 223 500
LAYER MAP 34 DATATYPE 225 501
LAYER MAP 34 DATATYPE 226 502
LAYER MAP 34 DATATYPE 227 503
LAYER MAP 34 DATATYPE 228 504
LAYER MAP 34 DATATYPE 229 505
LAYER MAP 34 DATATYPE 235 506
LAYER MAP 34 DATATYPE 236 507
LAYER MAP 34 DATATYPE 237 508
LAYER MAP 34 DATATYPE 238 509
LAYER MAP 34 DATATYPE 239 510
LAYER MAP 34 DATATYPE 241 511
LAYER MAP 34 DATATYPE 242 512
LAYER MAP 34 DATATYPE 243 513
LAYER MAP 34 DATATYPE 244 514
LAYER MAP 34 DATATYPE 245 515
LAYER MAP 34 DATATYPE 246 516
LAYER MAP 34 DATATYPE 247 517 // 
LAYER M5i             35  //  Metal-5
LAYER DUM5           518 519 520 521 522 
LAYER MAP 35 DATATYPE 1 518
LAYER MAP 35 DATATYPE 21 519
LAYER MAP 35 DATATYPE 41 520
LAYER MAP 35 DATATYPE 61 521
LAYER MAP 35 DATATYPE 81 522 //  Dummy Metal-5
LAYER M5i_mark_layer 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 
LAYER MAP 35 DATATYPE >=123 <=129 523
LAYER MAP 35 DATATYPE >=150 <=160 524
LAYER MAP 35 DATATYPE >=166 <=169 525
LAYER MAP 35 DATATYPE >=180 <=189 526
LAYER MAP 35 DATATYPE 191 527
LAYER MAP 35 DATATYPE 200 528
LAYER MAP 35 DATATYPE 201 529
LAYER MAP 35 DATATYPE 202 530
LAYER MAP 35 DATATYPE 203 531
LAYER MAP 35 DATATYPE 204 532
LAYER MAP 35 DATATYPE 205 533
LAYER MAP 35 DATATYPE 206 534
LAYER MAP 35 DATATYPE 207 535
LAYER MAP 35 DATATYPE 208 536
LAYER MAP 35 DATATYPE 209 537
LAYER MAP 35 DATATYPE 210 538
LAYER MAP 35 DATATYPE 211 539
LAYER MAP 35 DATATYPE 212 540
LAYER MAP 35 DATATYPE 213 541
LAYER MAP 35 DATATYPE 214 542
LAYER MAP 35 DATATYPE 215 543
LAYER MAP 35 DATATYPE 216 544
LAYER MAP 35 DATATYPE 217 545
LAYER MAP 35 DATATYPE 218 546
LAYER MAP 35 DATATYPE 219 547
LAYER MAP 35 DATATYPE 220 548
LAYER MAP 35 DATATYPE 221 549
LAYER MAP 35 DATATYPE 222 550
LAYER MAP 35 DATATYPE 223 551
LAYER MAP 35 DATATYPE 225 552
LAYER MAP 35 DATATYPE 226 553
LAYER MAP 35 DATATYPE 227 554
LAYER MAP 35 DATATYPE 228 555
LAYER MAP 35 DATATYPE 229 556
LAYER MAP 35 DATATYPE 235 557
LAYER MAP 35 DATATYPE 236 558
LAYER MAP 35 DATATYPE 237 559
LAYER MAP 35 DATATYPE 238 560
LAYER MAP 35 DATATYPE 239 561
LAYER MAP 35 DATATYPE 241 562
LAYER MAP 35 DATATYPE 242 563
LAYER MAP 35 DATATYPE 243 564
LAYER MAP 35 DATATYPE 244 565
LAYER MAP 35 DATATYPE 245 566
LAYER MAP 35 DATATYPE 247 567 // 
LAYER M6i             36  //  Metal-6
LAYER DUM6           568 569 570 571 572 
LAYER MAP 36 DATATYPE 1 568
LAYER MAP 36 DATATYPE 21 569
LAYER MAP 36 DATATYPE 41 570
LAYER MAP 36 DATATYPE 61 571
LAYER MAP 36 DATATYPE 81 572 //  Dummy Metal-6
LAYER M6i_mark_layer 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 
LAYER MAP 36 DATATYPE >=123 <=129 573
LAYER MAP 36 DATATYPE >=150 <=160 574
LAYER MAP 36 DATATYPE >=166 <=169 575
LAYER MAP 36 DATATYPE >=180 <=189 576
LAYER MAP 36 DATATYPE 191 577
LAYER MAP 36 DATATYPE 200 578
LAYER MAP 36 DATATYPE 201 579
LAYER MAP 36 DATATYPE 202 580
LAYER MAP 36 DATATYPE 203 581
LAYER MAP 36 DATATYPE 204 582
LAYER MAP 36 DATATYPE 205 583
LAYER MAP 36 DATATYPE 206 584
LAYER MAP 36 DATATYPE 207 585
LAYER MAP 36 DATATYPE 208 586
LAYER MAP 36 DATATYPE 209 587
LAYER MAP 36 DATATYPE 210 588
LAYER MAP 36 DATATYPE 211 589
LAYER MAP 36 DATATYPE 212 590
LAYER MAP 36 DATATYPE 213 591
LAYER MAP 36 DATATYPE 214 592
LAYER MAP 36 DATATYPE 215 593
LAYER MAP 36 DATATYPE 216 594
LAYER MAP 36 DATATYPE 217 595
LAYER MAP 36 DATATYPE 218 596
LAYER MAP 36 DATATYPE 219 597
LAYER MAP 36 DATATYPE 220 598
LAYER MAP 36 DATATYPE 221 599
LAYER MAP 36 DATATYPE 222 600
LAYER MAP 36 DATATYPE 223 601
LAYER MAP 36 DATATYPE 225 602
LAYER MAP 36 DATATYPE 226 603
LAYER MAP 36 DATATYPE 227 604
LAYER MAP 36 DATATYPE 228 605
LAYER MAP 36 DATATYPE 229 606
LAYER MAP 36 DATATYPE 235 607
LAYER MAP 36 DATATYPE 236 608
LAYER MAP 36 DATATYPE 237 609
LAYER MAP 36 DATATYPE 238 610
LAYER MAP 36 DATATYPE 239 611
LAYER MAP 36 DATATYPE 241 612
LAYER MAP 36 DATATYPE 242 613
LAYER MAP 36 DATATYPE 243 614
LAYER MAP 36 DATATYPE 244 615
LAYER MAP 36 DATATYPE 245 616
LAYER MAP 36 DATATYPE 247 617 // 
LAYER HRI            618 
LAYER MAP 70 DATATYPE 0 618 //  layer to form HRI poly resistor
LAYER RHRI           619 
LAYER MAP 120 DATATYPE 0 619 //  New RHRI implant for HRI resistor
LAYER SRMD0          620 
LAYER MAP 50 DATATYPE 0 620 //  Use "SRM" to cover SRAM cell array to generate VTC_N, VTC_P mask.
LAYER SRMD1          621 
LAYER MAP 50 DATATYPE 1 621 //  Define SRAM/logic N-mos VTC_N imp.
LAYER SRMD2          622 
LAYER MAP 50 DATATYPE 2 622 //  Define SRAM/logic P-mos VTC_P imp.
LAYER SRMD5          623 
LAYER MAP 50 DATATYPE 5 623 //  Identify read port in 2 port SRAM.
LAYER SRMD7          624 
LAYER MAP 50 DATATYPE 7 624 //  Indentify HS cell.
LAYER ROM            625 
LAYER MAP 50 DATATYPE 6 625 //  Identify NMOS rom device.
LAYER SRM_ULL        626 
LAYER MAP 50 DATATYPE 28 626 //  N40ULP SRAM identified CAD layer.
LAYER SRMLOP_DP      627 
LAYER MAP 80 DATATYPE 0 627 //  Identify DP SRAM.
LAYER SRMLOP_D2      628 
LAYER MAP 80 DATATYPE 12 628 //  Identify UHD SRAM.
LAYER SRMLOP_D3      629 
LAYER MAP 80 DATATYPE 13 629 //  Identify HC SRAM.
LAYER SRMLOP_D4      630 
LAYER MAP 80 DATATYPE 14 630 //  Identify HD SRAM.
LAYER SRMLOP_D5      631 
LAYER MAP 80 DATATYPE 15 631 //  Identify LV SRAM.
LAYER SRMLOP_D6      632 
LAYER MAP 80 DATATYPE 16 632 //  Identify HC_DP SRAM.
LAYER SRMLOP_D7      633 
LAYER MAP 80 DATATYPE 17 633 //  Identify 8T TP SRAM.
LAYER SRMLOP_D8      634 
LAYER MAP 80 DATATYPE 18 634 //  Identify 10T TP SRAM.
LAYER SRMLOP_LL      635 
LAYER MAP 80 DATATYPE 21 635 //  Identify N40G SRAM 242 LL bitcell
LAYER HVPWi          636 
LAYER MAP 154 DATATYPE 6 636 //  For Flash process layer for HVNMOS
LAYER SBDDMY         637 
LAYER MAP 113 DATATYPE 10 637 //  Layer for fully cover schottky barrier diode
LAYER LP_NTN         638 
LAYER MAP 154 DATATYPE 42 638 //  Define native device and device performance is aligned with N40LP.
LAYER OD6_11         639 
LAYER MAP 82 DATATYPE 68 639 //  Dummy layer for 6V thick oxide (2nd gate oxide) under-driven to 1.1V
LAYER OD6_33         640 
LAYER MAP 82 DATATYPE 66 640 //  Dummy layer for 6V thick oxide (2nd gate oxide) under-driven to 3.3V
LAYER MCEL_2T2C      641 
LAYER MAP 82 DATATYPE 82 641 //  A dummy Layer to define MTP_2T2C IP cell region for DRC/LVS check.
LAYER H18NWDMY       642 
LAYER MAP 82 DATATYPE 83 642 //  A dummy layer to block IOLDNMOS 18V NW area for 2T2C MTP IP DRC/LVS check.
LAYER MTP_2T2C       643 
LAYER MAP 82 DATATYPE 84 643 //  Layer to define MTP_2T2C IP region.
LAYER DPW_MTP        644 
LAYER MAP 82 DATATYPE 85 644 //  Deep PW Implant for 2T2C MTP.
LAYER VIA1i           51  //  Via12
LAYER VIA2i           52  //  Via23
LAYER VIA3i           53  //  Via34
LAYER VIA4i           54  //  Via45
LAYER VIA5i           55  //  Via56
LAYER IPi            645 
LAYER MAP 63 DATATYPE 45 645 //  Marking layer for N45LP IP layout which will be migrated for N40 chip layout.
LAYER VTH_N           67  //  CORE High VT DEVICE
LAYER VTH_P           68  //  CORE High VT DEVICE
LAYER VARi           646 
LAYER MAP 143 DATATYPE 0 646 //  layer to form Varactor
LAYER CI_CAP         647 
LAYER MAP 143 DATATYPE 20 647 //  Well implant for CI capacitance device.
LAYER RH              117  //  Used for mask logic operation.
LAYER ESDHV          648 649 650 
LAYER MAP 147 DATATYPE >=0 <=10 648
LAYER MAP 147 DATATYPE 13 649
LAYER MAP 147 DATATYPE >=15 <=255 650 //  Cover high voltage IO
LAYER ESDIMP         651 
LAYER MAP 189 DATATYPE 0 651 //  Cover ESD dio region
LAYER RV             652 
LAYER MAP 85 DATATYPE 0 652 //  FOR AL RDL using
LAYER WRV            653 
LAYER MAP 85 DATATYPE 2 653 //  special RV layer
LAYER CBD             169  //  FOR AL RDL using
LAYER CB              76  //  Passivation opening for Bond Pad   
LAYER CB2             86  //  Passivation-2 opening for Bond Pad	
LAYER CB2_mark_layer 654 655 656 
LAYER MAP 86 DATATYPE 100 654
LAYER MAP 86 DATATYPE 160 655
LAYER MAP 86 DATATYPE 41 656 //  exclude CB2 layer
LAYER API             74  //  AL RDL
LAYER APD            657 
LAYER MAP 74 DATATYPE 1 657 //  Dummy AL RDL
LAYER APi_mark_layer 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 
LAYER MAP 74 DATATYPE 100 658
LAYER MAP 74 DATATYPE 102 659
LAYER MAP 74 DATATYPE >=123 <=129 660
LAYER MAP 74 DATATYPE 13 661
LAYER MAP 74 DATATYPE 14 662
LAYER MAP 74 DATATYPE >=150 <=159 663
LAYER MAP 74 DATATYPE 16 664
LAYER MAP 74 DATATYPE 160 665
LAYER MAP 74 DATATYPE 161 666
LAYER MAP 74 DATATYPE >=165 <=169 667
LAYER MAP 74 DATATYPE >=180 <=189 668
LAYER MAP 74 DATATYPE 19 669
LAYER MAP 74 DATATYPE 191 670
LAYER MAP 74 DATATYPE 200 671
LAYER MAP 74 DATATYPE 211 672
LAYER MAP 74 DATATYPE >=220 <=223 673
LAYER MAP 74 DATATYPE >=225 <=229 674
LAYER MAP 74 DATATYPE >=235 <=239 675
LAYER MAP 74 DATATYPE >=241 <=245 676
LAYER MAP 74 DATATYPE 25 677
LAYER MAP 74 DATATYPE 29 678
LAYER MAP 74 DATATYPE 39 679 //  Dummy AL RDL
LAYER VTUL_N_EDM     680 
LAYER MAP 151 DATATYPE 0 680 //  CORE ULTRA LOW VT DEVICE(eDRAM)
LAYER VTUL_N         681 
LAYER MAP 151 DATATYPE 1 681 //  CORE ULTRA LOW VT DEVICE
LAYER VTUL_P_EDM     682 
LAYER MAP 152 DATATYPE 0 682 //  CORE ULTRA LOW VT DEVICE(eDRAM)
LAYER VTUL_P         683 
LAYER MAP 152 DATATYPE 1 683 //  CORE ULTRA LOW VT DEVICE
LAYER EHVT_N         684 
LAYER MAP 93 DATATYPE 1 684 //  Ultra low leakage NMOS
LAYER EHVT_P         685 
LAYER MAP 94 DATATYPE 1 685 //  Ultra low leakage PMOS
LAYER ELVT_N         686 
LAYER MAP 151 DATATYPE 2 686 //  Extreme low Vt NMOS
LAYER ELVT_P         687 
LAYER MAP 152 DATATYPE 2 687 //  Extreme low Vt PMOS
LAYER RODMY           49  //  dummy layer for LVS to exclude OD area
LAYER BJTDMYi        688 
LAYER MAP 110 DATATYPE 0 688 //  BJT dummy layer for LVS
LAYER BJT4TDMY       689 
LAYER MAP 110 DATATYPE 2 689 //  4T BJT dummy layer for LVS
LAYER BJT7TDMY       690 
LAYER MAP 110 DATATYPE 3 690 //  7T BJT dummy layer for LVS
LAYER BJTMDDMY       691 
LAYER MAP 110 DATATYPE 4 691 //  7T BJT dummy layer for multiple-BJT
LAYER BJTSNDMY       692 
LAYER MAP 110 DATATYPE 5 692 //  7T BJT dummy layer for separate node in multiple-BJT device
LAYER BJT7TDMY_19    693 
LAYER MAP 110 DATATYPE 6 693 //  7T BJT dummy layer for multiple -BJT device in 1X9 array
LAYER BJT7TDMY_33    694 
LAYER MAP 110 DATATYPE 7 694 //  7T BJT dummy layer for multiple -BJT device in 3X3 array
LAYER PSUB2           111  //  dummy layer for isolation power domains of PW
LAYER NWDMYi         695 
LAYER MAP 114 DATATYPE 0 695 //  dummy layer to form N-Well resistor
LAYER NWDMY1         696 
LAYER MAP 114 DATATYPE 1 696 //  dummy layer to form N-Well 3 terminals resistor
LAYER RPDMYai        697 
LAYER MAP 115 DATATYPE 0 697 //  dummy layer to form OD/POLY resistor (2-Terminals resistor)
LAYER RPDMYa1        698 
LAYER MAP 115 DATATYPE 1 698 //  dummy layer to form OD/POLY resistor (3-Terminals resistor)
LAYER SERPDMY        699 
LAYER MAP 115 DATATYPE 20 699 //  dummy layer to form Serpentine type Poly Resistor (3-Terminals resistor)
LAYER DIODMYi         119  //  dummy layer to form diode
LAYER DIO3TDMY       700 
LAYER MAP 119 DATATYPE 1 700 //  Dummy layer to define 3-terminal diodes
LAYER DIO4TDMY       701 
LAYER MAP 119 DATATYPE 2 701 //  Dummy layer to define 4-terminal diodes
LAYER SR_ESD         702 
LAYER MAP 121 DATATYPE 0 702 //  dummy layer for ESD MOS
LAYER SDI            703 
LAYER MAP 122 DATATYPE 0 703 //  Covered on ESD MOS diffusion
LAYER SDI_HV_EF      704 
LAYER MAP 122 DATATYPE 6 704 //  EFlash HV ESD dummy layer
LAYER SDI_MV_EF      705 
LAYER MAP 122 DATATYPE 7 705 //  EFlash MV ESD dummy layer
LAYER SDI_C_EF       706 
LAYER MAP 122 DATATYPE 8 706 //  EFlash dummy layer for ESD HV/MV collector region
LAYER MOMDMY0        707 
LAYER MAP 155 DATATYPE 0 707 //  dummy layer for MOM devices metal0
LAYER MOMDMY1        708 
LAYER MAP 155 DATATYPE 1 708 //  dummy layer for MOM devices metal1
LAYER MOMDMY2        709 
LAYER MAP 155 DATATYPE 2 709 //  dummy layer for MOM devices metal2
LAYER MOMDMY3        710 
LAYER MAP 155 DATATYPE 3 710 //  dummy layer for MOM devices metal3
LAYER MOMDMY4        711 
LAYER MAP 155 DATATYPE 4 711 //  dummy layer for MOM devices metal4
LAYER MOMDMY5        712 
LAYER MAP 155 DATATYPE 5 712 //  dummy layer for MOM devices metal5
LAYER MOMDMY21       713 
LAYER MAP 155 DATATYPE 21 713 //  dummy layer for dummy OD under MOM devices
LAYER MOMDMY22       714 
LAYER MAP 155 DATATYPE 22 714 //  dummy layer for crtmom_mx
LAYER MOMDMY23       715 
LAYER MAP 155 DATATYPE 23 715 //  dummy layer for crtmom_mx pin1 
LAYER MOMDMY24       716 
LAYER MAP 155 DATATYPE 24 716 //  dummy layer for crtmom_mx pin2
LAYER MOMDMY25       717 
LAYER MAP 155 DATATYPE 25 717 //  dummy layer for crtmom_mx plus1 & plus2 
LAYER MOMDMY_2T      718 
LAYER MAP 155 DATATYPE 27 718 //  dummy layer for crtmom_2t
LAYER MOMDMY28       719 
LAYER MAP 155 DATATYPE 28 719 //  dummy layer for shield=4 FMOM
LAYER MOMDMY31       720 
LAYER MAP 155 DATATYPE 31 720 //  dummy layer for crtmom wi NW shield
LAYER MOMDMY32       721 
LAYER MAP 155 DATATYPE 32 721 //  dummy layer for crtmom wi PW shield
LAYER MOMDMY33       722 
LAYER MAP 155 DATATYPE 33 722 //  dummy layer for crtmom wi NT_N shield
LAYER MOMDMY100      723 
LAYER MAP 155 DATATYPE 100 723 //  dummy layer for cfmom
LAYER RFDMY          724 
LAYER MAP 161 DATATYPE 0 724 //  For RF Device using only 
LAYER RFDMY5T        725 
LAYER MAP 161 DATATYPE 3 725 //  For RF_5T Device using only
LAYER RFDMY6T        726 
LAYER MAP 161 DATATYPE 4 726 //  For RF_6T Device using only
LAYER RFPADDMY       727 
LAYER MAP 161 DATATYPE 13 727 //  For lowcpad_rf
LAYER RFPADDMY1      728 
LAYER MAP 161 DATATYPE 14 728 //  For lowcpad_rf density
LAYER RFDMY67G       729 
LAYER MAP 161 DATATYPE 67 729 //  For 67GHz RF devices using only
LAYER HIA_DUMMY      730 
LAYER MAP 168 DATATYPE 0 730 //  For HIA ESD diode dummy layer.
LAYER RMDMY1         731 
LAYER MAP 116 DATATYPE 1 731 //  dummy layer to form METAL-1 resistor
LAYER RMDMY2         732 
LAYER MAP 116 DATATYPE 2 732 //  dummy layer to form METAL-2 resistor
LAYER RMDMY3         733 
LAYER MAP 116 DATATYPE 3 733 //  dummy layer to form METAL-3 resistor
LAYER RMDMY4         734 
LAYER MAP 116 DATATYPE 4 734 //  dummy layer to form METAL-4 resistor
LAYER RMDMY5         735 
LAYER MAP 116 DATATYPE 5 735 //  dummy layer to form METAL-5 resistor
LAYER RMDMY6         736 
LAYER MAP 116 DATATYPE 6 736 //  dummy layer to form METAL-6 resistor
LAYER RMDMYAP        737 
LAYER MAP 116 DATATYPE 16 737 //  dummy layer to form AP resistor
LAYER TLDMY          738 
LAYER MAP 116 DATATYPE 30 738 //  dummy layer to form TL
LAYER SRAMPSGT       739 
LAYER MAP 186 DATATYPE 1 739 //  FOR SRAM NMOS passgate
LAYER SRAMCVSS       740 
LAYER MAP 186 DATATYPE 3 740 //  FOR CVSS SRAM
LAYER INDDMY         741 
LAYER MAP 144 DATATYPE 0 741 //  For RF Inductor devices
LAYER IND_RAD        742 
LAYER MAP 144 DATATYPE 30 742 //  For RF Inductor devices radious
LAYER IND_GDIS       743 
LAYER MAP 144 DATATYPE 31 743 //  For RF Inductor devices guardring distance
LAYER IND_NR         744 
LAYER MAP 144 DATATYPE 32 744 //  For RF Inductor devices nr 
LAYER IND_MP         745 
LAYER MAP 144 DATATYPE 33 745 //  For RF Inductor devices mimus pin 
LAYER IND_D4         746 
LAYER MAP 144 DATATYPE 34 746 //  For RF Inductor devices CTAP pin 
LAYER IND_W          747 
LAYER MAP 144 DATATYPE 35 747 //  For RF Inductor devices width 
LAYER IND_S          748 
LAYER MAP 144 DATATYPE 36 748 //  For RF Inductor devices space 
LAYER IND_CTX        749 
LAYER MAP 144 DATATYPE 38 749 //  For RF Inductor devices ctx 
LAYER IND_CTW        750 
LAYER MAP 144 DATATYPE 39 750 //  For RF Inductor devices ctapw 
LAYER IND_PSW        751 
LAYER MAP 144 DATATYPE 40 751 //  For RF Inductor devices passw 
LAYER ctm             77  //  For MIM device
LAYER cbmi            88  //  For MIM device
LAYER CTMDMY         752 
LAYER MAP 148 DATATYPE 0 752 //  For MIM device
LAYER CAP1P5         753 
LAYER MAP 148 DATATYPE 115 753 //  For MIM device cap unit 1.5f
LAYER CAP2P0         754 
LAYER MAP 148 DATATYPE 120 754 //  For MIM device cap unit 2.0f
LAYER CAP1P0         755 
LAYER MAP 148 DATATYPE 110 755 //  For MIM device cap unit 1.0f
LAYER MIM_3TDMY      756 
LAYER MAP 148 DATATYPE 21 756 //  For MIM 3T device 
LAYER PROBEM1        757 
LAYER MAP 75 DATATYPE 1 757 //  M1 probe
LAYER PROBEM2        758 
LAYER MAP 75 DATATYPE 2 758 //  M2 probe
LAYER PROBEM3        759 
LAYER MAP 75 DATATYPE 3 759 //  M3 probe
LAYER PROBEM4        760 
LAYER MAP 75 DATATYPE 4 760 //  M4 probe
LAYER PROBEAP        761 
LAYER MAP 75 DATATYPE 16 761 //  AP probe
LAYER DCOi           762 
LAYER MAP 90 DATATYPE 0 762 //  For G devices
LAYER DCO_LPP        763 
LAYER MAP 90 DATATYPE 1 763 //  For LPP ULVT devices
LAYER POFUSE         764 
LAYER MAP 156 DATATYPE 0 764 //  poly fuse thin part recognization
LAYER FET_NILD       765 
LAYER MAP 183 DATATYPE 6 765 //  FET NILD 
LAYER FET_PILD       766 
LAYER MAP 183 DATATYPE 7 766 //  FET PILD
LAYER JNW            767 
LAYER MAP 183 DATATYPE 50 767 //  JFET N-well 
LAYER JDMY           768 
LAYER MAP 183 DATATYPE 51 768 //  Dummy layer for JFET  
LAYER HVJDMY         769 
LAYER MAP 183 DATATYPE 52 769 //  Dummy layer for HV JFET  
LAYER JFET_N4V_DRAIN 770 
LAYER MAP 183 DATATYPE 21 770 //  JFETDMY_1 dummy layer to recognize 1 4V NJFET
LAYER JFET_BLK_DNW   771 
LAYER MAP 183 DATATYPE 22 771 //  JFETDMY_2 dummy layer for 4V NJFET block DNW 
LAYER JFET_WL        772 
LAYER MAP 183 DATATYPE 24 772 //  JFETDMY_4 dummy layer for 4V NJFET to extract W&L
LAYER JFET_BLK_PSUB  773 
LAYER MAP 183 DATATYPE 25 773 //  JFETDMY_5 dummy layer for 4V PJFET  (eval by pchiangd, should be a new cad layer)
LAYER TCDDMY         774 
LAYER MAP 165 DATATYPE 1 774 //  Dummy layer to cover CPU pattern for TCD purpose  
LAYER ICOVL          775 
LAYER MAP 165 DATATYPE 3 775 //  Dummy layer In Chip OVL monitor pattern.
LAYER TCDDMY_H       776 
LAYER MAP 165 DATATYPE 4 776 //  Dummy layer for TCD purpose.
LAYER TCDDMY_V       777 
LAYER MAP 165 DATATYPE 5 777 //  Dummy layer for TCD purpose.
LAYER NWLVT          778 
LAYER MAP 129 DATATYPE 1 778 //  For Independent Low Power Plus LVT nwell
LAYER PWLVT          779 
LAYER MAP 130 DATATYPE 1 779 //  For Independent Low Power Plus LVT pwell
LAYER HVD_N          780 
LAYER MAP 91 DATATYPE 1 780 //  For HV LDD nmos
LAYER HVD_P          781 
LAYER MAP 91 DATATYPE 2 781 //  For HV LDD pmos
LAYER HVDDMY         782 
LAYER MAP 91 DATATYPE 8 782 //  LVS dummy layer for recognition of DEMOS devices.
LAYER DEHVD_N        783 
LAYER MAP 91 DATATYPE 9 783 //  Drain layer for RF DEMOS.
LAYER LVBJTDMYi      784 
LAYER MAP 208 DATATYPE 11 784 //  For LVBJT area	
LAYER EMIDMY         785 
LAYER MAP 208 DATATYPE 12 785 //  For LVBJT emitter area
LAYER FGDDMY         786 
LAYER MAP 208 DATATYPE 20 786 //  For FGD MOS
LAYER RRSED_ON       787 
LAYER MAP 204 DATATYPE 56 787 //  FOR RRAM open etching
LAYER RRCTM_ON       788 
LAYER MAP 204 DATATYPE 57 788 //  FOR RRAM CTM etching
LAYER RRCBM_ON       789 
LAYER MAP 204 DATATYPE 58 789 //  FOR RRAM CBM etching
LAYER RRSDVA_ON      790 
LAYER MAP 204 DATATYPE 59 790 //  FOR RRAM SEED VIA etching
LAYER MRSED          791 
LAYER MAP 204 DATATYPE 1 791 //  For MRAM open etching
LAYER MRMTJ          792 
LAYER MAP 204 DATATYPE 2 792 //  For MRAM MTJ etching
LAYER MRPL           793 
LAYER MAP 204 DATATYPE 3 793 //  For MRAM plate etching
LAYER MRDMY          794 
LAYER MAP 204 DATATYPE 4 794 //  For MRAM LVS dummy layer	
LAYER MRSDVA         795 
LAYER MAP 204 DATATYPE 10 795 //  For MRAM SEED VIA etching
LAYER MRDMY_2        796 
LAYER MAP 204 DATATYPE 5 796 //  For MRAM LVS dummy layer
LAYER MRDMY_3        797 
LAYER MAP 204 DATATYPE 6 797 //  For MRAM LVS dummy layer
LAYER MRDMY_4        798 
LAYER MAP 204 DATATYPE 7 798 //  For MRAM LVS dummy layer
LAYER CORELDD_IO     799 
LAYER MAP 207 DATATYPE 0 799 //  For AVT devices
LAYER ANALOG         800 
LAYER MAP 207 DATATYPE 11 800 //  Dummy layer for Super analog devices
LAYER OD_50F         801 
LAYER MAP 154 DATATYPE 162 801 //  5V device
LAYER OD_50F_UD      802 
LAYER MAP 154 DATATYPE 163 802 //  5V device over_drive
LAYER OD_50F_120     803 
LAYER MAP 154 DATATYPE 183 803 //  5V device under-drive
LAYER ZMOS_EF        804 
LAYER MAP 154 DATATYPE 166 804 //  5V device ZMOS
LAYER NWDMY12_50F    805 
LAYER MAP 154 DATATYPE 184 805 //  5V NWDMY
LAYER CGPO_EF        806 
LAYER MAP 154 DATATYPE 160 806 //  5V CGPO layer
LAYER MGPO_EF        807 
LAYER MAP 154 DATATYPE 152 807 //  5V MGPO layer
LAYER STCAP_EF       808 
LAYER MAP 154 DATATYPE 161 808 //  5V STCAP
LAYER MOMDMY_120F_EF 809 
LAYER MAP 154 DATATYPE 180 809 //  For 120F FMOM
LAYER FMONOSDMY_EF   810 
LAYER MAP 154 DATATYPE 189 810 //  For 120F FMOM
LAYER FMONOSCELL_EF  811 
LAYER MAP 154 DATATYPE 153 811 //  For 120F FMOM
LAYER CGPOVER_EF     812 
LAYER MAP 154 DATATYPE 151 812 //  For CG NMOS
LAYER MGPOVER_EF     813 
LAYER MAP 154 DATATYPE 158 813 //  For MG NMOS
LAYER VMGL_EF        814 
LAYER MAP 154 DATATYPE 185 814 //  For CG and MG NMOS
LAYER RMG_EF         815 
LAYER MAP 154 DATATYPE 157 815 //  For CG and MG NMOS
LAYER FMDLDD_EF      816 
LAYER MAP 154 DATATYPE 155 816 //  For CG and MG NMOS
LAYER FMSLDD_EF      817 
LAYER MAP 154 DATATYPE 156 817 //  For CG and MG NMOS
LAYER RCGC_EF        818 
LAYER MAP 154 DATATYPE 159 818 //  For CG and MG NMOS
LAYER FDIFVER_EF     819 
LAYER MAP 154 DATATYPE 168 819 //  For CG and MG NMOS
LAYER DILVS2_EF      820 
LAYER MAP 154 DATATYPE 186 820 //  For MONOS parasitic diode
LAYER MARK_5V        821 
LAYER MAP 154 DATATYPE 210 821 //  Marker layer for nets with 5V maximum voltage differential.
LAYER OD_HV          822 
LAYER MAP 154 DATATYPE 213 822 //  Define SONOS TGO gate oxide devices
LAYER CELL_CLEAR     823 
LAYER MAP 154 DATATYPE 204 823 //  Define SONOS Flash cell CG device
LAYER ONO            824 
LAYER MAP 154 DATATYPE 205 824 //  Define ONO dielectric
LAYER CELL           825 
LAYER MAP 154 DATATYPE 206 825 //  LDD implants for SONOS Flash cell devices
LAYER SONOS_MARK     826 
LAYER MAP 154 DATATYPE 207 826 //  Define SONOS Flash memory cell region
LAYER MCEL           827 
LAYER MAP 154 DATATYPE 1 827 //  For Flash process memory cell region
LAYER CG             828 
LAYER MAP 154 DATATYPE 2 828 //  For Flash process control gate layer
LAYER HVII           829 
LAYER MAP 154 DATATYPE 4 829 //  For Flash process HVII region
LAYER HVNWi          830 
LAYER MAP 154 DATATYPE 5 830 //  For Flash process HVNW for HVPMOS
LAYER PSUBi          831 
LAYER MAP 154 DATATYPE 7 831 //  For Flash process HVPW for HVNMOS and HVZMOS
LAYER CGCT           832 
LAYER MAP 154 DATATYPE 10 832 //  For Flash process
LAYER LMIN_OS        833 
LAYER MAP 154 DATATYPE 31 833 //  Define minimum poly CD for core device
LAYER LMIN_OS_SG     834 
LAYER MAP 154 DATATYPE 37 834 //  Define minimum poly CD for core device which connect to SG
LAYER HVLDD          835 
LAYER MAP 154 DATATYPE 40 835 //  Define HV device with HVLDD implant
LAYER POS1           836 
LAYER MAP 254 DATATYPE 1 836 //  Dummy layer to increase gate length 1 nm to both sides (after thrink)
LAYER POS2           837 
LAYER MAP 254 DATATYPE 2 837 //  Dummy layer to increase gate length 2 nm to both sides (after thrink)
LAYER GATED          838 
LAYER MAP 255 DATATYPE 3 838 //  GATED layer for define gated-diode region, it must cover whole active region
LAYER ULP_WR         839 
LAYER MAP 255 DATATYPE 64 839 //  Wide range Vdd usage
LAYER IND_TEXT       840
LAYER MAP 144 TEXTTYPE 37 840
TEXT LAYER 131 ATTACH 131 metal1
PORT LAYER TEXT 131
TEXT LAYER 132 ATTACH 132 metal2
PORT LAYER TEXT 132
TEXT LAYER 133 ATTACH 133 metal3
PORT LAYER TEXT 133
TEXT LAYER 134 ATTACH 134 metal4
PORT LAYER TEXT 134
TEXT LAYER 135 ATTACH 135 metal5
PORT LAYER TEXT 135
TEXT LAYER 136 ATTACH 136 metal6
PORT LAYER TEXT 136
TEXT LAYER 126 ATTACH 126 metal7
PORT LAYER TEXT 126
#IFDEF RC_DECK
TEXT LAYER 149 ATTACH 149 poly
PORT LAYER TEXT 149
#ENDIF

#IFNDEF RC_DECK

#IFNDEF DFM_RULE
LAYER MAP 149 TEXTTYPE 1 841
TEXT LAYER 841 ATTACH 841 poly
PORT LAYER TEXT 841
#ENDIF
#ENDIF
//#############################################
//# LOGIC OPERATION POOL                      #
//#############################################

//Form BULK layer
DRC:1 = EXTENT
BULK  = SIZE DRC:1 BY 0.005

//* Define device -- nmos nch_na
POz = POI OR DPO 
POy = POz OR SR_DPO 
POx = POy NOT TPO 
PO = POx NOT SR_DPO 
rpolywo1 = POI AND RH 
rpolywo2 = rpolywo1 AND RPO 
RPDMYi = RPDMYai NOT SR_DOD 
RPDMY1 = RPDMYa1 NOT SR_DOD 
RPDMY = RPDMYi OR RPDMY1 
ODz = ODI OR DOD 
OD = ODz OR SR_DOD 
srm_imp = SRMD1 OR SRMD2 
SRM1 = SRMD0 OR srm_imp 
SRM = SRM1 NOT SRMD5 
RODMY_srm = RODMY AND SRM 
diffa = OD NOT RODMY_srm 
diff = diffa INTERACT CO 
rp1 = RPDMY NOT INTERACT diff 
p1rdum = rp1 INTERACT PO  //  poly1 resistor dummy
rpolywo = rpolywo2 INTERACT p1rdum 
poly1 = PO NOT rpolywo 
rpoly1 = POI AND p1rdum 
rpoly2 = rpoly1 NOT INTERACT RPO 
#IFDEF RES_WO_RH
rpoly = COPY rpoly2
#ELSE
rpoly = rpoly2 AND RH
#ENDIF
poly3a = poly1 NOT rpoly 
poly21 = poly3a OR SR_DPO 
CG_size = SIZE CG BY 0.001 
poly22 = poly21 NOT CG_size 
poly_org = poly22 NOT HVII 
realpo1 = poly_org NOT SR_DPO 
dumpo1 = poly_org INSIDE diff 
dumpo2 = dumpo1 NOT INTERACT CO 
realpo = realpo1 NOT dumpo2 
rodwo1 = diff AND RH 
rodwo2 = rodwo1 AND RPO 
rodwo3 = rodwo2 INTERACT ODI 
drdum = RPDMY INTERACT diff  //  diff resistor dummy
rodwo = rodwo3 INTERACT drdum 
mdiff1 = diff NOT rodwo 
rod1 = diff AND drdum 
rod2 = rod1 NOT INTERACT RPO 
rod3 = rod2 INTERACT ODI 
#IFDEF RES_WO_RH
rod = COPY rod3
#ELSE
rod = rod3 AND RH
#ENDIF
mdiff = mdiff1 NOT rod 
gate11 = realpo AND mdiff 
gate1 = COPY gate11 
gate_a1 = gate1 NOT SRM 
BJTDMY1 = BJTDMYi NOT SR_DOD 
BJTDMY = BJTDMY1 NOT LVBJTDMYi 
LVBJTDMY = LVBJTDMYi NOT BJTDMY 
gate_a2 = gate_a1 NOT LVBJTDMY 
gate_a3 = gate_a2 NOT GATED 
#IFDEF extract_compact_model
  MAC    = COPY MACi
#ELSE
  MACv1  = OD INTERACT PO
  MACv2  = MACv1 NOT INTERACT HVD_N
  MACv3  = MACv2 NOT INTERACT HVD_P
  MACv4  = MACv3 NOT OD1T
  MACv5  = MACv4 NOT SRM
  MACv6  = MACv5 NOT NT_N
  MACv7  = MACv6 NOT VTZ_N
  MAC    = MACi OR MACv7
#ENDIF

gate_mac = gate_a3 AND MAC 
gate_no_mac = gate_a3 NOT MAC 
gate_a = gate_mac OR gate_no_mac 
gate_a_rf = gate_a AND RFDMY 
poly_rf1 = poly_org INTERACT CO 
drain_all = DRAIN OR DEHVD_N 
poly_rf = poly_rf1 INTERACT drain_all 
gate_rfb = gate_a_rf AND poly_rf 
VAR = VARi NOT SR_DOD 
gate_rf = gate_rfb NOT VAR 
gate = gate_a NOT gate_rf 
alvtwell = NWLVT OR PWLVT 
gatenalvt = gate NOT alvtwell  //  gate not in alvt well
HVNW = COPY HVNWi 
gate_nlv1 = gatenalvt NOT HVNW 
HVPW = COPY HVPWi 
gate_nlv2 = gate_nlv1 NOT HVPW 
gate_nlv3 = gate_nlv2 NOT PSUBi 
gate_nlv4 = gate_nlv3 NOT MCEL 
NWDMY = NWDMYi OR NWDMY1 
nxwell1 = NW NOT NWDMY 
nxwell_ori = nxwell1 NOT HVNW 
nxwell = nxwell_ori OR JNW 
gatennw = gate_nlv4 NOT nxwell  //  gate not inside nwell
tngate1 = gatennw AND NP 
tngate2 = tngate1 NOT CI_CAP 
tngate21 = tngate2 NOT LMIN_OS 
tngate22 = tngate21 NOT LMIN_OS_SG 
tngate31 = tngate22 NOT OD_50F 
tngate3 = tngate31 NOT OD_HV 
tngate4 = tngate3 NOT OD25 
tngate5 = tngate4 NOT OD33 
tngate6 = tngate5 NOT OD18 
tngate7 = tngate6 NOT OD_12 
nlgate1 = tngate7 AND NT_N 
nlgate2 = nlgate1 NOT VTL_N 
nlgate3 = nlgate2 NOT VTH_N 
nlgate4 = nlgate3 NOT VTUL_N_EDM 
dnw_4vnjfet_1 = DNWi AND HVJDMY 
dnw_4vnjfet = dnw_4vnjfet_1 INTERACT JFET_BLK_DNW 
DNW = DNWi NOT dnw_4vnjfet 
nlgate5 = nlgate4 NOT DNW 
nlgate6 = nlgate5 NOT ILVT 
DCO = COPY DCOi 
nlgate7 = nlgate6 NOT DCO 
nlgate8 = nlgate7 NOT VTZ_N 
IPia = SIZE IPi BY 0.005 
IP = IPi NOT IPia 
nlgate9 = nlgate8 NOT IP 
nlgate10 = nlgate9 NOT LP_NTN 
nlgate11 = nlgate10 NOT CORELDD_IO 
nlgate = nlgate11 NOT MAC  //  CORE Native Devies

//***** Define connectivity/via layer -- psub ****
anwell1 = nxwell OR NWLVT 
anwell = anwell1 OR HVNW 
ppsub1 = BULK NOT anwell  //  define total p_sub region
ppsub2 = ppsub1 NOT NWLVT  //  exclude NWLVT layer
ppsub = ppsub2 NOT PWLVT  //  exclude PWLVT layer
psub2s = SIZE PSUB2 BY 0.01 
psubband = psub2s NOT PSUB2  //   psub separator band (doughnut).
psub_ori = ppsub NOT psubband 
pthin2 = mdiff AND PP  //  define P+ thin oxide
pthin = pthin2 NOT SR_DPO 
sbd_dnw = SBDDMY AND DNW 
sbd_pwdnw = sbd_dnw AND psub 
tpdiff_sbd = pthin AND sbd_pwdnw 

//* Define layer -- pjf_4_mac_reg_1
pjf_4_mac_reg_1_tmp01 = OD25 AND DNWi
pjf_4_mac_reg_1_tmp02 = pjf_4_mac_reg_1_tmp01 NOT NT_N
pjf_4_mac_reg_1_tmp03 = pjf_4_mac_reg_1_tmp02 NOT OD18
pjf_4_mac_reg_1_tmp04 = pjf_4_mac_reg_1_tmp03 NOT POI
pjf_4_mac_reg_1_tmp05 = pjf_4_mac_reg_1_tmp04 NOT EHVT_N
pjf_4_mac_reg_1_tmp06 = pjf_4_mac_reg_1_tmp05 NOT EHVT_P
pjf_4_mac_reg_1_tmp07 = pjf_4_mac_reg_1_tmp06 NOT VTH_N
pjf_4_mac_reg_1_tmp08 = pjf_4_mac_reg_1_tmp07 NOT VTH_P
pjf_4_mac_reg_1_tmp09 = pjf_4_mac_reg_1_tmp08 NOT VTL_N
pjf_4_mac_reg_1_tmp10 = pjf_4_mac_reg_1_tmp09 NOT VTL_P
pjf_4_mac_reg_1_tmp11 = pjf_4_mac_reg_1_tmp10 NOT ELVT_N
pjf_4_mac_reg_1_tmp12 = pjf_4_mac_reg_1_tmp11 NOT ELVT_P
pjf_4_mac_reg_1_tmp13 = pjf_4_mac_reg_1_tmp12 NOT CORELDD_IO
pjf_4_mac_reg_1_tmp14 = pjf_4_mac_reg_1_tmp13 NOT RH
pjf_4_mac_reg_1_tmp15 = pjf_4_mac_reg_1_tmp14 NOT NWDMY
pjf_4_mac_reg_1_tmp16 = pjf_4_mac_reg_1_tmp15 NOT VAR
pjf_4_mac_reg_1_tmp17 = pjf_4_mac_reg_1_tmp16 NOT BJTDMY
pjf_4_mac_reg_1_tmp18 = pjf_4_mac_reg_1_tmp17 NOT DIODMY
pjf_4_mac_reg_1_tmp19 = pjf_4_mac_reg_1_tmp18 NOT RPDMY
pjf_4_mac_reg_1_tmp20 = pjf_4_mac_reg_1_tmp19 NOT HVD_N
pjf_4_mac_reg_1_tmp21 = pjf_4_mac_reg_1_tmp20 NOT HVD_P
pjf_4_mac_reg_1_tmp22 = pjf_4_mac_reg_1_tmp21 NOT ULP_WR
pjf_4_mac_reg_1_tmp23 = pjf_4_mac_reg_1_tmp22 NOT OD25_33
pjf_4_mac_reg_1_tmp24 = pjf_4_mac_reg_1_tmp23 NOT OD25_18
pjf_4_mac_reg_1_tmp25 = pjf_4_mac_reg_1_tmp24 NOT ANALOG
pjf_4_mac_reg_1_tmp26 = pjf_4_mac_reg_1_tmp25 NOT FGDDMY
pjf_4_mac_reg_1_tmp27 = pjf_4_mac_reg_1_tmp26 NOT SERPDMY
pjf_4_mac_reg_1_tmp28 = pjf_4_mac_reg_1_tmp27 AND JNW
pjf_4_mac_reg_1_tmp29 = pjf_4_mac_reg_1_tmp28 NOT JDMY
pjf_4_mac_reg_1_tmp30 = pjf_4_mac_reg_1_tmp29 AND HVJDMY
pjf_4_mac_reg_1_tmp31 = pjf_4_mac_reg_1_tmp30 NOT SBDDMY
pjf_4_mac_reg_1_tmp32 = pjf_4_mac_reg_1_tmp31 NOT JFET_N4V_DRAIN
pjf_4_mac_reg_1_tmp33 = pjf_4_mac_reg_1_tmp32 NOT JFET_BLK_DNW
pjf_4_mac_reg_1 = pjf_4_mac_reg_1_tmp33 AND JFET_BLK_PSUB

pjf_4_mac_reg_2 = pjf_4_mac_reg_1 INTERACT OD 
pjf_4_mac_reg_3 = pjf_4_mac_reg_2 INTERACT NW 
pjf_4_mac_reg_4 = pjf_4_mac_reg_3 INTERACT NP 
pjf_4_mac_reg = pjf_4_mac_reg_4 INTERACT RPO 
psub_not_4vpjfet = JFET_BLK_PSUB INTERACT pjf_4_mac_reg 
psub = psub_ori NOT psub_not_4vpjfet 

//* Define device -- nmos nch_na_mac
nlgate_mac = nlgate11 AND MAC  //  CORE Native Devies MAC

//* Define device -- nmos nch_naavt
nlavgate1 = tngate1 AND CORELDD_IO 
nlavgate2 = nlavgate1 AND NT_N 
nlavgate3 = nlavgate2 NOT OD25 
nlavgate4 = nlavgate3 NOT OD18 
nlavgate5 = nlavgate4 NOT EHVT_N 
nlavgate6 = nlavgate5 NOT EHVT_P 
nlavgate7 = nlavgate6 NOT VTH_N 
nlavgate8 = nlavgate7 NOT VTH_P 
nlavgate9 = nlavgate8 NOT VTL_N 
nlavgate10 = nlavgate9 NOT VTL_P 
nlavgate11 = nlavgate10 NOT ELVT_N 
nlavgate12 = nlavgate11 NOT ELVT_P 
nlavgate13 = nlavgate12 NOT RPO 
nlavgate14 = nlavgate13 NOT RH 
nlavgate15 = nlavgate14 NOT NWDMY 
nlavgate16 = nlavgate15 NOT VAR 
nlavgate17 = nlavgate16 NOT BJTDMY 
DIODMY = DIODMYi NOT SR_DOD 
nlavgate18 = nlavgate17 NOT DIODMY 
nlavgate19 = nlavgate18 NOT RPDMY 
nlavgate20 = nlavgate19 NOT HVD_N 
nlavgate21 = nlavgate20 NOT HVD_P 
nlavgate22 = nlavgate21 NOT ULP_WR 
nlavgate23 = nlavgate22 NOT OD25_33 
nlavgate24 = nlavgate23 NOT OD25_18 
nlavgate = nlavgate24 NOT MAC 

//* Define device -- nmos nch_naavt_mac
nlavgate_mac = nlavgate24 AND MAC 

//* Define device -- nmos nch_hvt
tngate8 = tngate7 NOT NT_N 
tngate9 = tngate8 NOT DNW 
nhvgate1 = tngate9 AND VTH_N 
POSall = POS1 OR POS2 
nhvgate_org_a = nhvgate1 NOT POSall 
nhvgate_org = nhvgate_org_a NOT IP 
nhvgate = nhvgate_org NOT MAC  //  CORE HIGH_VT NMOS

//* Define device -- nmos nch_lvt
nlvgate_l = tngate9 AND VTL_N  //  CORE LOW_VT NMOS in LOGIC
gate_sr = gate1 AND SRM 
gate_s1 = gate_sr NOT alvtwell 
gate_s2 = gate_s1 NOT PSUBi 
gate_s3 = gate_s2 NOT HVPW 
gate_s4 = gate_s3 NOT HVNW 
gate_s5 = gate_s4 NOT MCEL 
gatennw_s = gate_s5 NOT nxwell  //  gate not inside nwell
ngate_s1 = gatennw_s AND NP 
ngate_s2 = ngate_s1 NOT OD25 
ngate_s3 = ngate_s2 NOT OD33 
ngate_s4 = ngate_s3 NOT OD18 
ngate_s41 = ngate_s4 NOT NT_N 
ngate_s42 = ngate_s41 NOT DNW 
nlvgate_s = ngate_s42 AND VTL_N  //  CORE LOW_VT NMOS in SRM
nlvgate_org1 = nlvgate_l OR nlvgate_s  //  CORE LOW_VT NMOS
nlvgate_org2 = nlvgate_org1 NOT DCO 
nlvgate_org3 = nlvgate_org2 NOT POSall 
nlvgate_org4 = nlvgate_org3 NOT IP 
nlvgate_org = COPY nlvgate_org4 
nlvgate = nlvgate_org NOT MAC  //  CORE LOW_VT NMOS

//* Define device -- nmos nch_hvt_mac
nhvgate_mac = nhvgate_org AND MAC  //  CORE HIGH_VT NMOS MAC

//* Define device -- nmos nch_lvt_mac
nlvgate_mac = nlvgate_org AND MAC  //  CORE LOW_VT NMOS MAC

//* Define device -- nmos nch_ehvt
ngate1 = tngate9 NOT nlvgate_org1 
ngate2 = ngate1 NOT nhvgate1 
tngate10 = tngate9 NOT OD1T 
neuvgate_org1 = tngate10 AND VTUL_N_EDM 
ngate3 = ngate2 NOT neuvgate_org1 
ngate4 = ngate3 NOT OD1T 
ngate5 = ngate4 NOT ILVT 
ngate6 = COPY ngate5 
ngate7 = ngate6 NOT DCO 
ngate9 = ngate7 NOT POSall 
ngate10 = ngate9 NOT CORELDD_IO 
ngate11 = ngate10 NOT IP 
nehvgate1 = ngate11 AND EHVT_N 
nehvgate2 = nehvgate1 NOT VTUL_N 
nehvgate3 = nehvgate2 NOT ELVT_N 
nehvgate4 = nehvgate3 NOT DCO_LPP 
nehvgate5 = COPY nehvgate4 
nehvgate = nehvgate5 NOT MAC  //  1.1V Extreme High Vt NMOS

//* Define device -- nmos nch_ehvt_dnw
tdgate1a = tngate8 AND DNW 
tdgate1 = tdgate1a NOT OD1T 
n1lvgate_org1 = tdgate1 AND VTL_N 
nrgate1 = tdgate1 NOT n1lvgate_org1 
n1hvgate1 = tdgate1 AND VTH_N 
nrgate2 = nrgate1 NOT n1hvgate1 
n1euvgate_org1 = tdgate1 AND VTUL_N_EDM 
nrgate3 = nrgate2 NOT n1euvgate_org1 
nrgate41 = nrgate3 NOT ILVT 
nrgate4 = COPY nrgate41 
nrgate5 = nrgate4 NOT DCO 
nrgate_org1 = nrgate5 NOT POSall 
nrgate_org2 = nrgate_org1 NOT CORELDD_IO 
nrgate_org3 = nrgate_org2 NOT IP 
n1ehvgate1 = nrgate_org3 AND EHVT_N 
n1ehvgate2 = n1ehvgate1 NOT VTUL_N 
n1ehvgate3 = n1ehvgate2 NOT ELVT_N 
n1ehvgate4 = n1ehvgate3 NOT DCO_LPP 
n1ehvgate5 = COPY n1ehvgate4 
n1ehvgate = n1ehvgate5 NOT MAC  //  CORE Extreme High Vt NMOS on DNW

//* Define device -- nmos nch_ehvt_mac
nehvgate_mac = nehvgate5 AND MAC  //  1.1V Extreme High Vt NMOS MAC

//* Define device -- nmos nch_ehvt_dnw_mac
n1ehvgate_mac = n1ehvgate5 AND MAC  //  CORE Extreme High Vt NMOS on DNW MAC

//* Define device -- nmos nch_avt
ngate_avt1 = ngate9 AND CORELDD_IO 
ngate_avt = ngate_avt1 NOT MAC  //  AVT NMOS

//* Define device -- nmos nch_avt_mac
ngate_avt_mac = ngate_avt1 AND MAC  //  AVT NMOS MAC

//* Define device -- nmos nch_avt_dnw
nrgate_org7 = nrgate_org1 AND CORELDD_IO 
nrgate_avt = nrgate_org7 NOT MAC  //  AVT NMOS on DNW

//* Define device -- nmos nch_avt_dnw_mac
nrgate_avt_mac = nrgate_org7 AND MAC  //  AVT NMOS on DNW MAC

//* Define device -- nmos nch_elvt
nelvgate1 = ngate11 AND ELVT_N 
nelvgate2 = nelvgate1 NOT VTUL_N 
nelvgate3 = nelvgate2 NOT EHVT_N 
nelvgate4 = nelvgate3 NOT DCO_LPP 
nelvgate5 = COPY nelvgate4 
nelvgate = nelvgate5 NOT MAC  //  1.1V Extreme Low Vt NMOS

//* Define device -- nmos nch_elvt_dnw
n1elvgate1 = nrgate_org3 AND ELVT_N 
n1elvgate2 = n1elvgate1 NOT VTUL_N 
n1elvgate3 = n1elvgate2 NOT EHVT_N 
n1elvgate4 = n1elvgate3 NOT DCO_LPP 
n1elvgate5 = COPY n1elvgate4 
n1elvgate = n1elvgate5 NOT MAC  //  CORE Extreme Low Vt NMOS on DNW

//* Define device -- nmos nch_elvt_mac
nelvgate_mac = nelvgate5 AND MAC  //  1.1V Extreme Low Vt NMOS MAC

//* Define device -- nmos nch_elvt_dnw_mac
n1elvgate_mac = n1elvgate5 AND MAC  //  CORE Extreme Low Vt NMOS on DNW MAC

//* Define device -- nmos nch_lvt_dnw
n1lvgate_org2 = n1lvgate_org1 NOT DCO 
n1lvgate_org3 = n1lvgate_org2 NOT POSall 
n1lvgate_org4 = n1lvgate_org3 NOT IP 
n1lvgate_org = COPY n1lvgate_org4 
n1lvgate = n1lvgate_org NOT MAC  //  CORE LOW_VT NMOS on DNW

//* Define device -- nmos nch
ngate121 = ngate11 NOT VTUL_N 
ngate122 = ngate121 NOT EHVT_N 
ngate12 = ngate122 NOT ELVT_N 
ngate13 = ngate12 NOT VTZ_N 
ngate14 = COPY ngate13 
ngate = ngate14 NOT MAC  //  CORE NMOS

//* Define device -- nmos nch_lvt_dnw_mac
n1lvgate_mac = n1lvgate_org AND MAC  //  CORE LOW_VT NMOS on DNW

//* Define device -- nmos nch_mac
ngate_mac = ngate14 AND MAC  //  CORE NMOS MAC

//* Define device -- xdev sbd_pw_mac
M6 = M6i OR DUM6 
sline_m6 = M6 AND TLDMY 
sline_m6a = sline_m6 AND INDDMY 
sline_m6p = sline_m6a NOT IND_MP 
sline_m6p2 = SIZE sline_m6p BY 0.001 

//* Define layer -- sbd_pw_reg_1
sbd_pw_reg_1_tmp01 = DNW NOT NW
sbd_pw_reg_1_tmp02 = sbd_pw_reg_1_tmp01 NOT NT_N
sbd_pw_reg_1_tmp03 = sbd_pw_reg_1_tmp02 NOT OD25
sbd_pw_reg_1_tmp04 = sbd_pw_reg_1_tmp03 NOT OD18
sbd_pw_reg_1_tmp05 = sbd_pw_reg_1_tmp04 NOT EHVT_N
sbd_pw_reg_1_tmp06 = sbd_pw_reg_1_tmp05 NOT EHVT_P
sbd_pw_reg_1_tmp07 = sbd_pw_reg_1_tmp06 NOT VTH_N
sbd_pw_reg_1_tmp08 = sbd_pw_reg_1_tmp07 NOT VTH_P
sbd_pw_reg_1_tmp09 = sbd_pw_reg_1_tmp08 NOT VTL_N
sbd_pw_reg_1_tmp10 = sbd_pw_reg_1_tmp09 NOT VTL_P
sbd_pw_reg_1_tmp11 = sbd_pw_reg_1_tmp10 NOT ELVT_N
sbd_pw_reg_1_tmp12 = sbd_pw_reg_1_tmp11 NOT ELVT_P
sbd_pw_reg_1_tmp13 = sbd_pw_reg_1_tmp12 NOT CORELDD_IO
sbd_pw_reg_1_tmp14 = sbd_pw_reg_1_tmp13 NOT RPO
sbd_pw_reg_1_tmp15 = sbd_pw_reg_1_tmp14 NOT RH
sbd_pw_reg_1_tmp16 = sbd_pw_reg_1_tmp15 NOT NWDMY
sbd_pw_reg_1_tmp17 = sbd_pw_reg_1_tmp16 NOT VAR
sbd_pw_reg_1_tmp18 = sbd_pw_reg_1_tmp17 NOT BJTDMY
sbd_pw_reg_1_tmp19 = sbd_pw_reg_1_tmp18 NOT DIODMY
sbd_pw_reg_1_tmp20 = sbd_pw_reg_1_tmp19 NOT RPDMY
sbd_pw_reg_1_tmp21 = sbd_pw_reg_1_tmp20 NOT HVD_N
sbd_pw_reg_1_tmp22 = sbd_pw_reg_1_tmp21 NOT HVD_P
sbd_pw_reg_1_tmp23 = sbd_pw_reg_1_tmp22 NOT ULP_WR
sbd_pw_reg_1_tmp24 = sbd_pw_reg_1_tmp23 NOT OD25_33
sbd_pw_reg_1_tmp25 = sbd_pw_reg_1_tmp24 NOT OD25_18
sbd_pw_reg_1_tmp26 = sbd_pw_reg_1_tmp25 NOT ANALOG
sbd_pw_reg_1_tmp27 = sbd_pw_reg_1_tmp26 NOT FGDDMY
sbd_pw_reg_1_tmp28 = sbd_pw_reg_1_tmp27 NOT SERPDMY
sbd_pw_reg_1_tmp29 = sbd_pw_reg_1_tmp28 NOT JNW
sbd_pw_reg_1_tmp30 = sbd_pw_reg_1_tmp29 NOT JDMY
sbd_pw_reg_1_tmp31 = sbd_pw_reg_1_tmp30 NOT HVJDMY
sbd_pw_reg_1 = sbd_pw_reg_1_tmp31 AND SBDDMY

nthin3 = mdiff CUT NP
tndiff_sbd = nthin3 AND sbd_pwdnw 
sbd_pw_reg_2 = sbd_pw_reg_1 INTERACT tndiff_sbd 
sbd_pw_reg = sbd_pw_reg_2 INTERACT tpdiff_sbd 

//***** Define connectivity/via layer -- rwel ****
rwel_ori = psub INSIDE DNWi 

//* Define layer -- njf_4_mac_reg_1
njf_4_mac_reg_1_tmp01 = OD25 AND DNWi
njf_4_mac_reg_1_tmp02 = njf_4_mac_reg_1_tmp01 NOT NT_N
njf_4_mac_reg_1_tmp03 = njf_4_mac_reg_1_tmp02 NOT OD18
njf_4_mac_reg_1_tmp04 = njf_4_mac_reg_1_tmp03 NOT POI
njf_4_mac_reg_1_tmp05 = njf_4_mac_reg_1_tmp04 NOT EHVT_N
njf_4_mac_reg_1_tmp06 = njf_4_mac_reg_1_tmp05 NOT EHVT_P
njf_4_mac_reg_1_tmp07 = njf_4_mac_reg_1_tmp06 NOT VTH_N
njf_4_mac_reg_1_tmp08 = njf_4_mac_reg_1_tmp07 NOT VTH_P
njf_4_mac_reg_1_tmp09 = njf_4_mac_reg_1_tmp08 NOT VTL_N
njf_4_mac_reg_1_tmp10 = njf_4_mac_reg_1_tmp09 NOT VTL_P
njf_4_mac_reg_1_tmp11 = njf_4_mac_reg_1_tmp10 NOT ELVT_N
njf_4_mac_reg_1_tmp12 = njf_4_mac_reg_1_tmp11 NOT ELVT_P
njf_4_mac_reg_1_tmp13 = njf_4_mac_reg_1_tmp12 NOT CORELDD_IO
njf_4_mac_reg_1_tmp14 = njf_4_mac_reg_1_tmp13 NOT RPO
njf_4_mac_reg_1_tmp15 = njf_4_mac_reg_1_tmp14 NOT RH
njf_4_mac_reg_1_tmp16 = njf_4_mac_reg_1_tmp15 NOT NWDMY
njf_4_mac_reg_1_tmp17 = njf_4_mac_reg_1_tmp16 NOT VAR
njf_4_mac_reg_1_tmp18 = njf_4_mac_reg_1_tmp17 NOT BJTDMY
njf_4_mac_reg_1_tmp19 = njf_4_mac_reg_1_tmp18 NOT DIODMY
njf_4_mac_reg_1_tmp20 = njf_4_mac_reg_1_tmp19 NOT RPDMY
njf_4_mac_reg_1_tmp21 = njf_4_mac_reg_1_tmp20 NOT HVD_N
njf_4_mac_reg_1_tmp22 = njf_4_mac_reg_1_tmp21 NOT HVD_P
njf_4_mac_reg_1_tmp23 = njf_4_mac_reg_1_tmp22 NOT ULP_WR
njf_4_mac_reg_1_tmp24 = njf_4_mac_reg_1_tmp23 NOT OD25_33
njf_4_mac_reg_1_tmp25 = njf_4_mac_reg_1_tmp24 NOT OD25_18
njf_4_mac_reg_1_tmp26 = njf_4_mac_reg_1_tmp25 NOT ANALOG
njf_4_mac_reg_1_tmp27 = njf_4_mac_reg_1_tmp26 NOT FGDDMY
njf_4_mac_reg_1_tmp28 = njf_4_mac_reg_1_tmp27 NOT SERPDMY
njf_4_mac_reg_1_tmp29 = njf_4_mac_reg_1_tmp28 NOT JNW
njf_4_mac_reg_1_tmp30 = njf_4_mac_reg_1_tmp29 NOT JDMY
njf_4_mac_reg_1_tmp31 = njf_4_mac_reg_1_tmp30 AND HVJDMY
njf_4_mac_reg_1_tmp32 = njf_4_mac_reg_1_tmp31 NOT SBDDMY
njf_4_mac_reg_1_tmp33 = njf_4_mac_reg_1_tmp32 AND JFET_BLK_DNW
njf_4_mac_reg_1 = njf_4_mac_reg_1_tmp33 NOT JFET_BLK_PSUB

njf_4_mac_reg_2 = njf_4_mac_reg_1 INTERACT OD 
njf_4_mac_reg_3 = njf_4_mac_reg_2 INTERACT NW 
njf_4_mac_reg_4 = njf_4_mac_reg_3 INTERACT PP 
dnw_4vnjfet_d1 = dnw_4vnjfet AND JFET_N4V_DRAIN 
dnw_4vnjfet_d = dnw_4vnjfet_d1 INTERACT NP 
njf_4_mac_reg = njf_4_mac_reg_4 INTERACT dnw_4vnjfet_d 
rwel_4vnjfet = rwel_ori INTERACT njf_4_mac_reg 
rwel_1 = rwel_ori NOT rwel_4vnjfet 
rwel_4vpjfet = rwel_ori INTERACT pjf_4_mac_reg 
rwel = rwel_1 NOT rwel_4vpjfet 
sbd_w = EXT tndiff_sbd tpdiff_sbd < 0.22 OPPOSITE REGION

//* Define device -- lddn nch_hv25_snw
ngate_25a1 = tngate1 NOT CI_CAP 
ngate_25a2 = ngate_25a1 AND OD25 
ngate_25a3 = ngate_25a2 NOT OD18 
ngate_25a4 = ngate_25a3 NOT OD33 
ngate_25a5 = ngate_25a4 NOT OD_12 
ngate_25a = ngate_25a5 NOT OD_50F 
ngate_25b = ngate_25a NOT NT_N 
ngate_25c = ngate_25b NOT DNW 
ngate_25_org1 = ngate_25c NOT VTL_N 
ngate_25_org2 = ngate_25_org1 NOT VTL_N25 
ngate_25_org3 = ngate_25_org2 NOT INTERACT DEHVD_N 
ngate_hv25a = ngate_25_org3 INTERACT HVD_N 
ngate_hv25b = ngate_hv25a NOT OD18 
ngate_hv25c = ngate_hv25b NOT OD33 
ngate_hv25d = ngate_hv25c NOT VTH_N 
ngate_hv25e = ngate_hv25d NOT RPO 
ngate_hv25f = ngate_hv25e NOT RH 
ngate_hv25g = ngate_hv25f NOT NWDMY 
ngate_hv25h = ngate_hv25g NOT VAR 
ngate_hv25i = ngate_hv25h NOT BJTDMY 
ngate_hv25j = ngate_hv25i NOT HVDDMY 
ngate_hv25 = ngate_hv25j NOT MACi 

//***** Define connectivity/via layer -- s_tndiff_hv ****
nthin2 = mdiff AND NP 
nthin1 = nthin2 NOT SR_DPO 
ydio_a = ESDIMP AND OD 
ydio_b = ydio_a AND NP 
ydio = ydio_b INTERACT RPO 
nthin = nthin1 NOT ydio  //  define N+ thin oxide
tndiffa1 = nthin NOT gate1  //  define N+ diffusion region
fod = mdiff AND MCEL 
cgate1 = CG AND fod 
tndiffa2 = tndiffa1 NOT cgate1 
tndiffa = tndiffa2 NOT SR_DPO  //  define N+ diffusion region
lvbjt_diff1 = mdiff AND LVBJTDMY 
lvbjt_diff = lvbjt_diff1 INTERACT EMIDMY 
poly_donut = dumpo2 INTERACT lvbjt_diff 
tndiffb = tndiffa NOT poly_donut  //  For LVBJT emitter and collector 
diffb = diffa NOT diff 
ndiffb = diffb AND NP 
tndiff1 = tndiffb OR ndiffb 
nplug1 = tndiff1 AND nxwell 
tpdiffa1 = pthin NOT gate1  //  define P+ diffusion region
tpdiffa = tpdiffa1 NOT SR_DPO  //  define P+ diffusion region
tpdiffb = tpdiffa NOT poly_donut 
pdiffb = diffb NOT ndiffb 
tpdiff1 = tpdiffb OR pdiffb 
plug_sel1 = tndiff1 OR tpdiff1 
tioda = diff NOT tpdiff1 
tiodb = tioda NOT tndiff1 
tiod1 = tiodb NOT POx 
tiod2 = tiod1 NOT RPO 
tiod3 = tiod2 NOT RPDMY 
tiod = tiod3 NOT NWDMY  //  RPO, RPDMY, NWDMY cut ti-od
plug_sel2 = plug_sel1 OR tiod 
plug_sel = plug_sel2 INTERACT CO  //  plug select layers
nplug2 = nplug1 AND plug_sel 
nplug_dmy = nplug1 NOT nplug2 
tndiff_dmy1 = tndiff1 INTERACT nplug_dmy 
gatenw = gate_nlv4 AND nxwell  //  gate inside nwell
vargt1 = gatenw AND NP 
VAR_noRF = VAR NOT INTERACT RFDMY 
vargt21 = vargt1 AND VAR_noRF 
VAR_RF1 = VAR AND RFDMY 
VAR_RF = VAR_RF1 INTERACT gate_a 
vargt2_rf = gate_a_rf AND VAR_RF 
vargt_all1 = vargt21 OR vargt2_rf 
npolycap25_1 = tngate1 AND CI_CAP 
vargt_all = vargt_all1 OR npolycap25_1 
tndiff_dmy = tndiff_dmy1 NOT INTERACT vargt_all 
tndiff_all = tndiff1 NOT tndiff_dmy 
s_tndiff_hv_11 = tndiff_all NOT HVD_N 
ngate_18a1 = tngate1 NOT CI_CAP 
ngate_18a2 = ngate_18a1 AND OD18 
ngate_18a3 = ngate_18a2 NOT OD25 
ngate_18a4 = ngate_18a3 NOT OD33 
ngate_18a5 = ngate_18a4 NOT OD_12 
ngate_18a = ngate_18a5 NOT OD_50F 
ngate_18b = ngate_18a NOT NT_N 
ngate_18c = ngate_18b NOT DNW 
ngate_18_org1 = ngate_18c NOT VTL_N 
ngate_hv18a = ngate_18_org1 INTERACT HVD_N 
ngate_hv18b = ngate_hv18a NOT OD25 
ngate_hv18c = ngate_hv18b NOT OD33 
ngate_hv18d = ngate_hv18c NOT VTH_N 
ngate_hv18e = ngate_hv18d NOT RPO 
ngate_hv18f = ngate_hv18e NOT RH 
ngate_hv18g = ngate_hv18f NOT NWDMY 
ngate_hv18h = ngate_hv18g NOT VAR 
ngate_hv18 = ngate_hv18h NOT BJTDMY 
s_tndiff_hv_reg1 = ngate_hv25 OR ngate_hv18 
ngate_hv25_mac = ngate_hv25j AND MACi 
s_tndiff_hv_reg = s_tndiff_hv_reg1 OR ngate_hv25_mac 
s_tndiff_hv_1 = s_tndiff_hv_11 INTERACT s_tndiff_hv_reg 
ngate_demos_hv25a = ngate_hv25i AND HVDDMY 
ngate_demos_hv25_mac1 = ngate_demos_hv25a AND MACi 
nthin2_hv_d = nthin2 AND HVD_N 
ngate_demos_hv25_mac2 = ngate_demos_hv25_mac1 INTERACT nthin2_hv_d 
nthin2_hv_s1 = nthin2 NOT ngate_demos_hv25_mac2 
nthin2_hv_s = nthin2_hv_s1 NOT nthin2_hv_d 
ngate_demos_hv25_mac = ngate_demos_hv25_mac2 TOUCH nthin2_hv_s 
s_tndiff_hv_2 = nthin2_hv_s TOUCH ngate_demos_hv25_mac 
s_tndiff_hv = s_tndiff_hv_1 OR s_tndiff_hv_2 

//* Define device -- nmos nchpg_sr
ngate_s5 = ngate_s4 NOT VTL_N 
ngate_s6 = ngate_s5 NOT VTUL_N_EDM 
ngate_s7 = ngate_s6 NOT VTH_N 
srm_dp = SRMLOP_DP OR SRMLOP_D6 
ngate_s71 = ngate_s7 NOT srm_dp 
ngate_s8 = ngate_s71 NOT DCO 
ngate_s = ngate_s8 AND srm_imp  //  SRAM sp
ngate_spg1 = ngate_s AND SRAMPSGT 
ngate_spg = ngate_spg1 NOT SRM_ULL  //  SRAM NMOS passgate sp

//* Define device -- nmos nchpd_sr
ngate_spd1 = ngate_s NOT SRAMPSGT 
ngate_spd = ngate_spd1 NOT SRM_ULL  //  SRAM NMOS pulldown sp

//* Define device -- nmos nchpg_ullsr
ngate_spgull = ngate_spg1 AND SRM_ULL 
ngate_spg_ull = ngate_spgull AND SRMLOP_D4  //  SRAM NMOS passgate sp ull

//* Define device -- nmos nchpd_ullsr
ngate_spdull = ngate_spd1 AND SRM_ULL 
ngate_spd_ull = ngate_spdull AND SRMLOP_D4  //  SRAM NMOS pulldown sp ull

//* Define device -- nmos nchpg_ull10ttpsr
ngate_spg_ull10ttp = ngate_spgull AND SRMLOP_D8  //  SRAM NMOS passgate sp ull10ttp

//* Define device -- nmos nchpd_ull10ttpsr
ngate_spd_ull10ttp = ngate_spdull AND SRMLOP_D8  //  SRAM NMOS pulldown sp ull10ttp

//* Define device -- nmos nchpg_ull10ttprpsr
ngate_srt1 = ngate_s8 NOT srm_imp 
ngate_srtpg1 = ngate_srt1 AND SRAMPSGT 
ngate_srtpg2 = ngate_srtpg1 AND SRM_ULL 
ngate_spg_ull10ttprp = ngate_srtpg2 AND SRMLOP_D8 

//* Define device -- nmos nchpd_ull10ttprpsr
ngate_srtpd1 = ngate_srt1 NOT SRAMPSGT 
ngate_srtpd2 = ngate_srtpd1 AND SRM_ULL 
ngate_spd_ull10ttprp = ngate_srtpd2 AND SRMLOP_D8 

//* Define device -- nmos nchpg_ncisr
ngate_snci = ngate_s8 NOT srm_imp  //  SRAM sp nci
ngate_sncipg1 = ngate_snci AND SRAMPSGT  //  SRAM NMOS passgate sp nci 
ngate_sncipg = ngate_sncipg1 NOT SRM_ULL 

//* Define device -- nmos nchpd_ncisr
ngate_sncipd1 = ngate_snci NOT SRAMPSGT  //  SRAM NMOS pulldown sp nci
ngate_sncipd = ngate_sncipd1 NOT SRM_ULL 

//* Define device -- nmos nchpg_dpncisr
ngate_s9 = ngate_s7 AND srm_dp 
ngate_sdpnci = ngate_s9 NOT srm_imp  //  SRAM dp nci 
ngate_sdpncipg = ngate_sdpnci AND SRAMPSGT  //  SRAM NMOS passgate dp nci

//* Define device -- nmos nchpd_dpncisr
ngate_sdpncipd = ngate_sdpnci NOT SRAMPSGT  //  SRAM NMOS pulldown dp nci

//* Define device -- nmos nchpg_ullhcsr
ngate_sullhcpg = ngate_spgull AND SRMLOP_D3 

//* Define device -- nmos nchpd_ullhcsr
ngate_sullhcpd = ngate_spdull AND SRMLOP_D3 

//* Define device -- nmos nch_dnw
nrgate_org4 = nrgate_org3 NOT VTUL_N 
nrgate_org5 = nrgate_org4 NOT EHVT_N 
nrgate_org6 = nrgate_org5 NOT ELVT_N 
nrgate_org6a = COPY nrgate_org6 
nrgate = nrgate_org6a NOT MAC 

//* Define device -- nmos nch_hvt_dnw
n1hvgate_org1 = n1hvgate1 NOT POSall 
n1hvgate_org = n1hvgate_org1 NOT IP 
n1hvgate = n1hvgate_org NOT MAC  //  CORE HIGH_VT NMOS on DNW

//* Define device -- nmos nch_18
ngate_18_org2 = ngate_18_org1 NOT VTL_N_18 
ngate_18_org3 = ngate_18_org2 NOT INTERACT RH 
ngate_18_org = ngate_18_org3 NOT INTERACT HVD_N 
ngate_18ud1a = ngate_18_org AND OD18_15 
ngate_18z1 = ngate_18_org NOT ngate_18ud1a 
ngate_18z = ngate_18z1 NOT IP 
ngate_18 = ngate_18z NOT MAC  //  1.8v NMOS

//* Define device -- nmos nch_18_dnw
dngate_18a = ngate_18b AND DNW 
dngate_18_org1 = dngate_18a NOT VTL_N 
dngate_18_org = dngate_18_org1 NOT INTERACT RH 
dngate_18ud1a = dngate_18_org AND OD18_15 
dngate_18z1 = dngate_18_org NOT dngate_18ud1a 
dngate_18z = dngate_18z1 NOT IP 
dngate_18 = dngate_18z NOT MAC  //  1.8v NMOS on DNW

//* Define device -- nmos nch_25
ngate_25_org = ngate_25_org3 NOT INTERACT HVD_N 
ngate_25ud1a = ngate_25_org AND OD25_18 
ngate_25z = ngate_25_org NOT ngate_25ud1a 
ngate_25od1a = ngate_25_org AND OD25_33 
ngate_25y1 = ngate_25z NOT ngate_25od1a 
ngate_25y = ngate_25y1 NOT IP 
ngate_25x1 = ngate_25y NOT ANALOG 
ngate_25x = ngate_25x1 NOT FGDDMY 
ngate_25 = ngate_25x NOT MAC  //  2.5v NMOS

//* Define device -- nmos nch_25_mac
ngate_25_mac = ngate_25x AND MAC  //  2.5v NMOS MAC

//* Define device -- nmos nch_25ud18
ngate_25ud1 = ngate_25ud1a NOT IP 
ngate_25ud2 = COPY ngate_25ud1 
ngate_25ud = ngate_25ud2 NOT MAC  //  2.5v NMOS under_drive 1.8v

//* Define device -- nmos nch_25ud18_mac
ngate_25ud_mac = ngate_25ud2 AND MAC  //  2.5v NMOS under_drive 1.8v MAC

//* Define device -- nmos nch_25od33
ngate_25od1 = ngate_25od1a NOT IP 
ngate_25od2 = COPY ngate_25od1 
ngate_25od = ngate_25od2 NOT MAC  //  2.5v NMOS over_drive 3.3v

//* Define device -- nmos nch_25od33_mac
ngate_25od_mac = ngate_25od2 AND MAC  //  2.5v NMOS over_drive 3.3v MAC

//* Define device -- nmos nch_ana25_mac

//* Define layer -- ngate_ana25_mac
ngate_ana25_mac_tmp01 = gatennw NOT DNW
ngate_ana25_mac_tmp02 = ngate_ana25_mac_tmp01 NOT NT_N
ngate_ana25_mac_tmp03 = ngate_ana25_mac_tmp02 AND OD25
ngate_ana25_mac_tmp04 = ngate_ana25_mac_tmp03 NOT OD18
ngate_ana25_mac_tmp05 = ngate_ana25_mac_tmp04 NOT EHVT_N
ngate_ana25_mac_tmp06 = ngate_ana25_mac_tmp05 NOT EHVT_P
ngate_ana25_mac_tmp07 = ngate_ana25_mac_tmp06 NOT VTH_N
ngate_ana25_mac_tmp08 = ngate_ana25_mac_tmp07 NOT VTH_P
ngate_ana25_mac_tmp09 = ngate_ana25_mac_tmp08 NOT VTL_N
ngate_ana25_mac_tmp10 = ngate_ana25_mac_tmp09 NOT VTL_P
ngate_ana25_mac_tmp11 = ngate_ana25_mac_tmp10 NOT ELVT_N
ngate_ana25_mac_tmp12 = ngate_ana25_mac_tmp11 NOT ELVT_P
ngate_ana25_mac_tmp13 = ngate_ana25_mac_tmp12 NOT CORELDD_IO
ngate_ana25_mac_tmp14 = ngate_ana25_mac_tmp13 AND NP
ngate_ana25_mac_tmp15 = ngate_ana25_mac_tmp14 NOT PP
ngate_ana25_mac_tmp16 = ngate_ana25_mac_tmp15 NOT RPO
ngate_ana25_mac_tmp17 = ngate_ana25_mac_tmp16 NOT RH
ngate_ana25_mac_tmp18 = ngate_ana25_mac_tmp17 NOT NWDMY
ngate_ana25_mac_tmp19 = ngate_ana25_mac_tmp18 NOT VAR
ngate_ana25_mac_tmp20 = ngate_ana25_mac_tmp19 NOT BJTDMY
ngate_ana25_mac_tmp21 = ngate_ana25_mac_tmp20 NOT DIODMY
ngate_ana25_mac_tmp22 = ngate_ana25_mac_tmp21 NOT RPDMY
ngate_ana25_mac_tmp23 = ngate_ana25_mac_tmp22 NOT HVD_N
ngate_ana25_mac_tmp24 = ngate_ana25_mac_tmp23 NOT HVD_P
ngate_ana25_mac_tmp25 = ngate_ana25_mac_tmp24 NOT ULP_WR
ngate_ana25_mac_tmp26 = ngate_ana25_mac_tmp25 NOT OD25_33
ngate_ana25_mac_tmp27 = ngate_ana25_mac_tmp26 NOT OD25_18
ngate_ana25_mac_tmp28 = ngate_ana25_mac_tmp27 NOT RPDMY
ngate_ana25_mac_tmp29 = ngate_ana25_mac_tmp28 AND ANALOG
ngate_ana25_mac_tmp30 = ngate_ana25_mac_tmp29 NOT FGDDMY
ngate_ana25_mac_tmp31 = ngate_ana25_mac_tmp30 NOT SERPDMY
ngate_ana25_mac_tmp32 = ngate_ana25_mac_tmp31 NOT JNW
ngate_ana25_mac_tmp33 = ngate_ana25_mac_tmp32 NOT JDMY
ngate_ana25_mac_tmp34 = ngate_ana25_mac_tmp33 NOT HVJDMY
ngate_ana25_mac_tmp35 = ngate_ana25_mac_tmp34 NOT SBDDMY
ngate_ana25_mac = ngate_ana25_mac_tmp35 AND MAC


//* Define device -- nmos nch_25_fgd_mac

//* Define layer -- ngate_25_fgd_mac_1
ngate_25_fgd_mac_1_tmp01 = gatennw NOT DNW
ngate_25_fgd_mac_1_tmp02 = ngate_25_fgd_mac_1_tmp01 NOT NT_N
ngate_25_fgd_mac_1_tmp03 = ngate_25_fgd_mac_1_tmp02 AND OD25
ngate_25_fgd_mac_1_tmp04 = ngate_25_fgd_mac_1_tmp03 NOT OD18
ngate_25_fgd_mac_1_tmp05 = ngate_25_fgd_mac_1_tmp04 NOT EHVT_N
ngate_25_fgd_mac_1_tmp06 = ngate_25_fgd_mac_1_tmp05 NOT EHVT_P
ngate_25_fgd_mac_1_tmp07 = ngate_25_fgd_mac_1_tmp06 NOT VTH_N
ngate_25_fgd_mac_1_tmp08 = ngate_25_fgd_mac_1_tmp07 NOT VTH_P
ngate_25_fgd_mac_1_tmp09 = ngate_25_fgd_mac_1_tmp08 NOT VTL_N
ngate_25_fgd_mac_1_tmp10 = ngate_25_fgd_mac_1_tmp09 NOT VTL_P
ngate_25_fgd_mac_1_tmp11 = ngate_25_fgd_mac_1_tmp10 NOT ELVT_N
ngate_25_fgd_mac_1_tmp12 = ngate_25_fgd_mac_1_tmp11 NOT ELVT_P
ngate_25_fgd_mac_1_tmp13 = ngate_25_fgd_mac_1_tmp12 NOT CORELDD_IO
ngate_25_fgd_mac_1_tmp14 = ngate_25_fgd_mac_1_tmp13 NOT RPO
ngate_25_fgd_mac_1_tmp15 = ngate_25_fgd_mac_1_tmp14 NOT RH
ngate_25_fgd_mac_1_tmp16 = ngate_25_fgd_mac_1_tmp15 NOT NWDMY
ngate_25_fgd_mac_1_tmp17 = ngate_25_fgd_mac_1_tmp16 NOT VAR
ngate_25_fgd_mac_1_tmp18 = ngate_25_fgd_mac_1_tmp17 NOT BJTDMY
ngate_25_fgd_mac_1_tmp19 = ngate_25_fgd_mac_1_tmp18 NOT DIODMY
ngate_25_fgd_mac_1_tmp20 = ngate_25_fgd_mac_1_tmp19 NOT RPDMY
ngate_25_fgd_mac_1_tmp21 = ngate_25_fgd_mac_1_tmp20 NOT HVD_N
ngate_25_fgd_mac_1_tmp22 = ngate_25_fgd_mac_1_tmp21 NOT HVD_P
ngate_25_fgd_mac_1_tmp23 = ngate_25_fgd_mac_1_tmp22 NOT ULP_WR
ngate_25_fgd_mac_1_tmp24 = ngate_25_fgd_mac_1_tmp23 NOT OD25_33
ngate_25_fgd_mac_1_tmp25 = ngate_25_fgd_mac_1_tmp24 NOT OD25_18
ngate_25_fgd_mac_1_tmp26 = ngate_25_fgd_mac_1_tmp25 NOT RPDMY
ngate_25_fgd_mac_1_tmp27 = ngate_25_fgd_mac_1_tmp26 NOT ANALOG
ngate_25_fgd_mac_1_tmp28 = ngate_25_fgd_mac_1_tmp27 AND FGDDMY
ngate_25_fgd_mac_1_tmp29 = ngate_25_fgd_mac_1_tmp28 NOT SERPDMY
ngate_25_fgd_mac_1_tmp30 = ngate_25_fgd_mac_1_tmp29 NOT JNW
ngate_25_fgd_mac_1_tmp31 = ngate_25_fgd_mac_1_tmp30 NOT JDMY
ngate_25_fgd_mac_1_tmp32 = ngate_25_fgd_mac_1_tmp31 NOT HVJDMY
ngate_25_fgd_mac_1_tmp33 = ngate_25_fgd_mac_1_tmp32 NOT SBDDMY
ngate_25_fgd_mac_1 = ngate_25_fgd_mac_1_tmp33 AND MAC

ngate_25_fgd_mac_2 = ngate_25_fgd_mac_1 INTERACT NP 
ngate_25_fgd_mac = ngate_25_fgd_mac_2 INTERACT PP 

//* Define device -- nmos nch_25_ngd_mac

//* Define layer -- ngate_25_ngd_mac_1
ngate_25_ngd_mac_1_tmp01 = gatennw NOT DNW
ngate_25_ngd_mac_1_tmp02 = ngate_25_ngd_mac_1_tmp01 NOT NT_N
ngate_25_ngd_mac_1_tmp03 = ngate_25_ngd_mac_1_tmp02 AND OD25
ngate_25_ngd_mac_1_tmp04 = ngate_25_ngd_mac_1_tmp03 NOT OD18
ngate_25_ngd_mac_1_tmp05 = ngate_25_ngd_mac_1_tmp04 NOT EHVT_N
ngate_25_ngd_mac_1_tmp06 = ngate_25_ngd_mac_1_tmp05 NOT EHVT_P
ngate_25_ngd_mac_1_tmp07 = ngate_25_ngd_mac_1_tmp06 NOT VTH_N
ngate_25_ngd_mac_1_tmp08 = ngate_25_ngd_mac_1_tmp07 NOT VTH_P
ngate_25_ngd_mac_1_tmp09 = ngate_25_ngd_mac_1_tmp08 NOT VTL_N
ngate_25_ngd_mac_1_tmp10 = ngate_25_ngd_mac_1_tmp09 NOT VTL_P
ngate_25_ngd_mac_1_tmp11 = ngate_25_ngd_mac_1_tmp10 NOT ELVT_N
ngate_25_ngd_mac_1_tmp12 = ngate_25_ngd_mac_1_tmp11 NOT ELVT_P
ngate_25_ngd_mac_1_tmp13 = ngate_25_ngd_mac_1_tmp12 NOT CORELDD_IO
ngate_25_ngd_mac_1_tmp14 = ngate_25_ngd_mac_1_tmp13 NOT RPO
ngate_25_ngd_mac_1_tmp15 = ngate_25_ngd_mac_1_tmp14 NOT RH
ngate_25_ngd_mac_1_tmp16 = ngate_25_ngd_mac_1_tmp15 NOT NWDMY
ngate_25_ngd_mac_1_tmp17 = ngate_25_ngd_mac_1_tmp16 NOT VAR
ngate_25_ngd_mac_1_tmp18 = ngate_25_ngd_mac_1_tmp17 NOT BJTDMY
ngate_25_ngd_mac_1_tmp19 = ngate_25_ngd_mac_1_tmp18 NOT DIODMY
ngate_25_ngd_mac_1_tmp20 = ngate_25_ngd_mac_1_tmp19 NOT RPDMY
ngate_25_ngd_mac_1_tmp21 = ngate_25_ngd_mac_1_tmp20 NOT HVD_N
ngate_25_ngd_mac_1_tmp22 = ngate_25_ngd_mac_1_tmp21 NOT HVD_P
ngate_25_ngd_mac_1_tmp23 = ngate_25_ngd_mac_1_tmp22 NOT ULP_WR
ngate_25_ngd_mac_1_tmp24 = ngate_25_ngd_mac_1_tmp23 NOT OD25_33
ngate_25_ngd_mac_1_tmp25 = ngate_25_ngd_mac_1_tmp24 NOT OD25_18
ngate_25_ngd_mac_1_tmp26 = ngate_25_ngd_mac_1_tmp25 NOT RPDMY
ngate_25_ngd_mac_1_tmp27 = ngate_25_ngd_mac_1_tmp26 NOT ANALOG
ngate_25_ngd_mac_1_tmp28 = ngate_25_ngd_mac_1_tmp27 AND FGDDMY
ngate_25_ngd_mac_1_tmp29 = ngate_25_ngd_mac_1_tmp28 NOT SERPDMY
ngate_25_ngd_mac_1_tmp30 = ngate_25_ngd_mac_1_tmp29 NOT JNW
ngate_25_ngd_mac_1_tmp31 = ngate_25_ngd_mac_1_tmp30 NOT JDMY
ngate_25_ngd_mac_1_tmp32 = ngate_25_ngd_mac_1_tmp31 NOT HVJDMY
ngate_25_ngd_mac_1_tmp33 = ngate_25_ngd_mac_1_tmp32 NOT SBDDMY
ngate_25_ngd_mac_1 = ngate_25_ngd_mac_1_tmp33 AND MAC

ngate_25_ngd_mac_2 = ngate_25_ngd_mac_1 INTERACT NP 
ngate_25_ngd_mac = ngate_25_ngd_mac_2 NOT INTERACT PP 

//* Define device -- nmos nch_25_dnw
dngate_25a = ngate_25b AND DNW 
dngate_25_org1 = dngate_25a NOT VTL_N 
dngate_25_org = dngate_25_org1 NOT VTL_N25 
dngate_25ud1a = dngate_25_org AND OD25_18 
dngate_25z = dngate_25_org NOT dngate_25ud1a 
dngate_25od1a = dngate_25_org AND OD25_33 
dngate_25y1 = dngate_25z NOT dngate_25od1a 
dngate_25y = dngate_25y1 NOT IP 
dngate_25x1 = dngate_25y NOT ANALOG 
dngate_25x = dngate_25x1 NOT FGDDMY 
dngate_25 = dngate_25x NOT MAC  //  2.5v NMOS on DNW

//* Define device -- nmos nch_25_dnw_mac
dngate_25_mac = dngate_25x AND MAC  //  2.5v NMOS on DNW MAC

//* Define device -- nmos nch_25ud18_dnw
dngate_25ud1 = dngate_25ud1a NOT IP 
dngate_25ud2 = COPY dngate_25ud1 
dngate_25ud = dngate_25ud2 NOT MAC  //  2.5v NMOS on DNW under_drive 1.8v

//* Define device -- nmos nch_25ud18_dnw_mac
dngate_25ud_mac = dngate_25ud2 AND MAC  //  2.5v NMOS on DNW under_drive 1.8v MAC

//* Define device -- nmos nch_25od33_dnw
dngate_25od1 = dngate_25od1a NOT IP 
dngate_25od2 = COPY dngate_25od1 
dngate_25od = dngate_25od2 NOT MAC  //  2.5v NMOS on DNW over_drive 3.3v

//* Define device -- nmos nch_25od33_dnw_mac
dngate_25od_mac = dngate_25od2 AND MAC  //  2.5v NMOS on DNW over_drive 3.3v MAC

//* Define device -- nmos nch_ana25_dnw_mac

//* Define layer -- dngate_ana25_mac
dngate_ana25_mac_tmp01 = gatennw AND DNW
dngate_ana25_mac_tmp02 = dngate_ana25_mac_tmp01 NOT NT_N
dngate_ana25_mac_tmp03 = dngate_ana25_mac_tmp02 AND OD25
dngate_ana25_mac_tmp04 = dngate_ana25_mac_tmp03 NOT OD18
dngate_ana25_mac_tmp05 = dngate_ana25_mac_tmp04 NOT EHVT_N
dngate_ana25_mac_tmp06 = dngate_ana25_mac_tmp05 NOT EHVT_P
dngate_ana25_mac_tmp07 = dngate_ana25_mac_tmp06 NOT VTH_N
dngate_ana25_mac_tmp08 = dngate_ana25_mac_tmp07 NOT VTH_P
dngate_ana25_mac_tmp09 = dngate_ana25_mac_tmp08 NOT VTL_N
dngate_ana25_mac_tmp10 = dngate_ana25_mac_tmp09 NOT VTL_P
dngate_ana25_mac_tmp11 = dngate_ana25_mac_tmp10 NOT ELVT_N
dngate_ana25_mac_tmp12 = dngate_ana25_mac_tmp11 NOT ELVT_P
dngate_ana25_mac_tmp13 = dngate_ana25_mac_tmp12 NOT CORELDD_IO
dngate_ana25_mac_tmp14 = dngate_ana25_mac_tmp13 AND NP
dngate_ana25_mac_tmp15 = dngate_ana25_mac_tmp14 NOT PP
dngate_ana25_mac_tmp16 = dngate_ana25_mac_tmp15 NOT RPO
dngate_ana25_mac_tmp17 = dngate_ana25_mac_tmp16 NOT RH
dngate_ana25_mac_tmp18 = dngate_ana25_mac_tmp17 NOT NWDMY
dngate_ana25_mac_tmp19 = dngate_ana25_mac_tmp18 NOT VAR
dngate_ana25_mac_tmp20 = dngate_ana25_mac_tmp19 NOT BJTDMY
dngate_ana25_mac_tmp21 = dngate_ana25_mac_tmp20 NOT DIODMY
dngate_ana25_mac_tmp22 = dngate_ana25_mac_tmp21 NOT RPDMY
dngate_ana25_mac_tmp23 = dngate_ana25_mac_tmp22 NOT HVD_N
dngate_ana25_mac_tmp24 = dngate_ana25_mac_tmp23 NOT HVD_P
dngate_ana25_mac_tmp25 = dngate_ana25_mac_tmp24 NOT ULP_WR
dngate_ana25_mac_tmp26 = dngate_ana25_mac_tmp25 NOT OD25_33
dngate_ana25_mac_tmp27 = dngate_ana25_mac_tmp26 NOT OD25_18
dngate_ana25_mac_tmp28 = dngate_ana25_mac_tmp27 NOT RPDMY
dngate_ana25_mac_tmp29 = dngate_ana25_mac_tmp28 AND ANALOG
dngate_ana25_mac_tmp30 = dngate_ana25_mac_tmp29 NOT FGDDMY
dngate_ana25_mac_tmp31 = dngate_ana25_mac_tmp30 NOT SERPDMY
dngate_ana25_mac_tmp32 = dngate_ana25_mac_tmp31 NOT JNW
dngate_ana25_mac_tmp33 = dngate_ana25_mac_tmp32 NOT JDMY
dngate_ana25_mac_tmp34 = dngate_ana25_mac_tmp33 NOT HVJDMY
dngate_ana25_mac_tmp35 = dngate_ana25_mac_tmp34 NOT SBDDMY
dngate_ana25_mac = dngate_ana25_mac_tmp35 AND MAC


//* Define device -- nmos nch_25_fgd_dnw_mac

//* Define layer -- dngate_25_fgd_mac_1
dngate_25_fgd_mac_1_tmp01 = gatennw AND DNW
dngate_25_fgd_mac_1_tmp02 = dngate_25_fgd_mac_1_tmp01 NOT NT_N
dngate_25_fgd_mac_1_tmp03 = dngate_25_fgd_mac_1_tmp02 AND OD25
dngate_25_fgd_mac_1_tmp04 = dngate_25_fgd_mac_1_tmp03 NOT OD18
dngate_25_fgd_mac_1_tmp05 = dngate_25_fgd_mac_1_tmp04 NOT EHVT_N
dngate_25_fgd_mac_1_tmp06 = dngate_25_fgd_mac_1_tmp05 NOT EHVT_P
dngate_25_fgd_mac_1_tmp07 = dngate_25_fgd_mac_1_tmp06 NOT VTH_N
dngate_25_fgd_mac_1_tmp08 = dngate_25_fgd_mac_1_tmp07 NOT VTH_P
dngate_25_fgd_mac_1_tmp09 = dngate_25_fgd_mac_1_tmp08 NOT VTL_N
dngate_25_fgd_mac_1_tmp10 = dngate_25_fgd_mac_1_tmp09 NOT VTL_P
dngate_25_fgd_mac_1_tmp11 = dngate_25_fgd_mac_1_tmp10 NOT ELVT_N
dngate_25_fgd_mac_1_tmp12 = dngate_25_fgd_mac_1_tmp11 NOT ELVT_P
dngate_25_fgd_mac_1_tmp13 = dngate_25_fgd_mac_1_tmp12 NOT CORELDD_IO
dngate_25_fgd_mac_1_tmp14 = dngate_25_fgd_mac_1_tmp13 NOT RPO
dngate_25_fgd_mac_1_tmp15 = dngate_25_fgd_mac_1_tmp14 NOT RH
dngate_25_fgd_mac_1_tmp16 = dngate_25_fgd_mac_1_tmp15 NOT NWDMY
dngate_25_fgd_mac_1_tmp17 = dngate_25_fgd_mac_1_tmp16 NOT VAR
dngate_25_fgd_mac_1_tmp18 = dngate_25_fgd_mac_1_tmp17 NOT BJTDMY
dngate_25_fgd_mac_1_tmp19 = dngate_25_fgd_mac_1_tmp18 NOT DIODMY
dngate_25_fgd_mac_1_tmp20 = dngate_25_fgd_mac_1_tmp19 NOT RPDMY
dngate_25_fgd_mac_1_tmp21 = dngate_25_fgd_mac_1_tmp20 NOT HVD_N
dngate_25_fgd_mac_1_tmp22 = dngate_25_fgd_mac_1_tmp21 NOT HVD_P
dngate_25_fgd_mac_1_tmp23 = dngate_25_fgd_mac_1_tmp22 NOT ULP_WR
dngate_25_fgd_mac_1_tmp24 = dngate_25_fgd_mac_1_tmp23 NOT OD25_33
dngate_25_fgd_mac_1_tmp25 = dngate_25_fgd_mac_1_tmp24 NOT OD25_18
dngate_25_fgd_mac_1_tmp26 = dngate_25_fgd_mac_1_tmp25 NOT RPDMY
dngate_25_fgd_mac_1_tmp27 = dngate_25_fgd_mac_1_tmp26 NOT ANALOG
dngate_25_fgd_mac_1_tmp28 = dngate_25_fgd_mac_1_tmp27 AND FGDDMY
dngate_25_fgd_mac_1_tmp29 = dngate_25_fgd_mac_1_tmp28 NOT SERPDMY
dngate_25_fgd_mac_1_tmp30 = dngate_25_fgd_mac_1_tmp29 NOT JNW
dngate_25_fgd_mac_1_tmp31 = dngate_25_fgd_mac_1_tmp30 NOT JDMY
dngate_25_fgd_mac_1_tmp32 = dngate_25_fgd_mac_1_tmp31 NOT HVJDMY
dngate_25_fgd_mac_1_tmp33 = dngate_25_fgd_mac_1_tmp32 NOT SBDDMY
dngate_25_fgd_mac_1 = dngate_25_fgd_mac_1_tmp33 AND MAC

dngate_25_fgd_mac_2 = dngate_25_fgd_mac_1 INTERACT NP 
dngate_25_fgd_mac = dngate_25_fgd_mac_2 INTERACT PP 

//* Define device -- nmos nch_25_ngd_dnw_mac

//* Define layer -- dngate_25_ngd_mac_1
dngate_25_ngd_mac_1_tmp01 = gatennw AND DNW
dngate_25_ngd_mac_1_tmp02 = dngate_25_ngd_mac_1_tmp01 NOT NT_N
dngate_25_ngd_mac_1_tmp03 = dngate_25_ngd_mac_1_tmp02 AND OD25
dngate_25_ngd_mac_1_tmp04 = dngate_25_ngd_mac_1_tmp03 NOT OD18
dngate_25_ngd_mac_1_tmp05 = dngate_25_ngd_mac_1_tmp04 NOT EHVT_N
dngate_25_ngd_mac_1_tmp06 = dngate_25_ngd_mac_1_tmp05 NOT EHVT_P
dngate_25_ngd_mac_1_tmp07 = dngate_25_ngd_mac_1_tmp06 NOT VTH_N
dngate_25_ngd_mac_1_tmp08 = dngate_25_ngd_mac_1_tmp07 NOT VTH_P
dngate_25_ngd_mac_1_tmp09 = dngate_25_ngd_mac_1_tmp08 NOT VTL_N
dngate_25_ngd_mac_1_tmp10 = dngate_25_ngd_mac_1_tmp09 NOT VTL_P
dngate_25_ngd_mac_1_tmp11 = dngate_25_ngd_mac_1_tmp10 NOT ELVT_N
dngate_25_ngd_mac_1_tmp12 = dngate_25_ngd_mac_1_tmp11 NOT ELVT_P
dngate_25_ngd_mac_1_tmp13 = dngate_25_ngd_mac_1_tmp12 NOT CORELDD_IO
dngate_25_ngd_mac_1_tmp14 = dngate_25_ngd_mac_1_tmp13 NOT RPO
dngate_25_ngd_mac_1_tmp15 = dngate_25_ngd_mac_1_tmp14 NOT RH
dngate_25_ngd_mac_1_tmp16 = dngate_25_ngd_mac_1_tmp15 NOT NWDMY
dngate_25_ngd_mac_1_tmp17 = dngate_25_ngd_mac_1_tmp16 NOT VAR
dngate_25_ngd_mac_1_tmp18 = dngate_25_ngd_mac_1_tmp17 NOT BJTDMY
dngate_25_ngd_mac_1_tmp19 = dngate_25_ngd_mac_1_tmp18 NOT DIODMY
dngate_25_ngd_mac_1_tmp20 = dngate_25_ngd_mac_1_tmp19 NOT RPDMY
dngate_25_ngd_mac_1_tmp21 = dngate_25_ngd_mac_1_tmp20 NOT HVD_N
dngate_25_ngd_mac_1_tmp22 = dngate_25_ngd_mac_1_tmp21 NOT HVD_P
dngate_25_ngd_mac_1_tmp23 = dngate_25_ngd_mac_1_tmp22 NOT ULP_WR
dngate_25_ngd_mac_1_tmp24 = dngate_25_ngd_mac_1_tmp23 NOT OD25_33
dngate_25_ngd_mac_1_tmp25 = dngate_25_ngd_mac_1_tmp24 NOT OD25_18
dngate_25_ngd_mac_1_tmp26 = dngate_25_ngd_mac_1_tmp25 NOT RPDMY
dngate_25_ngd_mac_1_tmp27 = dngate_25_ngd_mac_1_tmp26 NOT ANALOG
dngate_25_ngd_mac_1_tmp28 = dngate_25_ngd_mac_1_tmp27 AND FGDDMY
dngate_25_ngd_mac_1_tmp29 = dngate_25_ngd_mac_1_tmp28 NOT SERPDMY
dngate_25_ngd_mac_1_tmp30 = dngate_25_ngd_mac_1_tmp29 NOT JNW
dngate_25_ngd_mac_1_tmp31 = dngate_25_ngd_mac_1_tmp30 NOT JDMY
dngate_25_ngd_mac_1_tmp32 = dngate_25_ngd_mac_1_tmp31 NOT HVJDMY
dngate_25_ngd_mac_1_tmp33 = dngate_25_ngd_mac_1_tmp32 NOT SBDDMY
dngate_25_ngd_mac_1 = dngate_25_ngd_mac_1_tmp33 AND MAC

dngate_25_ngd_mac_2 = dngate_25_ngd_mac_1 INTERACT NP 
dngate_25_ngd_mac = dngate_25_ngd_mac_2 NOT INTERACT PP 

//* Define device -- nmos nch_dnw_mac
nrgate_mac = nrgate_org6a AND MAC 

//* Define device -- nmos nch_hvt_dnw_mac
n1hvgate_mac = n1hvgate_org AND MAC  //  CORE HIGH_VT NMOS on DNW MAC

//* Define device -- nmos nch_18_mac
ngate_18_mac = ngate_18z AND MAC  //  1.8v NMOS MAC

//* Define device -- nmos nch_18_dnw_mac
dngate_18_mac = dngate_18z AND MAC  //  1.8v NMOS on DNW MAC

//* Define device -- nmos nch_18ud15
ngate_18ud1 = ngate_18ud1a NOT IP 
ngate_18ud = ngate_18ud1 NOT MAC  //  1.8v under-drive 1.5v NMOS

//* Define device -- nmos nch_18ud15_mac
ngate_18ud_mac = ngate_18ud1 AND MAC  //  1.8v under-drive 1.5v NMOS MAC 

//* Define device -- nmos nch_18ud15_dnw
dngate_18ud1 = dngate_18ud1a NOT IP 
dngate_18ud = dngate_18ud1 NOT MAC  //  1.8v under-drive 1.5v NMOS on DNW 

//* Define device -- nmos nch_18ud15_dnw_mac
dngate_18ud_mac = dngate_18ud1 AND MAC  //  1.8v under-drive 1.5v NMOS on DNW MAC

//* Define device -- nmos nch_na25
ngate_25na1 = ngate_25a AND NT_N 
ngate_25na2 = ngate_25na1 NOT VTL_N 
ngate_25na_org = ngate_25na2 NOT DNW 
ngate_25naud1a = ngate_25na_org AND OD25_18 
ngate_25naz = ngate_25na_org NOT ngate_25naud1a 
ngate_25naod1a = ngate_25na_org AND OD25_33 
ngate_25nay = ngate_25naz NOT ngate_25naod1a 
ngate_25nay1 = ngate_25nay NOT IP 
ngate_25nay2 = ngate_25nay1 NOT LP_NTN 
ngate_25na = ngate_25nay2 NOT MAC  //  2.5v Native NMOS

//* Define device -- nmos nch_na25_mac
ngate_25na_mac = ngate_25nay2 AND MAC  //  2.5v Native NMOS MAC

//* Define device -- nmos nch_na25ud18
ngate_25naud1 = ngate_25naud1a NOT IP 
ngate_25naud2 = ngate_25naud1 NOT LP_NTN 
ngate_25naud = ngate_25naud2 NOT MAC  //  2.5v Native NMOS under_drive 1.8v

//* Define device -- nmos nch_na25ud18_mac
ngate_25naud_mac = ngate_25naud2 AND MAC  //  2.5v Native NMOS under_drive 1.8v MAC

//* Define device -- nmos nch_na25od33
ngate_25naod1 = ngate_25naod1a NOT IP 
ngate_25naod2 = ngate_25naod1 NOT LP_NTN 
ngate_25naod = ngate_25naod2 NOT MAC  //  2.5v Native NMOS over_drive 3.3v

//* Define device -- nmos nch_na25od33_mac
ngate_25naod_mac = ngate_25naod2 AND MAC  //  2.5v Native NMOS over_drive 3.3v MAC

//* Define device -- nmos nch_na18
ngate_18na1 = ngate_18a AND NT_N 
ngate_18na2 = ngate_18na1 NOT VTL_N_18 
ngate_18na3 = ngate_18na2 NOT VTL_N 
ngate_18na4 = ngate_18na3 NOT DNW 
ngate_18na_orga = ngate_18na4 NOT OD18_15 
ngate_18na_org = ngate_18na_orga NOT IP 
ngate_18na = ngate_18na_org NOT MAC  //  1.8v Native NMOS

//* Define device -- nmos nch_na18_mac
ngate_18na_mac = ngate_18na_org AND MAC  //  1.8v Native NMOS MAC

//* Define device -- pmos pch
tpgate1 = gatenw AND PP 
tpgate2a = tpgate1 NOT OD_50F 
tpgate2 = tpgate2a NOT OD_HV 
tpgate21 = tpgate2 NOT LMIN_OS 
tpgate22 = tpgate21 NOT LMIN_OS_SG 
tpgate3 = tpgate22 NOT OD25 
tpgate4 = tpgate3 NOT OD33 
tpgate5 = tpgate4 NOT OD18 
tpgate6 = tpgate5 NOT OD_12 
plvgate_org1 = tpgate6 AND VTL_P 
pgate1 = tpgate6 NOT plvgate_org1 
phvgate1 = tpgate6 AND VTH_P 
pgate2 = pgate1 NOT phvgate1 
tpgate7 = tpgate4 NOT OD1T 
peuvgate_org1 = tpgate7 AND VTUL_P_EDM 
pgate3 = pgate2 NOT peuvgate_org1 
pgate4 = pgate3 NOT ILVT 
pgate5 = pgate4 NOT OD1T 
pgate6 = pgate5 NOT DCO 
pgate8 = pgate6 NOT POSall 
pgate9 = pgate8 NOT CORELDD_IO 
pgate10 = pgate9 NOT IP 
pgate11 = pgate10 NOT VTUL_P 
pgate12 = pgate11 NOT EHVT_P 
pgate13 = pgate12 NOT ELVT_P 
pgate14 = COPY pgate13 
pgate = pgate14 NOT MAC  //  CORE PMOS

//* Define device -- pmos pch_mac
pgate_mac = pgate14 AND MAC  //  CORE PMOS MAC

//* Define device -- pmos pch_ehvt
pehvgate1 = pgate10 AND EHVT_P 
pehvgate2 = pehvgate1 NOT VTUL_P 
pehvgate3 = pehvgate2 NOT ELVT_P 
pehvgate4 = pehvgate3 NOT DCO_LPP 
pehvgate5 = COPY pehvgate4 
pehvgate = pehvgate5 NOT MAC  //  1.1V Extreme High-Vt PMOS

//* Define device -- pmos pch_ehvt_mac
pehvgate_mac = pehvgate5 AND MAC  //  1.1V Extreme High-Vt PMOS MAC

//* Define device -- pmos pchpu_sr
gatenw_s = gate_s5 AND nxwell  //  gate inside nwell
pgate_s1 = gatenw_s AND PP 
pgate_s2 = pgate_s1 NOT OD25 
pgate_s3 = pgate_s2 NOT OD33 
pgate_s4 = pgate_s3 NOT OD18 
pgate_s5 = pgate_s4 NOT VTL_P 
pgate_s6 = pgate_s5 NOT VTUL_P_EDM 
pgate_s7 = pgate_s6 NOT VTH_P  //  SRAM PMOS
pgate_s71 = pgate_s7 NOT srm_dp 
pgate_s8 = pgate_s71 NOT DCO 
pgate_sx = pgate_s8 AND srm_imp 
pgate_s = pgate_sx NOT SRM_ULL  //  SRAM PMOS sp

//* Define device -- pmos pchpu_ullsr
pgate_sull = pgate_sx AND SRM_ULL 
pgate_s_ull = pgate_sull AND SRMLOP_D4  //  SRAM PMOS sp ull

//* Define device -- pmos pchpu_ull10ttpsr
pgate_s_ull10ttp = pgate_sull AND SRMLOP_D8  //  SRAM PMOS sp ull10ttp

//* Define device -- pmos pchpu_ncisr
pgate_snci_1 = pgate_s8 NOT srm_imp  //  SRAM PMOS sp nci
pgate_snci = pgate_snci_1 NOT SRM_ULL  //  SRAM PMOS sp nci

//* Define device -- pmos pchpu_dpncisr
pgate_s9 = pgate_s7 AND srm_dp 
pgate_sdpnci = pgate_s9 NOT srm_imp  //  SRAM PMOS dp nci 

//* Define device -- pmos pch_elvt
pelvgate1 = pgate10 AND ELVT_P 
pelvgate2 = pelvgate1 NOT VTUL_P 
pelvgate3 = pelvgate2 NOT EHVT_P 
pelvgate4 = pelvgate3 NOT DCO_LPP 
pelvgate5 = COPY pelvgate4 
pelvgate = pelvgate5 NOT MAC  //  1.1V Extreme Low-Vt PMOS

//* Define device -- pmos pch_elvt_mac
pelvgate_mac = pelvgate5 AND MAC  //  1.1V Extreme Low-Vt PMOS MAC

//* Define device -- pmos pchpu_ullhcsr
pgate_sullhc = pgate_sull AND SRMLOP_D3 

//* Define device -- pmos pch_lvt
plvgate_org21 = plvgate_org1 NOT VTL_P25 
plvgate_org2 = plvgate_org21 NOT DCO 
plvgate_org3 = plvgate_org2 NOT POSall 
plvgate_org4 = plvgate_org3 NOT IP 
plvgate_org = COPY plvgate_org4 
plvgate = plvgate_org NOT MAC  //  CORE LOW_VT PMOS

//* Define device -- pmos pch_lvt_mac
plvgate_mac = plvgate_org AND MAC  //  CORE LOW_VT PMOS MAC

//* Define device -- pmos pch_avt
pgate_avt1 = pgate8 AND CORELDD_IO 
pgate_avt = pgate_avt1 NOT MAC  //  AVT PMOS

//* Define device -- pmos pch_avt_mac
pgate_avt_mac = pgate_avt1 AND MAC  //  AVT PMOS MAC

//* Define device -- pmos pch_hvt
phvgate_org_a = phvgate1 NOT POSall 
phvgate_org = phvgate_org_a NOT IP 
phvgate = phvgate_org NOT MAC  //  CORE HIGH_VT PMOS

//* Define device -- pmos pch_18
pgate_18a1 = tpgate1 AND OD18 
pgate_18a2 = pgate_18a1 NOT OD25 
pgate_18a3 = pgate_18a2 NOT OD33 
pgate_18a4 = pgate_18a3 NOT OD_12 
pgate_18a = pgate_18a4 NOT OD_50F 
pgate_18_org1 = pgate_18a NOT VTL_P 
pgate_18_org2 = pgate_18_org1 NOT VTL_P25 
pgate_18_org = pgate_18_org2 NOT INTERACT HVD_P 
pgate_18ud1a = pgate_18_org AND OD18_15 
pgate_18z1 = pgate_18_org NOT pgate_18ud1a 
pgate_18z = pgate_18z1 NOT IP 
pgate_18 = pgate_18z NOT MAC  //  1.8v PMOS

//* Define device -- pmos pch_18ud15
pgate_18ud1 = pgate_18ud1a NOT IP 
pgate_18ud = pgate_18ud1 NOT MAC  //  1.8v under-drive 1.5v PMOS

//* Define device -- pmos pch_18ud15_mac
pgate_18ud_mac = pgate_18ud1 AND MAC  //  1.8v under-drive 1.5v PMOS MAC

//* Define device -- pmos pch_25
pgate_25a1 = tpgate1 AND OD25 
pgate_25a2 = pgate_25a1 NOT OD18 
pgate_25a3 = pgate_25a2 NOT OD33 
pgate_25a4 = pgate_25a3 NOT OD_12 
pgate_25a = pgate_25a4 NOT OD_50F 
pgate_25_org1 = pgate_25a NOT VTL_P 
pgate_25_org2 = pgate_25_org1 NOT VTL_P25 
pgate_25_org = pgate_25_org2 NOT INTERACT HVD_P 
pgate_25ud1a = pgate_25_org AND OD25_18 
pgate_25z = pgate_25_org NOT pgate_25ud1a 
pgate_25od1a = pgate_25_org AND OD25_33 
pgate_25y1 = pgate_25z NOT pgate_25od1a 
pgate_25y2 = pgate_25y1 NOT IP 
pgate_25y = COPY pgate_25y2 
pgate_25 = pgate_25y NOT MAC  //  2.5v PMOS

//* Define device -- pmos pch_25_mac
pgate_25_mac = pgate_25y AND MAC  //  2.5v PMOS MAC

//* Define device -- pmos pch_25ud18
pgate_25ud1 = pgate_25ud1a NOT IP 
pgate_25ud2 = COPY pgate_25ud1 
pgate_25ud = pgate_25ud2 NOT MAC  //  2.5v PMOS under_drive 1.8v

//* Define device -- pmos pch_25ud18_mac
pgate_25ud_mac = pgate_25ud2 AND MAC  //  2.5v PMOS under_drive 1.8v MAC

//* Define device -- pmos pch_25od33
pgate_25od1 = pgate_25od1a NOT IP 
pgate_25od2 = COPY pgate_25od1 
pgate_25od = pgate_25od2 NOT MAC  //  2.5v PMOS over_drive 3.3v

//* Define device -- pmos pch_25od33_mac
pgate_25od_mac = pgate_25od2 AND MAC  //  2.5v PMOS over_drive 3.3v MAC

//* Define device -- pmos pch_hvt_mac
phvgate_mac = phvgate_org AND MAC  //  CORE HIGH_VT PMOS MAC

//* Define device -- pmos pch_18_mac
pgate_18_mac = pgate_18z AND MAC  //  1.8v PMOS MAC

//* Define device -- lddp pch_hv25_spw
pgate_hv25a = pgate_25_org1 INTERACT HVD_P 
pgate_hv25b = pgate_hv25a NOT OD18 
pgate_hv25c = pgate_hv25b NOT OD33 
pgate_hv25d = pgate_hv25c NOT VTH_P 
pgate_hv25e = pgate_hv25d NOT RPO 
pgate_hv25f = pgate_hv25e NOT RH 
pgate_hv25g = pgate_hv25f NOT NWDMY 
pgate_hv25h = pgate_hv25g NOT VAR 
pgate_hv25i = pgate_hv25h NOT BJTDMY 
pgate_hv25j = pgate_hv25i AND DNW  //  From IOLD's request to follow DRM.
pgate_hv25k = pgate_hv25j NOT HVDDMY 
pgate_hv25 = pgate_hv25k NOT MACi 

//***** Define connectivity/via layer -- s_tpdiff_hv ****
pplug1 = tpdiff1 AND psub 
pplug2a = pplug1 AND plug_sel 
TCDDMY_all1 = ICOVL OR TCDDMY_H 
TCDDMY_all = TCDDMY_all1 OR TCDDMY_V 
pplug2 = pplug2a NOT TCDDMY_all 
pplug_dmy1 = pplug1 NOT pplug2 
pplug_dmy = pplug_dmy1 NOT INTERACT psubband 
tpdiff_dmy1 = tpdiff1 INTERACT pplug_dmy 
vargt1_p = gatennw AND PP 
vargt2_p = vargt1_p AND VAR_noRF 
var_pw_rf1a = VAR_RF NOT nxwell 
od_rfvar1 = OD AND VAR_RF 
XJ_RF = VAR_RF1 NOT VAR_RF 
od_rfvar2 = OD AND XJ_RF 
od_rfvar3 = od_rfvar1 OR od_rfvar2 
od_rfvar4 = od_rfvar3 INTERACT ODI 
od_rfvar5 = od_rfvar3 NOT od_rfvar4 
od_rfvar = SIZE od_rfvar5 BY 0.005 
var_pw_rf1 = var_pw_rf1a NOT od_rfvar 
vargt_p_all = vargt2_p OR var_pw_rf1 
tpdiff_dmy = tpdiff_dmy1 NOT INTERACT vargt_p_all 
tpdiff_all = tpdiff1 NOT tpdiff_dmy 
s_tpdiff_hv_11 = tpdiff_all NOT HVD_P 
pgate_hv18a = pgate_18_org2 INTERACT HVD_P 
pgate_hv18b = pgate_hv18a NOT OD25 
pgate_hv18c = pgate_hv18b NOT OD33 
pgate_hv18d = pgate_hv18c NOT VTH_P 
pgate_hv18e = pgate_hv18d NOT RPO 
pgate_hv18f = pgate_hv18e NOT RH 
pgate_hv18g = pgate_hv18f NOT NWDMY 
pgate_hv18h = pgate_hv18g NOT VAR 
pgate_hv18i = pgate_hv18h NOT BJTDMY 
pgate_hv18 = pgate_hv18i AND DNW 
s_tpdiff_hv_reg1 = pgate_hv25 OR pgate_hv18 
pgate_hv25_mac = pgate_hv25k AND MACi 
s_tpdiff_hv_reg = s_tpdiff_hv_reg1 OR pgate_hv25_mac 
s_tpdiff_hv_1 = s_tpdiff_hv_11 INTERACT s_tpdiff_hv_reg 
pgate_demos_hv25a = pgate_hv25j AND HVDDMY 
pgate_demos_hv25_mac1 = pgate_demos_hv25a AND MACi 
pthin2_hv_d = pthin2 AND HVD_P 
pgate_demos_hv25_mac2 = pgate_demos_hv25_mac1 INTERACT pthin2_hv_d 
pthin2_hv_s1 = pthin2 NOT pgate_demos_hv25_mac2 
pthin2_hv_s = pthin2_hv_s1 NOT pthin2_hv_d 
pgate_demos_hv25_mac = pgate_demos_hv25_mac2 TOUCH pthin2_hv_s 
s_tpdiff_hv_2 = pthin2_hv_s TOUCH pgate_demos_hv25_mac 
s_tpdiff_hv = s_tpdiff_hv_1 OR s_tpdiff_hv_2 

//***** Define connectivity/via layer -- cgate ****
cgate2 = cgate1 INSIDE PO 
cgate3 = cgate2 AND NP 
cgate = cgate3 OUTSIDE CGCT 

//***** Define connectivity/via layer -- comso ****
cg_sd = tndiff1 AND fod 
comso1 = cg_sd AND HVII 
comso = comso1 NOT CG  //  common source of memory device

//***** Define connectivity/via layer -- cg_drain ****
cg_drain = cg_sd NOT comso  //  drain of control gate memory device

//***** Define connectivity/via layer -- wlgate ****
wlgate1 = gate AND MCEL 
wlgate2 = wlgate1 AND NP 
wlgate = wlgate2 OUTSIDE CO 

//* Define device -- xdev EG
fpo = PO AND MCEL 
eg1 = fpo AND HVII 
eg = eg1 NOT CG 
eg_r = eg AND comso 

//* Define device -- diode pdio
pdio1a = tpdiff_all AND DIODMY 
pdio1 = pdio1a NOT HIA_DUMMY 
pdio21 = pdio1 AND nxwell 
pdio2 = pdio21 NOT HVNW 
pdio31 = pdio2 NOT OD_50F 
pdio3 = pdio31 NOT OD25 
pdio4 = pdio3 NOT OD33 
pdio5 = pdio4 NOT OD18 
pdio6 = pdio5 NOT OD_12 
pdio8 = pdio6 NOT VTL_P 
cpdio10 = pdio8 NOT CORELDD_IO 
cpdio11 = cpdio10 NOT VTUL_P 
cpdio12 = cpdio11 NOT EHVT_P 
cpdio13 = cpdio12 NOT ELVT_P 
cpdio1 = cpdio13 NOT VTH_P 
cpdio21 = cpdio1 NOT ILVT 
cpdio2 = cpdio21 NOT VTUL_P_EDM 
cpdio3 = cpdio2 NOT OD1T 
cpdio = cpdio3 NOT DCO  //  CORE P+/NW DIODE

//* Define device -- diode ndio
ndio1a = tndiff_all AND DIODMY 
ndio1 = ndio1a NOT HIA_DUMMY 
ndio21 = ndio1 AND psub 
ndio22 = ndio21 NOT HVNW 
ndio23 = ndio22 NOT HVPW 
ndio2 = ndio23 NOT PSUBi 
ndio31 = ndio2 NOT OD25 
ndio3 = ndio31 NOT OD_50F 
ndio4 = ndio3 NOT OD33 
ndio5 = ndio4 NOT OD18 
ndio6 = ndio5 NOT OD_12 
ndio71 = ndio6 NOT VTZ_N 
ndio7 = ndio71 NOT NT_N 
ndio9 = ndio7 NOT VTL_N 
cndio11 = ndio9 NOT VTH_N 
cndio10 = cndio11 NOT CORELDD_IO 
cndio12 = cndio10 NOT VTUL_N 
cndio13 = cndio12 NOT EHVT_N 
cndio1 = cndio13 NOT ELVT_N 
cndio21 = cndio1 NOT ILVT 
cndio2 = cndio21 NOT VTUL_N_EDM 
cndio3 = cndio2 NOT OD1T 
cndio = cndio3 NOT DCO 

//* Define device -- diode nwdio
DIONW = DIODMY OUTSIDE tpdiff_all 
nwdio1 = DIONW AND nxwell 
cnwdio4 = nwdio1 NOT OD_50F 
cnwdio = cnwdio4 NOT DCO  //  CORE NW/PW diode

//* Define device -- diode pdio_hvt
pdioh = pdio6 AND VTH_P  //  CORE P+/NW HIGH_VT DIODE

//* Define device -- diode ndio_hvt
ndioh = ndio7 AND VTH_N  //  CORE N+/PW HIGH_VT DIODE

//* Define device -- diode ndio_lvt
ndiol1 = ndio7 AND VTL_N  //  CORE N+/PW LOW_VT DIODE
ndiol = ndiol1 NOT DCO  //  CORE N+/PW LOW_VT DIODE

//* Define device -- diode ndio_ehvt
ndioehv = ndio7 AND EHVT_N 

//* Define device -- diode pdio_ehvt
pdioehv = pdio6 AND EHVT_P 

//* Define device -- diode ndio_elvt
ndioelv = ndio7 AND ELVT_N 

//* Define device -- diode ndio_avt
ndioavt = ndio7 AND CORELDD_IO 

//* Define device -- diode pdio_elvt
pdioelv = pdio6 AND ELVT_P 

//* Define device -- diode pdio_avt
pdioavt = pdio6 AND CORELDD_IO 

//* Define device -- diode pdio_lvt
pdiol1 = pdio6 AND VTL_P  //  CORE P+/NW LOW_VT DIODE
pdiol = pdiol1 NOT DCO  //  CORE P+/NW LOW_VT DIODE

//* Define device -- diode pdio_18
ipdio_18_org = pdio2 AND OD18 
ipdio_18 = ipdio_18_org NOT OD18_15  //  1.8v P+/NW DIODE

//* Define device -- diode ndio_18
ndio_18a = ndio2 AND OD18 
indio_18_org = ndio_18a NOT NT_N 
indio_18 = indio_18_org NOT OD18_15  //  1.8v N+/PW diode

//* Define device -- diode pdio_18ud15
ipdio_18ud = ipdio_18_org AND OD18_15  //  1.8v P+/NW DIODE under_drive 1.5v

//* Define device -- diode ndio_18ud15
indio_18ud = indio_18_org AND OD18_15  //  1.8v N+/PW diode under_drive 1.5v

//* Define device -- diode pdio_25
pdio_25a1 = pdio2 AND OD25 
pdio_25a2 = pdio_25a1 NOT OD33 
pdio_25a3 = pdio_25a2 NOT OD18 
pdio_25a = pdio_25a3 NOT OD_50F 
ipdio_25_org1 = pdio_25a NOT VTL_P 
ipdio_25_org = ipdio_25_org1 NOT VTL_P25 
ipdio_25z = ipdio_25_org NOT OD25_18 
ipdio_25 = ipdio_25z NOT OD25_33  //  2.5v P+/NW DIODE

//* Define device -- diode ndio_25
ndio_25a = ndio2 AND OD25 
ndio_25b = ndio_25a NOT VTL_N25 
indio_25_org = ndio_25b NOT NT_N  //  2.5v N+/PW diode
indio_25z = indio_25_org NOT OD25_18 
indio_25 = indio_25z NOT OD25_33  //  2.5v N+/PW DIODE

//* Define device -- diode pdio_25ud18
ipdio_25ud = ipdio_25_org AND OD25_18  //  2.5v P+/NW DIODE under_drive 1.8v

//* Define device -- diode ndio_25ud18
indio_25ud = indio_25_org AND OD25_18  //  2.5v N+/PW DIODE under_drive 1.8v

//* Define device -- diode pdio_25od33
ipdio_25od = ipdio_25_org AND OD25_33  //  2.5v P+/NW DIODE over_drive 3.3v

//* Define device -- diode ndio_25od33
indio_25od = indio_25_org AND OD25_33  //  2.5v N+/PW DIODE under_drive 3.3v

//* Define device -- diode ndio_na
nndio1 = ndio6 AND NT_N 
cndion1 = nndio1 NOT VTH_N 
cndion2 = cndion1 NOT VTL_N 
cndion3 = cndion2 NOT DCO 
cndion4 = cndion3 NOT VTZ_N 
cndion5 = cndion4 NOT LP_NTN 
cndion = cndion5 NOT CORELDD_IO 

//* Define device -- diode ndio_naavt
cndion_av1 = ndio2 AND NT_N 
cndion_av2 = cndion_av1 NOT POI 
cndion_av3 = cndion_av2 NOT EHVT_N 
cndion_av4 = cndion_av3 NOT EHVT_P 
cndion_av5 = cndion_av4 NOT VTH_N 
cndion_av6 = cndion_av5 NOT VTH_P 
cndion_av7 = cndion_av6 NOT VTL_N 
cndion_av8 = cndion_av7 NOT VTL_P 
cndion_av9 = cndion_av8 NOT ELVT_N 
cndion_av10 = cndion_av9 NOT ELVT_P 
cndion_av11 = cndion_av10 AND CORELDD_IO 
cndion_av12 = cndion_av11 NOT RPO 
cndion_av13 = cndion_av12 NOT RH 
cndion_av14 = cndion_av13 NOT NWDMY 
cndion_av15 = cndion_av14 NOT VAR 
cndion_av16 = cndion_av15 NOT BJTDMY 
cndion_av17 = cndion_av16 NOT RPDMY 
cndion_av18 = cndion_av17 NOT HVD_N 
cndion_av19 = cndion_av18 NOT HVD_P 
cndion_av20 = cndion_av19 NOT ULP_WR 
cndion_av21 = cndion_av20 NOT OD25_33 
cndion_av = cndion_av21 NOT OD25_18 

//* Define device -- diode ndio_na25od33
ndio_25na1 = ndio_25b AND NT_N 
ndio_25od33na1 = ndio_25na1 AND OD25_33 
ndio_25od33na = ndio_25od33na1 NOT LP_NTN 

//* Define device -- diode ndio_na25ud18
ndio_25ud18na1 = ndio_25na1 AND OD25_18 
ndio_25ud18na = ndio_25ud18na1 NOT LP_NTN 

//* Define device -- diode ndio_na25
ndio_25na2 = ndio_25na1 NOT OD25_33 
ndio_25na3 = ndio_25na2 NOT OD25_18 
ndio_25na = ndio_25na3 NOT LP_NTN 

//* Define device -- diode ndio_na18
ndio_18na1 = ndio_18a AND NT_N 
ndio_18na2 = ndio_18na1 NOT OD18_15 
ndio_18na = ndio_18na2 NOT VTL_N_18  //  1.8v N+/PW native diode

//***** Define connectivity/via layer -- ydio_t ****
ydio_t = COPY ydio 

//* Define device -- bjt pnp10
ttdiff = tpdiff_all AND BJTDMY 
nbase1k = nxwell NOT INTERACT DNW 
nbase1 = nbase1k AND BJTDMY 
cnbase11 = nbase1 NOT OD25 
cnbase1 = cnbase11 NOT OD_50F  //  define CORE BJT[PV] base terminal
cemit1a = ttdiff AND cnbase1 
cemit1 = cemit1a INTERACT RPO  //  define CORE BJT[PV] emitter
cemit10_org = AREA cemit1  > 99.999  < 100.001 
cemit10 = cemit10_org NOT MAC 

//***** Define connectivity/via layer -- coll1 ****
collsur = psub TOUCH nbase1 
coll1a = collsur OR nbase1 
npnrg = DNW AND BJTDMY  //  define NPN region
nndiff = tndiff_all AND npnrg 
pbase1 = psub AND npnrg 
cpbase11 = pbase1 NOT OD25 
cpbase1 = cpbase11 NOT OD_50F  //  define CORE BJT[NV] base terminal
cnemit1a = nndiff AND cpbase1  //  define CORE BJT[NV] emitter
cnemit1 = cnemit1a INTERACT RPO  //  define CORE BJT[NV] emitter
collsura = collsur TOUCH cnemit1 
inbase11 = nbase1 AND OD25 
inbase1 = inbase11 NOT OD_50F  //  define I/O  BJT[P1] base terminal
inemit1 = nndiff AND inbase1  //  define I/O  BJT[N1] emitter
collsurb = collsur TOUCH inemit1 
collsurall1 = collsura OR collsurb 
i5pbase11 = pbase1 AND OD_50F 
i5pbase1 = i5pbase11 NOT OD25  //  define OD_50F BJT[NV] base terminal
i5nemit1a = nndiff AND i5pbase1 
i5nemit1 = i5nemit1a INTERACT RPO 
collsurc = collsur TOUCH i5nemit1 
collsurall = collsurall1 OR collsurc 
coll1b = coll1a NOT collsurall 
coll1c = coll1b NOT cemit1 
i5nbase11 = nbase1 AND OD_50F 
i5nbase1 = i5nbase11 NOT OD25 
i5emit1 = ttdiff AND i5nbase1 
coll1 = coll1c NOT i5emit1  //   define pnp collector

//* Define device -- bjt pnp5
cemit5_org = AREA cemit1  > 24.999  < 25.001 
cemit5 = cemit5_org NOT MAC 

//* Define device -- bjt pnp2
cemit2_org = AREA cemit1  > 3.999  < 4.001 
cemit2 = cemit2_org NOT MAC 

//* Define device -- bjt npn10
cnemit10_org = AREA cnemit1  > 99.999  < 100.001 
cnemit10 = cnemit10_org NOT MAC 

//***** Define connectivity/via layer -- ncoll1 ****
ncollrg = nxwell AND npnrg 
ncolls = ncollrg TOUCH pbase1 
ncoll1 = ncolls OR pbase1  //  define both BJTs collector

//* Define device -- bjt npn5
cnemit5_org = AREA cnemit1  > 24.999  < 25.001 
cnemit5 = cnemit5_org NOT MAC 

//* Define device -- bjt npn2
cnemit2_org = AREA cnemit1  > 3.999  < 4.001 
cnemit2 = cnemit2_org NOT MAC 

//* Define device -- bjt pnp10_mis
cemit10_mac = cemit10_org AND MAC 

//* Define device -- bjt pnp5_mis
cemit5_mac = cemit5_org AND MAC 

//* Define device -- bjt pnp2_mis
cemit2_mac = cemit2_org AND MAC 

//* Define device -- bjt npn10_mis
cnemit10_mac = cnemit10_org AND MAC 

//* Define device -- bjt npn5_mis
cnemit5_mac = cnemit5_org AND MAC 

//* Define device -- bjt npn2_mis
cnemit2_mac = cnemit2_org AND MAC 

//* Define device -- xdev nmoscap
vargt2 = vargt21 NOT OD_12 
vargt3 = vargt2 NOT OD18 
vargt4 = vargt3 NOT OD25 
vargt51 = vargt4 NOT OD33 
vargt5 = vargt51 NOT OD_50F 
vargt6 = vargt5 NOT OD1T 
vargt7 = vargt6 NOT IP 
vargt = vargt7 NOT DCO  //  Varactor on thin oxide

//* Define device -- xdev nmoscap_25
vargt2_s = vargt2 NOT IP 
vargt_25 = vargt2_s AND OD25  //  Varactor on 2.5v thick oxide

//* Define device -- xdev nmoscap_18
vargt_18 = vargt2_s AND OD18  //  Varactor on 1.8v thick oxide

//* Define device -- xdev rnwsti
trwell = NWDMY AND NW  //  N-well resistor layer
drpo = diff AND RPO 
nwsti_r1 = trwell NOT drpo  //  NWDMY*NW-RPO-diff --> nwsti
nwsti_r = nwsti_r1 INTERACT NWDMYi  //  NWDMY*NW --> nwsti

//* Define device -- xdev rnwsti_m
nwsti_mr1 = nwsti_r1 INTERACT NWDMY1  //  NWDMY*NW --> nwsti (3-Terminals)
nwsti_mr2 = nwsti_mr1 NOT OD_50F 
nwsti_mr = nwsti_mr2 NOT INTERACT NWDMY12_50F 

//* Define device -- xdev rnwod
nwod_r1 = trwell AND drpo 
nwod_r = nwod_r1 INTERACT NWDMYi  //  NWDMY*NW*RPO*diff --> nwod (2-Terminals)

//* Define device -- xdev rnwod_m
nwod_mr = nwod_r1 INTERACT NWDMY1  //  NWDMY*NW*RPO*diff --> nwod (3-Terminals)

//* Define device -- xdev rppolywo
rppolywo_r1 = rpolywo AND PP  //  P+POLY resistor w/o silicide
RPDMYi_noRF = RPDMYi NOT INTERACT RFDMY 
rppolywo_r = rppolywo_r1 INTERACT RPDMYi_noRF  //   P+POLY resistor w/o silicide (2-Terminals)

//* Define device -- xdev rnpolywo
rnpolywo_r1 = rpolywo AND NP  //  N+POLY resistor w/o silicide
rnpolywo_r = rnpolywo_r1 INTERACT RPDMYi_noRF  //   N+POLY resistor w/o silicide (2-Terminals)

//* Define device -- xdev rppolywo_m
RPDMY1_noRF = RPDMY1 NOT INTERACT RFDMY 
rppolywo_d1 = rppolywo_r1 INTERACT RPDMY1_noRF 
rppolywo_d = rppolywo_d1 NOT INTERACT SERPDMY  //   P+POLY resistor w/o silicide (3-Terminals)
rppolywo_dp = rppolywo_d AND psub 
rppolywo_dn = rppolywo_d AND nxwell 

//* Define device -- xdev rnpolywo_m
rnpolywo_d = rnpolywo_r1 INTERACT RPDMY1_noRF  //   N+POLY resistor w/o silicide (3-Terminals)
rnpolywo_dp = rnpolywo_d AND psub 
rnpolywo_dn = rnpolywo_d AND nxwell 

//* Define device -- xdev rppolywo_serp_m
rppolywo_serp_d = rppolywo_d1 INTERACT SERPDMY 
rppolywo_serp_dp = rppolywo_serp_d AND psub 
rppolywo_serp_dn = rppolywo_serp_d AND nxwell 

//* Define device -- xdev rpodwo
rpodwo_r1 = rodwo AND PP 
rpodwo_r = rpodwo_r1 INTERACT RPDMYi  //  P+OD resistor w/o silicide (2-Terminals)

//* Define device -- xdev rnodwo
rnodwo_r1 = rodwo AND NP 
rnodwo_r = rnodwo_r1 INTERACT RPDMYi  //  N+OD resistor w/o silicide (2-Terminals)

//* Define device -- xdev rppolyl
rppoly = rpoly AND PP  //  ALL P+POLY resistor w/i silicide
rppoly_edge = rppoly INSIDE EDGE PO 
l_rppoly_eg = LENGTH rppoly_edge  >= 2  < 99999999 
l_rppoly = rppoly WITH EDGE l_rppoly_eg 
rppolyl_r = l_rppoly INTERACT RPDMYi_noRF  //  P+POLY resistor w/i silicide >=  2 (2-Terminals)

//* Define device -- xdev rnpolyl
rnpoly = rpoly AND NP  //  ALL N+POLY resistor w/i silicide
rnpoly_edge = rnpoly INSIDE EDGE PO 
l_rnpoly_eg = LENGTH rnpoly_edge  >= 2  < 99999999 
l_rnpoly = rnpoly WITH EDGE l_rnpoly_eg 
rnpolyl_r = l_rnpoly INTERACT RPDMYi  //  N+POLY resistor w/i silicide >=  2 (2-Terminals)

//* Define device -- xdev rppolyl_m
rppolyl_d1 = l_rppoly NOT rppolyl_r 
rppolyl_d = rppolyl_d1 INTERACT RPDMY1_noRF  //  P+POLY resistor w/i silicide >=  2 (3-Terminals)
rppolyl_dp = rppolyl_d AND psub 
rppolyl_dn = rppolyl_d AND nxwell 

//* Define device -- xdev rnpolyl_m
rnpolyl_d1 = l_rnpoly NOT rnpolyl_r 
rnpolyl_d = rnpolyl_d1 INTERACT RPDMY1  //  N+POLY resistor w/i silicide >=  2 (3-Terminals)
rnpolyl_dp = rnpolyl_d AND psub 
rnpolyl_dn = rnpolyl_d AND nxwell 

//* Define device -- xdev rpodl
rpod = rod AND PP  //  P+OD resistor w/i silicide
rpod_edge = rpod INSIDE EDGE diff 
l_rpod = LENGTH rpod_edge  >= 2  < 99999999 
rpodl_r1 = rpod WITH EDGE l_rpod 
rpodl_r = rpodl_r1 INTERACT RPDMYi  //  P+OD resistor w/i silicide >= 2 (2-Terminals)

//* Define device -- xdev rnodl
rnod = rod AND NP  //  ALL N+OD resistor w/i silicide
rnod_edge = rnod INSIDE EDGE diff 
l_rnod = LENGTH rnod_edge  >= 2  < 99999999 
rnodl_r1 = rnod WITH EDGE l_rnod 
rnodl_r = rnodl_r1 INTERACT RPDMYi  //  N+OD resistor w/i silicide >= 2  (2-Terminals)

//* Define device -- xdev rppolys
s_rppoly = rppoly NOT l_rppoly 
rppolys_r = s_rppoly INTERACT RPDMYi_noRF  //  P+POLY resistor w/i silicide < 2 (2-Terminals)

//* Define device -- xdev rnpolys
s_rnpoly = rnpoly NOT l_rnpoly 
rnpolys_r = s_rnpoly INTERACT RPDMYi  //  N+POLY resistor w/i silicide < 2 (2-Terminals)

//* Define device -- xdev rppolys_m
rppolys_d1 = s_rppoly NOT rppolys_r 
rppolys_d = rppolys_d1 INTERACT RPDMY1_noRF  //  P+POLY resistor w/i silicide < 2 (3-Terminals)
rppolys_dp = rppolys_d AND psub 
rppolys_dn = rppolys_d AND nxwell 

//* Define device -- xdev rnpolys_m
rnpolys_d1 = s_rnpoly NOT rnpolys_r 
rnpolys_d = rnpolys_d1 INTERACT RPDMY1  //  N+POLY resistor w/i silicide < 2 (3-Terminals)
rnpolys_dp = rnpolys_d AND psub 
rnpolys_dn = rnpolys_d AND nxwell 

//* Define device -- xdev rpods
rpods_r1 = rpod NOT rpodl_r1 
rpods_r = rpods_r1 INTERACT RPDMYi  //  P+OD resistor w/i silicide < 2 (2-Terminals)

//* Define device -- xdev rnods
rnods_r1 = rnod NOT rnodl_r1 
rnods_r = rnods_r1 INTERACT RPDMYi  //  N+OD resistor w/i silicide < 2  (2-Terminals)

//* Define device -- xdev rm1w
M1 = M1i OR DUM1 
M1X = M1 OR CO 
mt1resa = M1X AND RMDMY1 
mt1res = mt1resa INTERACT M1i  //  metal1 resistor

//***** Define connectivity/via layer -- metal1 ****
metal1 = M1X NOT mt1res  //  metal1 interconnect

//* Define device -- xdev rm2w
M2 = M2i OR DUM2 
mt2resa = M2 AND RMDMY2 
mt2res = mt2resa INTERACT M2i  //  metal2 resistor

//***** Define connectivity/via layer -- metal2 ****
metal2m = M2 NOT mt2res  //  metal2 interconnect
mtjco = MRSED INSIDE MRPL 
mtjra = MRPL INTERACT mtjco 
MRME2 = mtjra AND MRDMY_2 
metal2 = metal2m OR MRME2 

//* Define device -- xdev rm3w
M3 = M3i OR DUM3 
M3Y = M3 NOT INDDMY 
mt3resa = M3Y AND RMDMY3 
mt3res = mt3resa INTERACT M3i  //  metal3 resistor

//***** Define connectivity/via layer -- metal3 ****
metal3m = M3Y NOT mt3res  //  metal3 interconnect
MRME3 = mtjra AND MRDMY_3 
metal3 = metal3m OR MRME3 

//* Define device -- xdev rm4w
M4 = M4i OR DUM4 
M4Y = M4 NOT INDDMY 
mt4resa = M4Y AND RMDMY4 
mt4res = mt4resa INTERACT M4i  //  metal4 resistor

//***** Define connectivity/via layer -- metal4 ****
metal4m = M4Y NOT mt4res  //  metal4 interconnect
MRME4 = mtjra AND MRDMY_4 
metal4 = metal4m OR MRME4 

//* Define device -- xdev rm5w
M5 = M5i OR DUM5 
M5Y = M5 NOT INDDMY 
mt5resa = M5Y AND RMDMY5 
mt5res = mt5resa INTERACT M5i  //  metal5 resistor

//***** Define connectivity/via layer -- metal5 ****
metal5m = M5Y NOT mt5res  //  metal5 interconnect
metal5 = COPY metal5m 

//* Define device -- xdev rm6w
M6Y = M6 NOT INDDMY 
mt6resa = M6Y AND RMDMY6 
mt6res = mt6resa INTERACT M6i  //  metal6 resistor

//***** Define connectivity/via layer -- metal6 ****
metal6m = M6Y NOT mt6res  //  metal6 interconnect
metal6 = COPY metal6m 

//* Define device -- xdev rm11
AP = API OR APD 
M7Y = AP NOT INDDMY 
mtAPresa = M7Y AND RMDMYAP 
mtAPres = mtAPresa INTERACT API  //  metalAP resistor

//***** Define connectivity/via layer -- metal7 ****
metal7 = M7Y NOT mtAPres  //  metalAP interconnect

//* Define device -- xdev rpodwo_m
rpodwo_mr = rpodwo_r1 INTERACT RPDMY1  //  P+OD resistor w/o silicide (3-Terminals)

//* Define device -- xdev rnodwo_m
rnodwo_mr = rnodwo_r1 INTERACT RPDMY1  //  N+OD resistor w/o silicide (3-Terminals)

//* Define device -- xdev rpodl_m
rpodl_mr = rpodl_r1 INTERACT RPDMY1  //  P+OD resistor w/i silicide >= 2 (3-Terminals)

//* Define device -- xdev rnodl_m
rnodl_mr = rnodl_r1 INTERACT RPDMY1  //  N+OD resistor w/i silicide >= 2  (3-Terminals)

//* Define device -- xdev rpods_m
rpods_mr = rpods_r1 INTERACT RPDMY1  //  P+OD resistor w/i silicide < 2 (3-Terminals)

//* Define device -- xdev rnods_m
rnods_mr = rnods_r1 INTERACT RPDMY1  //  N+OD resistor w/i silicide < 2  (3-Terminals)

//* Define device -- xdev dnwpsub
dnwdio_b = nxwell INTERACT DNW 
dnwdio_a = nxwell INSIDE DNW 
dnwdio_k = dnwdio_b NOT dnwdio_a 
dnwdio1 = DNW INTERACT dnwdio_k 
gate_rfnw = gate_rf AND nxwell  //  gate_rf inside nwell
pgate_rf1 = gate_rfnw AND PP 
pmos_rf5t = RFDMY5T INTERACT pgate_rf1 
dnwdio21 = dnwdio1 NOT pmos_rf5t 
dnwdio22 = dnwdio21 NOT RFDMY6T 
dnwdio23 = dnwdio22 NOT INTERACT VAR_RF 
dnwdio2 = dnwdio23 NOT INTERACT XJ_RF 
dnwdio_ori = COPY dnwdio2 
dnwdio_iso_1 = dnwdio2 INTERACT pjf_4_mac_reg 

//* Define layer -- njf_poly_25_mac_reg_1
njf_poly_25_mac_reg_1_tmp01 = OD25 AND DNWi
njf_poly_25_mac_reg_1_tmp02 = njf_poly_25_mac_reg_1_tmp01 AND OD
njf_poly_25_mac_reg_1_tmp03 = njf_poly_25_mac_reg_1_tmp02 NOT NT_N
njf_poly_25_mac_reg_1_tmp04 = njf_poly_25_mac_reg_1_tmp03 NOT OD18
njf_poly_25_mac_reg_1_tmp05 = njf_poly_25_mac_reg_1_tmp04 NOT EHVT_N
njf_poly_25_mac_reg_1_tmp06 = njf_poly_25_mac_reg_1_tmp05 NOT EHVT_P
njf_poly_25_mac_reg_1_tmp07 = njf_poly_25_mac_reg_1_tmp06 NOT VTH_N
njf_poly_25_mac_reg_1_tmp08 = njf_poly_25_mac_reg_1_tmp07 NOT VTH_P
njf_poly_25_mac_reg_1_tmp09 = njf_poly_25_mac_reg_1_tmp08 NOT VTL_N
njf_poly_25_mac_reg_1_tmp10 = njf_poly_25_mac_reg_1_tmp09 NOT VTL_P
njf_poly_25_mac_reg_1_tmp11 = njf_poly_25_mac_reg_1_tmp10 NOT ELVT_N
njf_poly_25_mac_reg_1_tmp12 = njf_poly_25_mac_reg_1_tmp11 NOT ELVT_P
njf_poly_25_mac_reg_1_tmp13 = njf_poly_25_mac_reg_1_tmp12 NOT CORELDD_IO
njf_poly_25_mac_reg_1_tmp14 = njf_poly_25_mac_reg_1_tmp13 NOT RH
njf_poly_25_mac_reg_1_tmp15 = njf_poly_25_mac_reg_1_tmp14 NOT NWDMY
njf_poly_25_mac_reg_1_tmp16 = njf_poly_25_mac_reg_1_tmp15 NOT VAR
njf_poly_25_mac_reg_1_tmp17 = njf_poly_25_mac_reg_1_tmp16 NOT BJTDMY
njf_poly_25_mac_reg_1_tmp18 = njf_poly_25_mac_reg_1_tmp17 NOT DIODMY
njf_poly_25_mac_reg_1_tmp19 = njf_poly_25_mac_reg_1_tmp18 NOT RPDMY
njf_poly_25_mac_reg_1_tmp20 = njf_poly_25_mac_reg_1_tmp19 NOT HVD_N
njf_poly_25_mac_reg_1_tmp21 = njf_poly_25_mac_reg_1_tmp20 NOT HVD_P
njf_poly_25_mac_reg_1_tmp22 = njf_poly_25_mac_reg_1_tmp21 NOT ULP_WR
njf_poly_25_mac_reg_1_tmp23 = njf_poly_25_mac_reg_1_tmp22 NOT OD25_33
njf_poly_25_mac_reg_1_tmp24 = njf_poly_25_mac_reg_1_tmp23 NOT OD25_18
njf_poly_25_mac_reg_1_tmp25 = njf_poly_25_mac_reg_1_tmp24 AND ANALOG
njf_poly_25_mac_reg_1_tmp26 = njf_poly_25_mac_reg_1_tmp25 NOT FGDDMY
njf_poly_25_mac_reg_1_tmp27 = njf_poly_25_mac_reg_1_tmp26 NOT SERPDMY
njf_poly_25_mac_reg_1_tmp28 = njf_poly_25_mac_reg_1_tmp27 NOT JNW
njf_poly_25_mac_reg_1_tmp29 = njf_poly_25_mac_reg_1_tmp28 AND JDMY
njf_poly_25_mac_reg_1_tmp30 = njf_poly_25_mac_reg_1_tmp29 NOT HVJDMY
njf_poly_25_mac_reg_1_tmp31 = njf_poly_25_mac_reg_1_tmp30 NOT SBDDMY
njf_poly_25_mac_reg_1_tmp32 = njf_poly_25_mac_reg_1_tmp31 NOT JFET_N4V_DRAIN
njf_poly_25_mac_reg_1_tmp33 = njf_poly_25_mac_reg_1_tmp32 NOT JFET_BLK_DNW
njf_poly_25_mac_reg_1 = njf_poly_25_mac_reg_1_tmp33 NOT JFET_BLK_PSUB

njf_poly_25_mac_reg_2 = njf_poly_25_mac_reg_1 INTERACT POI 
njf_poly_25_mac_reg_3 = njf_poly_25_mac_reg_2 INTERACT NP 
njf_poly_25_mac_reg_4 = njf_poly_25_mac_reg_3 INTERACT PP 
njf_poly_25_mac_reg = njf_poly_25_mac_reg_4 INTERACT RPO 
dnwdio_iso_2 = dnwdio2 INTERACT njf_poly_25_mac_reg 
dnwdio_iso = dnwdio_iso_1 OR dnwdio_iso_2 
dnwdio_1 = dnwdio_ori NOT dnwdio_iso 
dnwdio = dnwdio_1 NOT INTERACT njf_4_mac_reg 

//***** Define connectivity/via layer -- psub_term ****
psub_term_a = psub2s NOT PSUB2 
psub_term_b = BULK NOT psub_term_a 
psub_term_c = BULK AND DNW 
psub_term_d = BULK NOT psub_term_c 
psub_term_e = psub_term_b AND psub_term_d 
psub_term = psub_term_e INTERACT DNW 

//* Define device -- xdev pwdnw
rwdio1 = DNW NOT nxwell 
rwdio2 = rwdio1 NOT BJTDMY 
rfdmy56 = RFDMY5T OR RFDMY6T 
rwdio3 = rwdio2 NOT rfdmy56 
rwdio4 = rwdio3 NOT INTERACT VAR_RF 
rwdio5 = rwdio4 NOT INTERACT XJ_RF 
rwdio6 = rwdio5 NOT OD_50F 
rwel_jfet_1 = rwel_4vpjfet OR rwel_4vnjfet 
rwel_njf_poly_25 = rwel_ori INTERACT njf_poly_25_mac_reg 
rwel_jfet = rwel_jfet_1 OR rwel_njf_poly_25 
rwdio = rwdio6 NOT rwel_jfet 

//* Define device -- xdev pnwdio
pnwdio2 = nxwell OUTSIDE cnwdio 
pnwdio3a = pnwdio2 NOT BJTDMYi 
pnwdio3 = pnwdio3a NOT DNW 
pnwdio4 = pnwdio2 INSIDE rwel 
pnwdio5 = pnwdio3 OR pnwdio4 
pnwdio_r1 = pnwdio5 TOUCH psub == 1
pnwdio_r2 = pnwdio_r1 NOT pmos_rf5t 
pnwdio_r3 = pnwdio_r2 NOT RFDMY6T 
pnwdio_r4 = pnwdio_r3 NOT VAR_RF 
pnwdio_r5 = pnwdio_r4 NOT XJ_RF 
hia_pdio1 = tpdiff_all AND HIA_DUMMY 
hia_pdio2 = hia_pdio1 AND nxwell 
hia_pdio3 = hia_pdio2 NOT OD25 
hia_pdio4 = hia_pdio3 NOT OD33 
hia_pdio5 = hia_pdio4 NOT OD18 
hia_pdio6 = hia_pdio5 NOT OD_12 
hia_pdio7 = hia_pdio6 NOT VTL_P 
hia_pdio8 = hia_pdio7 NOT VTH_P 
hia_pdio9 = hia_pdio8 NOT ILVT 
hia_pdio10 = hia_pdio9 NOT VTUL_P_EDM 
hia_pdio11 = hia_pdio10 NOT OD1T 
hia_pdio12 = hia_pdio11 NOT DCO 
hia_pdio13 = hia_pdio12 NOT SDI_HV_EF 
hia_pdio14 = hia_pdio13 NOT SDI_MV_EF 
hia_pdio_rf = hia_pdio14 AND RFDMY 
hia_pdio_rf_r = HIA_DUMMY INTERACT hia_pdio_rf 
pnwdio_r6 = pnwdio_r5 NOT hia_pdio_rf_r 
pnwdio_r7 = pnwdio_r6 NOT OD_50F 
pnwdio_r8 = pnwdio_r7 NOT HVJDMY 
pnwdio_r9 = pnwdio_r8 NOT JNW 
njf_poly_25_dmy = JDMY INTERACT njf_poly_25_mac_reg 
pnwdio6 = pnwdio2 INTERACT njf_poly_25_dmy 
pnwdio_r = pnwdio_r9 NOT pnwdio6 

//***** Define connectivity/via layer -- n_psub ****
n_psub = BULK NOT psubband 

//* Define device -- xdev nmos_rf_hv25
gate_rfnnw = gate_rf NOT nxwell  //  gate_rf not inside nwell
ngate_rf1 = gate_rfnnw AND NP 
ngate_derf1 = ngate_rf1 INTERACT DEHVD_N 
ngate_derf2 = ngate_derf1 NOT VTH_N 
ngate_derf3 = ngate_derf2 NOT VTL_N 
ngate_derf4 = ngate_derf3 NOT NT_N 
ngate_derf5 = ngate_derf4 AND OD25 
ngate_derf6 = ngate_derf5 NOT OD18 
ngate_derf = ngate_derf6 NOT OD33 
ngate_denthin1 = nthin INTERACT ngate_derf 
ngate_denthin2 = ngate_denthin1 NOT DNW 
nthin2_dehv_d = nthin2 AND DEHVD_N 
ngate_denthin3 = ngate_denthin2 INTERACT nthin2_dehv_d 
nthin2_dehv_s = nthin2 NOT DEHVD_N 
ngate_denthin = ngate_denthin3 INTERACT nthin2_dehv_s 

//***** Define connectivity/via layer -- d_tndiff_dehv ****
d_tndiff_dehv1 = nthin2_dehv_d INTERACT ngate_denthin 
d_tndiff_dehv = d_tndiff_dehv1 NOT poly_rf 

//***** Define connectivity/via layer -- s_tndiff_dehv ****
s_tndiff_dehv1 = nthin2_dehv_s INTERACT ngate_denthin 
s_tndiff_dehv = s_tndiff_dehv1 NOT poly_rf 

//* Define device -- xdev nmos_rf
ngate_rf21 = ngate_rf1 NOT INTERACT DEHVD_N 
ngate_rf2 = ngate_rf21 NOT NT_N 
OD_thk = OD25 OR OD18 
OD_thk1 = OD_thk OR OD33 
OD2 = OD_thk1 OR OD_50F 
ngate_rf3 = ngate_rf2 NOT OD2 
ngate_rfa = ngate_rf3 NOT VTH_N 
ngate_rfb = ngate_rfa NOT VTL_N 
ngate_rfe = ngate_rfb NOT ILVT 
ngate_rf = ngate_rfe NOT ELVT_N  //  CORE RF nmos
ngate_nthin1 = nthin INTERACT ngate_rf 
ngate_nthin2 = ngate_nthin1 INSIDE DNW 
ngate_nthin3 = ngate_nthin2 NOT RFDMY67G 
ngate_nthin = ngate_nthin3 NOT RFDMY6T  //  nmos_rf

//***** Define connectivity/via layer -- d_tndiff ****
d_tndiff1 = tndiff_all AND DRAIN 
d_tndiff = d_tndiff1 NOT INTERACT ngate_denthin 

//***** Define connectivity/via layer -- s_tndiff ****
s_tndiff1 = tndiff_all NOT DRAIN 
s_tndiff2 = s_tndiff1 INTERACT gate_rf 
s_tndiff = s_tndiff2 NOT INTERACT ngate_denthin 

//* Define device -- xdev nmos_rf_nodnw
ngate_nthin_nodnw1 = ngate_nthin1 OUTSIDE DNW 
ngate_nthin_nodnw = ngate_nthin_nodnw1 NOT RFDMY67G  //  nmos_rf_nodnw

//* Define device -- xdev nmos_rf_hvt
ngate_rfhv = ngate_rf3 AND VTH_N  //  CORE RF HVT nmos
ngate_nthin_hv1 = nthin INTERACT ngate_rfhv 
ngate_nthin_hv2 = ngate_nthin_hv1 INSIDE DNW 
ngate_nthin_hv3 = ngate_nthin_hv2 NOT RFDMY67G 
ngate_nthin_hv = ngate_nthin_hv3 NOT RFDMY6T  //  nmos_rf_hvt

//* Define device -- xdev nmos_rf_hvt_nodnw
ngate_nthin_hvnodnw1 = ngate_nthin_hv1 OUTSIDE DNW 
ngate_nthin_hvnodnw = ngate_nthin_hvnodnw1 NOT RFDMY67G  //  nmos_rf_hvt_nodnw

//* Define device -- xdev nmos_rf_lvt
ngate_rflv = ngate_rf3 AND VTL_N  //  CORE RF LVT nmos
ngate_nthin_lv1 = nthin INTERACT ngate_rflv 
ngate_nthin_lv2 = ngate_nthin_lv1 INSIDE DNW 
ngate_nthin_lv3 = ngate_nthin_lv2 NOT RFDMY67G 
ngate_nthin_lv = ngate_nthin_lv3 NOT RFDMY6T  //  nmos_rf_lvt

//* Define device -- xdev nmos_rf_lvt_nodnw
ngate_nthin_lvnodnw1 = ngate_nthin_lv1 OUTSIDE DNW 
ngate_nthin_lvnodnw = ngate_nthin_lvnodnw1 NOT RFDMY67G  //  nmos_rf_lvt_nodnw

//* Define device -- xdev nmos_rf_elvt
ngate_rfelv = ngate_rf3 AND ELVT_N  //  CORE RF ELVT nmos 
ngate_nthin_elv1 = nthin INTERACT ngate_rfelv 
ngate_nthin_elv2 = ngate_nthin_elv1 INSIDE DNW 
ngate_nthin_elv = ngate_nthin_elv2 NOT RFDMY6T  // nmos_rf_elvt	

//* Define device -- xdev nmos_rf_elvt_nodnw
ngate_nthin_elvnodnw = ngate_nthin_elv1 OUTSIDE DNW  // nmos_rf_elvt_nodnw

//* Define device -- xdev nmos_rf_25
ngate_rfio1 = ngate_rf2 AND OD2 
ngate_rfio2 = ngate_rfio1 NOT VTH_N 
ngate_rfio3 = ngate_rfio2 NOT VTL_N 
ngate_rf_25a = ngate_rfio3 AND OD25 
ngate_rf_25b = ngate_rf_25a NOT OD25_33 
ngate_rf_25 = ngate_rf_25b NOT OD25_18 
ngate_nthin_251 = nthin INTERACT ngate_rf_25 
ngate_nthin_252 = ngate_nthin_251 INSIDE DNW 
ngate_nthin_252a = ngate_nthin_252 NOT RFDMY67G 
ngate_nthin_25 = ngate_nthin_252a NOT RFDMY6T  //  nmos_rf_25

//* Define device -- xdev nmos_rf_25_nodnw
ngate_nthin_25nodnw1 = ngate_nthin_251 OUTSIDE DNW 
ngate_nthin_25nodnw = ngate_nthin_25nodnw1 NOT RFDMY67G  //  nmos_rf_25_nodnw

//* Define device -- xdev nmos_rf_25od33
ngate_rf_25od = ngate_rf_25a AND OD25_33  //  RF 2.5v nmos over_drive 3.3v
ngate_nthin_253 = nthin INTERACT ngate_rf_25od 
ngate_nthin_254 = ngate_nthin_253 INSIDE DNW 
ngate_nthin_254a = ngate_nthin_254 NOT RFDMY67G 
ngate_nthin_25od = ngate_nthin_254a NOT RFDMY6T  //  nmos_rf_25od33

//* Define device -- xdev nmos_rf_25od33_nodnw
ngate_nthin_25nodnwod1 = ngate_nthin_253 OUTSIDE DNW 
ngate_nthin_25nodnwod = ngate_nthin_25nodnwod1 NOT RFDMY67G  //  nmos_rf_25od33_nodnw

//* Define device -- xdev nmos_rf_25ud18
ngate_rf_25ud = ngate_rf_25a AND OD25_18  //  RF 2.5v nmos under_drive 1.8v
ngate_nthin_255 = nthin INTERACT ngate_rf_25ud 
ngate_nthin_256 = ngate_nthin_255 INSIDE DNW 
ngate_nthin_25ud = ngate_nthin_256 NOT RFDMY6T  //  nmos_rf_25ud18 

//* Define device -- xdev nmos_rf_25ud18_nodnw
ngate_nthin_25nodnwud = ngate_nthin_255 OUTSIDE DNW  //  nmos_rf_25ud18_nodnw

//* Define device -- xdev pmos_rf
pgate_rf2 = pgate_rf1 NOT NT_N 
pgate_rf3 = pgate_rf2 NOT OD2 
pgate_rfa = pgate_rf3 NOT VTH_P 
pgate_rfb = pgate_rfa NOT VTL_P 
pgate_rfc = pgate_rfb NOT ILVT 
pgate_rf = pgate_rfc NOT ELVT_P  //  CORE RF pmos gate
pgate_pthin1 = pthin INTERACT pgate_rf 
pgate_pthin2 = pgate_pthin1 INSIDE DNW 
pgate_pthin3 = pgate_pthin2 NOT RFDMY67G 
pgate_pthin = pgate_pthin3 NOT RFDMY5T  //  pmos_rf

//***** Define connectivity/via layer -- d_tpdiff ****
d_tpdiff = tpdiff_all AND drain_all 

//***** Define connectivity/via layer -- s_tpdiff ****
s_tpdiff1 = tpdiff_all NOT drain_all 
s_tpdiff = s_tpdiff1 INTERACT gate_rf 

//* Define device -- xdev pmos_rf_nw
pgate_pthin_nw1 = pgate_pthin1 OUTSIDE DNW 
pgate_pthin_nw2 = pgate_pthin_nw1 NOT RFDMY67G 
pgate_pthin_nw = pgate_pthin_nw2 NOT RFDMY5T  //  pmos_rf_nw

//* Define device -- xdev pmos_rf_hvt
pgate_rfhv = pgate_rf3 AND VTH_P  //  CORE RF HVT pmos gate
pgate_pthin_hv1 = pthin INTERACT pgate_rfhv 
pgate_pthin_hv2 = pgate_pthin_hv1 INSIDE DNW 
pgate_pthin_hv3 = pgate_pthin_hv2 NOT RFDMY67G 
pgate_pthin_hv = pgate_pthin_hv3 NOT RFDMY5T  //  pmos_rf_hvt

//* Define device -- xdev pmos_rf_hvt_nw
pgate_pthin_hvnw1 = pgate_pthin_hv1 OUTSIDE DNW 
pgate_pthin_hvnw2 = pgate_pthin_hvnw1 NOT RFDMY67G 
pgate_pthin_hvnw = pgate_pthin_hvnw2 NOT RFDMY5T  //  pmos_rf_hvt_nw

//* Define device -- xdev pmos_rf_lvt
pgate_rflv = pgate_rf3 AND VTL_P  //  CORE RF LVT pmos gate
pgate_pthin_lv1 = pthin INTERACT pgate_rflv 
pgate_pthin_lv2 = pgate_pthin_lv1 INSIDE DNW 
pgate_pthin_lv3 = pgate_pthin_lv2 NOT RFDMY67G 
pgate_pthin_lv = pgate_pthin_lv3 NOT RFDMY5T  //  pmos_rf_lvt

//* Define device -- xdev pmos_rf_lvt_nw
pgate_pthin_lvnw1 = pgate_pthin_lv1 OUTSIDE DNW 
pgate_pthin_lvnw2 = pgate_pthin_lvnw1 NOT RFDMY67G 
pgate_pthin_lvnw = pgate_pthin_lvnw2 NOT RFDMY5T  //  pmos_rf_lvt_nw

//* Define device -- xdev pmos_rf_elvt
pgate_rfelv = pgate_rf3 AND ELVT_P  //  CORE RF ELVT pmos gate
pgate_pthin_elv1 = pthin INTERACT pgate_rfelv 
pgate_pthin_elv2 = pgate_pthin_elv1 INSIDE DNW 
pgate_pthin_elv = pgate_pthin_elv2 NOT RFDMY5T  // pmos_rf_elvt  

//* Define device -- xdev pmos_rf_elvt_nw
pgate_pthin_elvnw1 = pgate_pthin_elv1 OUTSIDE DNW 
pgate_pthin_elvnw = pgate_pthin_elvnw1 NOT RFDMY5T  // pmos_rf_elvt_nw  

//* Define device -- xdev pmos_rf_25
pgate_rfio1 = pgate_rf2 AND OD2 
pgate_rfio2 = pgate_rfio1 NOT VTH_P 
pgate_rfio3 = pgate_rfio2 NOT VTL_P 
pgate_rf_25a = pgate_rfio3 AND OD25 
pgate_rf_25b = pgate_rf_25a NOT OD25_33 
pgate_rf_25 = pgate_rf_25b NOT OD25_18 
pgate_pthin_251 = pthin INTERACT pgate_rf_25 
pgate_pthin_252 = pgate_pthin_251 INSIDE DNW 
pgate_pthin_252a = pgate_pthin_252 NOT RFDMY67G 
pgate_pthin_25 = pgate_pthin_252a NOT RFDMY5T  //  pmos_rf_25

//* Define device -- xdev pmos_rf_25_nw
pgate_pthin_25nw1 = pgate_pthin_251 OUTSIDE DNW 
pgate_pthin_25nw2 = pgate_pthin_25nw1 NOT RFDMY67G 
pgate_pthin_25nw = pgate_pthin_25nw2 NOT RFDMY5T  //  pmos_rf_25_nw

//* Define device -- xdev pmos_rf_25od33
pgate_rf_25od = pgate_rf_25a AND OD25_33  //  RF 2.5v pmos gate over_drive 3.3v
pgate_pthin_253 = pthin INTERACT pgate_rf_25od 
pgate_pthin_254 = pgate_pthin_253 INSIDE DNW 
pgate_pthin_254a = pgate_pthin_254 NOT RFDMY67G 
pgate_pthin_25od = pgate_pthin_254a NOT RFDMY5T  //  pmos_rf_25od33

//* Define device -- xdev pmos_rf_25od33_nw
pgate_pthin_25nwod1 = pgate_pthin_253 OUTSIDE DNW 
pgate_pthin_25nwod2 = pgate_pthin_25nwod1 NOT RFDMY67G 
pgate_pthin_25nwod = pgate_pthin_25nwod2 NOT RFDMY5T  //  pmos_rf_25od33_nw 

//* Define device -- xdev pmos_rf_25ud18
pgate_rf_25ud = pgate_rf_25a AND OD25_18  //  RF 2.5v pmos gate under_drive 1.8v
pgate_pthin_255 = pthin INTERACT pgate_rf_25ud 
pgate_pthin_256 = pgate_pthin_255 INSIDE DNW 
pgate_pthin_25ud = pgate_pthin_256 NOT RFDMY5T  //  pmos_rf_25ud18 

//* Define device -- xdev pmos_rf_25ud18_nw
pgate_pthin_25nwud1 = pgate_pthin_255 OUTSIDE DNW 
pgate_pthin_25nwud = pgate_pthin_25nwud1 NOT RFDMY5T  //  pmos_rf_25ud18_nw

//* Define device -- xdev nmos_rf_6t
ngate_nthin_6t = ngate_nthin3 AND RFDMY6T  //  nmos_rf_6t

//* Define device -- xdev nmos_rf_elvt_6t
ngate_nthin_elv_6t = ngate_nthin_elv2 AND RFDMY6T  // nmos_rf_elvt_6t

//* Define device -- xdev nmos_rf_25_6t
ngate_nthin_25_6t = ngate_nthin_252a AND RFDMY6T  //  nmos_rf_25_6t

//* Define device -- xdev nmos_rf_25od33_6t
ngate_nthin_25od_6t = ngate_nthin_254a AND RFDMY6T  //  nmos_rf_25od33_6t

//* Define device -- xdev nmos_rf_25ud18_6t
ngate_nthin_25ud_6t = ngate_nthin_256 AND RFDMY6T  //  nmos_rf_25ud18_6t 

//* Define device -- xdev pmos_rf_5t
pgate_pthin_5t = pgate_pthin3 AND RFDMY5T  //  pmos_rf_5t

//* Define device -- xdev pmos_rf_nw_5t
pgate_pthin_nw_5t = pgate_pthin_nw2 AND RFDMY5T  //  pmos_rf_nw_5t

//* Define device -- xdev pmos_rf_25_5t
pgate_pthin_25_5t = pgate_pthin_252a AND RFDMY5T  //  pmos_rf_25_5t

//* Define device -- xdev pmos_rf_25_nw_5t
pgate_pthin_25nw_5t = pgate_pthin_25nw2 AND RFDMY5T  //  pmos_rf_25_nw_5t

//* Define device -- xdev pmos_rf_25od33_5t
pgate_pthin_25od_5t = pgate_pthin_254a AND RFDMY5T  //  pmos_rf_25od33_5t

//* Define device -- xdev pmos_rf_25od33_nw_5t
pgate_pthin_25nwod_5t = pgate_pthin_25nwod2 AND RFDMY5T  //  pmos_rf_25od33_nw_5t 

//* Define device -- xdev pmos_rf_25ud18_5t
pgate_pthin_25ud_5t = pgate_pthin_256 AND RFDMY5T  //  pmos_rf_25ud18_5t 

//* Define device -- xdev pmos_rf_25ud18_nw_5t
pgate_pthin_25nwud_5t = pgate_pthin_25nwud1 AND RFDMY5T  //  pmos_rf_25ud18_nw_5t

//* Define device -- xdev nmos_rf_hvt_6t
ngate_nthin_hv_6t = ngate_nthin_hv3 AND RFDMY6T  //  nmos_rf_hvt_6t

//* Define device -- xdev nmos_rf_lvt_6t
ngate_nthin_lv_6t = ngate_nthin_lv3 AND RFDMY6T  //  nmos_rf_lvt_6t

//* Define device -- xdev pmos_rf_hvt_5t
pgate_pthin_hv_5t = pgate_pthin_hv3 AND RFDMY5T  //  pmos_rf_hvt_5t

//* Define device -- xdev pmos_rf_hvt_nw_5t
pgate_pthin_hvnw_5t = pgate_pthin_hvnw2 AND RFDMY5T  //  pmos_rf_hvt_nw_5t

//* Define device -- xdev pmos_rf_lvt_5t
pgate_pthin_lv_5t = pgate_pthin_lv3 AND RFDMY5T  //  pmos_rf_lvt_5t

//* Define device -- xdev pmos_rf_lvt_nw_5t
pgate_pthin_lvnw_5t = pgate_pthin_lvnw2 AND RFDMY5T  //  pmos_rf_lvt_nw_5t

//* Define device -- xdev pmos_rf_elvt_5t
pgate_pthin_elv_5t = pgate_pthin_elv2 AND RFDMY5T  // pmos_rf_elvt_5t 

//* Define device -- xdev pmos_rf_elvt_nw_5t
pgate_pthin_elvnw_5t = pgate_pthin_elvnw1 AND RFDMY5T  // pmos_rf_elvt_nw_5t 

//* Define device -- xdev ndio_hia_rf
hia_ndio1 = tndiff_all AND HIA_DUMMY 
hia_ndio2 = hia_ndio1 AND psub 
hia_ndio3 = hia_ndio2 NOT OD25 
hia_ndio4 = hia_ndio3 NOT OD33 
hia_ndio5 = hia_ndio4 NOT OD18 
hia_ndio6 = hia_ndio5 NOT OD_12 
hia_ndio7 = hia_ndio6 NOT NT_N 
hia_ndio8 = hia_ndio7 NOT VTL_N 
hia_ndio9 = hia_ndio8 NOT VTH_N 
hia_ndio10 = hia_ndio9 NOT ILVT 
hia_ndio11 = hia_ndio10 NOT VTUL_N_EDM 
hia_ndio12 = hia_ndio11 NOT OD1T 
hia_ndio13 = hia_ndio12 NOT DCO 
hia_ndio14 = hia_ndio13 NOT SDI_HV_EF 
hia_ndio15 = hia_ndio14 NOT SDI_MV_EF 
hia_ndio_rf = hia_ndio15 AND RFDMY 
hia_ndio_rf_r = HIA_DUMMY INTERACT hia_ndio_rf 

//***** Define connectivity/via layer -- RFDMY_HIA_bulk ****
RFDMY_HIA_bulk1 = nxwell AND HIA_DUMMY 
RFDMY_HIA_bulk2 = RFDMY_HIA_bulk1 INSIDE RFDMY 
RFDMY_HIA_bulk = RFDMY INTERACT RFDMY_HIA_bulk2 

//* Define device -- xdev xjvar
jvar1_rf1 = XJ_RF AND nxwell 
jvar1_rf = jvar1_rf1 NOT od_rfvar 
jvar2_rf = jvar1_rf INTERACT tpdiff_all 
jvar_rf1 = jvar2_rf INTERACT tndiff_all 
jvar_rf2 = jvar_rf1 NOT RFDMY67G 
jvar_rf = jvar_rf2 AND DNW 

//* Define device -- xdev xjvar_nw
jvar3_rf = jvar_rf1 AND tpdiff_all 
tpdiff_jvar = tpdiff_all AND jvar_rf1 
tndiff_jvar = tndiff_all AND jvar_rf1 
jvar_rfnw = jvar_rf2 NOT DNW 

//* Define device -- xdev rppolyl_rf
rppolyl_rf1 = rppolyl_d1 NOT rppolyl_d 
rppolyl_rf2 = rppolyl_rf1 AND RFDMY 
rppolyl_rf = rppolyl_rf2 NOT RFDMY67G  //  RF P+POLY resistor w/i silicide >=  2 (3-Terminals)

//* Define device -- xdev rppolys_rf
rppolys_rf1 = rppolys_d1 NOT rppolyl_d 
rppolys_rf2 = rppolys_rf1 AND RFDMY 
rppolys_rf = rppolys_rf2 NOT RFDMY67G  //  RF P+POLY resistor w/i silicide < 2 (3-Terminals) 

//* Define device -- xdev rppolywo_rf
rppolywo_rf2 = rppolywo_r1 AND RFDMY 
rppolywo_rf = rppolywo_rf2 NOT RFDMY67G  //   RF P+POLY resistor w/o silicide (3-terminals)

//* Define device -- xdev rnpolywo_rf
rnpolywo_rf2 = rnpolywo_r1 AND RFDMY 
rnpolywo_rf = rnpolywo_rf2 NOT RFDMY67G  //    RF N+POLY resistor w/o silicide (3-terminals)

//* Define device -- xdev moscap_rf
var_nw_rf1 = VAR_RF AND nxwell 
var_nw_rf = var_nw_rf1 NOT od_rfvar 
var_nw1_rf = var_nw_rf NOT OD18 
var_nw2_rf = var_nw1_rf NOT OD25 
var_nw3_rf1 = var_nw2_rf NOT OD33 
var_nw3_rf2 = var_nw3_rf1 NOT INTERACT VTH_P 
var_nw3_rf2a = var_nw3_rf2 NOT RFDMY67G 
var_nw3_rf = var_nw3_rf2a AND DNW 

//***** Define connectivity/via layer -- poly3 ****
poly3b = poly3a AND RFDMY 
poly3c = poly3b NOT DPO 
poly3 = poly3c AND VARi  //  for VARACTOR plus pin ( exclude SR_DPO )

//* Define device -- xdev moscap_rf_nw
OD2a = OD25 OR OD25_18 
OD2b = OD2a OR OD25_33 
OD2c = OD2b OR OD18 
OD2_mos = OD2c OR OD33 
vargt_rf1 = vargt2_rf NOT OD2_mos 
vargt_rf = vargt_rf1 NOT VTH_P  //  RF Varactor on thin oxide
var_nw3_rf_nw = var_nw3_rf2a NOT DNW 

//* Define device -- xdev moscap_rf25
var_nw_rf25a = var_nw_rf AND OD25 
var_nw_rf25b = var_nw_rf25a NOT RFDMY67G 
var_nw_rf25 = var_nw_rf25b AND DNW 

//* Define device -- xdev moscap_rf25_nw
vargt_rf25 = vargt2_rf AND OD25  //  RF Varactor on 2.5v thick oxide
var_nw_rf25_nw = var_nw_rf25b NOT DNW 

//* Define device -- xdev pmoscap_rf
var_pw_rf2 = var_pw_rf1 NOT OD18 
var_pw_rf3 = var_pw_rf2 NOT OD25 
var_pw_rf = var_pw_rf3 AND DNW 
pvargt_rf1 = gate_a_rf AND VAR_RF 
pvargt_rf = pvargt_rf1 NOT OD2_mos 

//* Define device -- xdev pmoscap_rf25
var_pw_rf25a = var_pw_rf2 AND OD25 
var_pw_rf25 = var_pw_rf25a AND DNW 
pvargt_rf25 = pvargt_rf1 AND OD25 

//* Define device -- xdev spiral_std_mz_a
std_mz_a_ind = INDDMY WITH TEXT "spiral_std_mz_a" IND_TEXT 

//***** Define connectivity/via layer -- indm6p ****
indm6a = SIZE INDDMY BY 0.005 
indm6 = indm6a AND M6Y 
indm6p1 = indm6 NOT IND_MP 
indm6p2 = indm6p1 NOT INTERACT IND_MP 
indm6p = indm6p2 NOT IND_D4 

//***** Define connectivity/via layer -- indm6m ****
indm6m = indm6 AND IND_MP 

//* Define device -- xdev spiral_sym_mz_a
sym_mz_a_ind = INDDMY WITH TEXT "spiral_sym_mz_a" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mz_a_x
sym_ct_mz_a_x_ind = INDDMY WITH TEXT "spiral_sym_ct_mz_a_x" IND_TEXT 

//***** Define connectivity/via layer -- indm6c ****
indm6c = indm6 AND IND_D4 

//* Define device -- xdev spiral_sym_mz_ax
sym_mz_ax_ind = INDDMY WITH TEXT "spiral_sym_mz_ax" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mz_ax_a
sym_ct_mz_ax_a_ind = INDDMY WITH TEXT "spiral_sym_ct_mz_ax_a" IND_TEXT 

//***** Define connectivity/via layer -- indm7c ****
indm7 = indm6a AND M7Y 
indm7c = indm7 AND IND_D4 

//* Define device -- xdev spiral_std_mza_a
std_mza_a_ind = INDDMY WITH TEXT "spiral_std_mza_a" IND_TEXT 

//* Define device -- xdev spiral_sym_mza_a
sym_mza_a_ind = INDDMY WITH TEXT "spiral_sym_mza_a" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mza_a_x
sym_ct_mza_a_x_ind = INDDMY WITH TEXT "spiral_sym_ct_mza_a_x" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_a_a
sym_ct_mu_a_a_ind = INDDMY WITH TEXT "spiral_sym_ct_mu_a_a" IND_TEXT 

//* Define device -- xdev spiral_sym_mu_a
sym_mu_a_ind = INDDMY WITH TEXT "spiral_sym_mu_a" IND_TEXT 

//* Define device -- xdev spiral_std_mu_a
std_mu_a_ind = INDDMY WITH TEXT "spiral_std_mu_a" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_a_x
sym_ct_mu_a_x_ind = INDDMY WITH TEXT "spiral_sym_ct_mu_a_x" IND_TEXT 

//* Define device -- xdev spiral_std_mu_x
std_mu_x_ind = INDDMY WITH TEXT "spiral_std_mu_x" IND_TEXT 

//* Define device -- xdev spiral_std_mu_z
std_mu_z_ind = INDDMY WITH TEXT "spiral_std_mu_z" IND_TEXT 

//* Define device -- xdev spiral_sym_mu_x
sym_mu_x_ind = INDDMY WITH TEXT "spiral_sym_mu_x" IND_TEXT 

//* Define device -- xdev spiral_sym_mu_z
sym_mu_z_ind = INDDMY WITH TEXT "spiral_sym_mu_z" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_x_a
sym_ct_mu_x_a_ind = INDDMY WITH TEXT "spiral_sym_ct_mu_x_a" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_z_a
sym_ct_mu_z_a_ind = INDDMY WITH TEXT "spiral_sym_ct_mu_z_a" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_z_x
sym_ct_mu_z_x_ind = INDDMY WITH TEXT "spiral_sym_ct_mu_z_x" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_m2za_z_a
sym_ct_m2za_z_a_ind = INDDMY WITH TEXT "spiral_sym_ct_m2za_z_a" IND_TEXT 

//* Define device -- xdev spiral_std_m2za_za
std_m2za_za_ind = INDDMY WITH TEXT "spiral_std_m2za_za" IND_TEXT 

//* Define device -- xdev spiral_sym_m2za_z
sym_m2za_z_ind = INDDMY WITH TEXT "spiral_sym_m2za_z" IND_TEXT 

//***** Define connectivity/via layer -- PROBEM1_T ****
PROBEM1_T1 = SIZE PROBEM1 BY 0.005 
PROBEM1_T = PROBEM1_T1 NOT PROBEM1 

//***** Define connectivity/via layer -- PROBEM2_T ****
PROBEM2_T1 = SIZE PROBEM2 BY 0.005 
PROBEM2_T = PROBEM2_T1 NOT PROBEM2 

//***** Define connectivity/via layer -- PROBEM3_T ****
PROBEM3_T1 = SIZE PROBEM3 BY 0.005 
PROBEM3_T = PROBEM3_T1 NOT PROBEM3 

//***** Define connectivity/via layer -- PROBEM4_T ****
PROBEM4_T1 = SIZE PROBEM4 BY 0.005 
PROBEM4_T = PROBEM4_T1 NOT PROBEM4 

//***** Define connectivity/via layer -- dnw_4vnjfet_s ****
dnw_4vnjfet_s1 = dnw_4vnjfet NOT njf_4_mac_reg 
dnw_4vnjfet_s = dnw_4vnjfet_s1 NOT dnw_4vnjfet_d 

//***** Define connectivity/via layer -- psub_under_jfet ****
psub_under_jfet_a = psub_term_e INTERACT DNWi 
psub_under_jfet_b = psub_under_jfet_a OR DNWi 
psub_under_jfet_4v = psub_under_jfet_b AND HVJDMY 
psub_under_jfet_njf_2d5v = psub_under_jfet_b INTERACT njf_poly_25_dmy 
psub_under_jfet_1 = psub_under_jfet_4v OR psub_under_jfet_njf_2d5v 

//* Define layer -- pjf_poly_25_mac_reg_1
pjf_poly_25_mac_reg_1_tmp01 = OD25 NOT DNWi
pjf_poly_25_mac_reg_1_tmp02 = pjf_poly_25_mac_reg_1_tmp01 AND OD
pjf_poly_25_mac_reg_1_tmp03 = pjf_poly_25_mac_reg_1_tmp02 NOT NW
pjf_poly_25_mac_reg_1_tmp04 = pjf_poly_25_mac_reg_1_tmp03 NOT NT_N
pjf_poly_25_mac_reg_1_tmp05 = pjf_poly_25_mac_reg_1_tmp04 NOT OD18
pjf_poly_25_mac_reg_1_tmp06 = pjf_poly_25_mac_reg_1_tmp05 NOT EHVT_N
pjf_poly_25_mac_reg_1_tmp07 = pjf_poly_25_mac_reg_1_tmp06 NOT EHVT_P
pjf_poly_25_mac_reg_1_tmp08 = pjf_poly_25_mac_reg_1_tmp07 NOT VTH_N
pjf_poly_25_mac_reg_1_tmp09 = pjf_poly_25_mac_reg_1_tmp08 NOT VTH_P
pjf_poly_25_mac_reg_1_tmp10 = pjf_poly_25_mac_reg_1_tmp09 NOT VTL_N
pjf_poly_25_mac_reg_1_tmp11 = pjf_poly_25_mac_reg_1_tmp10 NOT VTL_P
pjf_poly_25_mac_reg_1_tmp12 = pjf_poly_25_mac_reg_1_tmp11 NOT ELVT_N
pjf_poly_25_mac_reg_1_tmp13 = pjf_poly_25_mac_reg_1_tmp12 NOT ELVT_P
pjf_poly_25_mac_reg_1_tmp14 = pjf_poly_25_mac_reg_1_tmp13 NOT CORELDD_IO
pjf_poly_25_mac_reg_1_tmp15 = pjf_poly_25_mac_reg_1_tmp14 NOT RH
pjf_poly_25_mac_reg_1_tmp16 = pjf_poly_25_mac_reg_1_tmp15 NOT NWDMY
pjf_poly_25_mac_reg_1_tmp17 = pjf_poly_25_mac_reg_1_tmp16 NOT VAR
pjf_poly_25_mac_reg_1_tmp18 = pjf_poly_25_mac_reg_1_tmp17 NOT BJTDMY
pjf_poly_25_mac_reg_1_tmp19 = pjf_poly_25_mac_reg_1_tmp18 NOT DIODMY
pjf_poly_25_mac_reg_1_tmp20 = pjf_poly_25_mac_reg_1_tmp19 NOT RPDMY
pjf_poly_25_mac_reg_1_tmp21 = pjf_poly_25_mac_reg_1_tmp20 NOT HVD_N
pjf_poly_25_mac_reg_1_tmp22 = pjf_poly_25_mac_reg_1_tmp21 NOT HVD_P
pjf_poly_25_mac_reg_1_tmp23 = pjf_poly_25_mac_reg_1_tmp22 NOT ULP_WR
pjf_poly_25_mac_reg_1_tmp24 = pjf_poly_25_mac_reg_1_tmp23 NOT OD25_33
pjf_poly_25_mac_reg_1_tmp25 = pjf_poly_25_mac_reg_1_tmp24 NOT OD25_18
pjf_poly_25_mac_reg_1_tmp26 = pjf_poly_25_mac_reg_1_tmp25 AND ANALOG
pjf_poly_25_mac_reg_1_tmp27 = pjf_poly_25_mac_reg_1_tmp26 NOT FGDDMY
pjf_poly_25_mac_reg_1_tmp28 = pjf_poly_25_mac_reg_1_tmp27 NOT SERPDMY
pjf_poly_25_mac_reg_1_tmp29 = pjf_poly_25_mac_reg_1_tmp28 AND JNW
pjf_poly_25_mac_reg_1_tmp30 = pjf_poly_25_mac_reg_1_tmp29 AND JDMY
pjf_poly_25_mac_reg_1_tmp31 = pjf_poly_25_mac_reg_1_tmp30 NOT HVJDMY
pjf_poly_25_mac_reg_1_tmp32 = pjf_poly_25_mac_reg_1_tmp31 NOT SBDDMY
pjf_poly_25_mac_reg_1_tmp33 = pjf_poly_25_mac_reg_1_tmp32 NOT JFET_N4V_DRAIN
pjf_poly_25_mac_reg_1_tmp34 = pjf_poly_25_mac_reg_1_tmp33 NOT JFET_BLK_DNW
pjf_poly_25_mac_reg_1 = pjf_poly_25_mac_reg_1_tmp34 NOT JFET_BLK_PSUB

pjf_poly_25_mac_reg_2 = pjf_poly_25_mac_reg_1 INTERACT POI 
pjf_poly_25_mac_reg_3 = pjf_poly_25_mac_reg_2 INTERACT NP 
pjf_poly_25_mac_reg_4 = pjf_poly_25_mac_reg_3 INTERACT PP 
pjf_poly_25_mac_reg = pjf_poly_25_mac_reg_4 INTERACT RPO 
psub_under_jfet_pjf_2d5v_1 = JNW INTERACT pjf_poly_25_mac_reg 
psub_under_jfet_pjf_2d5v_2 = psub_term_e INTERACT psub_under_jfet_pjf_2d5v_1 
psub_under_jfet_pjf_2d5v = psub_under_jfet_pjf_2d5v_1 OR psub_under_jfet_pjf_2d5v_2 
psub_under_jfet = psub_under_jfet_1 OR psub_under_jfet_pjf_2d5v 

//***** Define connectivity/via layer -- rwel_4vpjfet_d ****
rwel_4vpjfet_d = rwel_4vpjfet NOT INTERACT RPO 

//***** Define connectivity/via layer -- rwel_4vpjfet_s ****
rwel_4vpjfet_s = rwel_4vpjfet INTERACT RPO 

//***** Define connectivity/via layer -- tndiff_jfet ****
tndiff_jfet_1 = tndiff_all AND ANALOG 
tndiff_jfet = tndiff_jfet_1 AND JDMY 

//***** Define connectivity/via layer -- tpdiff_jfet ****
tpdiff_jfet_1 = tpdiff_all AND ANALOG 
tpdiff_jfet = tpdiff_jfet_1 AND JDMY 

//* Define device -- xdev njf_poly_25_mac
PP_2d5v_JFET = PP AND njf_poly_25_mac_reg 

//* Define device -- xdev pjf_poly_25_mac
NP_2d5v_JFET = NP AND pjf_poly_25_mac_reg 

//* Define ERC or other layers
gate1_not_IO2a = gate1 NOT OD18 
gate1_not_IO2b = gate1_not_IO2a NOT OD25 
gate1_not_IO2c = gate1_not_IO2b NOT OD33 
gate1_not_IO2 = gate1_not_IO2c NOT OD_50F 
dfm_gate1 = gate1 NOT INTERACT SRM 
dfm_gate2 = SIZE dfm_gate1 BY WPED
nw_alvt = NW OR NWLVT  //  NW -> NW OR NWLVT for alvt devices
c_pmall1 = nw_alvt OR HVNW 
c_pmall = c_pmall1 NOT NT_N  //  pmos all for WPE (clear tone)
wpe_hv = OD_50F OR OD_HV 
pHV = c_pmall AND wpe_hv  // for 5V
c_pmHV_aux = dfm_gate2 AND pHV 
nw_ntn = nw_alvt OR NT_N 
nIO_1 = OD_thk1 NOT nw_ntn 
nIO = nIO_1 NOT JDMY  //  nmos IO for WPE (clear tone)

//***** Define connectivity/via layer -- polyCont ****
cg_cont1 = CO AND CGCT 
cg_cont = cg_cont1 AND CG  //  contact of control gate memory device
CO_lv = CO NOT cg_cont 
polyCont = CO_lv INTERACT POx 

//***** Define connectivity/via layer -- indm5c ****
indm5 = indm6a AND M5Y 
indm5c = indm5 AND IND_D4 

//***** Define connectivity/via layer -- RFDMY_HIA_psub ****
RFDMY_HIA_psub = RFDMY_HIA_bulk NOT nxwell 

//***** Define connectivity/via layer -- psub_under_jfet_via ****
psub_under_jfet_via1 = psub_under_jfet AND psub 
psub_under_jfet_via = psub_under_jfet_via1 NOT rwel_ori 

//***** Define connectivity/via layer -- lv_pplug ****
lvttdiff = tpdiff_all AND LVBJTDMY 
lv_pplug2 = lvttdiff INTERACT CO 
psub_lvbjt1 = psub NOT LVBJTDMY 
psub_lvbjt = psub_lvbjt1 OR rwel 
lv_pplug3 = lv_pplug2 NOT psub_lvbjt 
lv_pplug = lv_pplug3 NOT nxwell 

//***** Define connectivity/via layer -- mom3p1 ****
mom3p11 = metal3 AND MOMDMY23 
mom3p1 = mom3p11 INTERACT MOMDMY25 
MOM_field2 = M2 AND MOMDMY2 

//***** Define connectivity/via layer -- lvbjtdmy_via ****
LVBJTDMY_psub = LVBJTDMY NOT nxwell 
lvbjtdmy_via1 = LVBJTDMY_psub AND psub 
lvbjtdmy_via = lvbjtdmy_via1 NOT rwel 

//***** Define connectivity/via layer -- VIA1 ****
VIA1 = COPY VIA1i  //  VIA1
pnwdio_r50a = pnwdio_r6 AND OD_50F 
pnwdio_r50 = pnwdio_r50a AND DILVS2_EF 
pnwdio_r50_wo_dnw = pnwdio_r50 NOT INTERACT DNW 

//***** Define connectivity/via layer -- nxwell_npn ****
ncollsa = ncolls TOUCH cemit1 
iemit1 = ttdiff AND inbase1  //  define I/O  BJT[P1] emitter
ncollsb = ncolls TOUCH iemit1 
ncollall1 = ncollsa OR ncollsb 
ncollsc = ncolls TOUCH i5emit1 
ncollall = ncollall1 OR ncollsc 
nxwell_npn = ncolls NOT ncollall 

//***** Define connectivity/via layer -- hia_rf_pplug ****
hia_rf_pplug1 = tpdiff_all AND RFDMY_HIA_bulk 
hia_rf_pplug2 = hia_rf_pplug1 INTERACT CO 
tndiffco = tndiff_all INTERACT CO 
hia_rf_pplug3 = hia_rf_pplug1 INTERACT tndiffco 
hia_rf_pplug4 = hia_rf_pplug2 OR hia_rf_pplug3 
hia_rf_pplug = hia_rf_pplug4 NOT nxwell 

//***** Define connectivity/via layer -- PROBEM2_B ****
PROBEM2_B = PROBEM2_T AND BULK 

//***** Define connectivity/via layer -- odCont ****
odCont1 = CO INTERACT OD 
p3Cont = CO_lv INTERACT p3 
odCont2 = odCont1 NOT p3Cont 
odCont = odCont2 NOT fpo 

//***** Define connectivity/via layer -- PROBEM1_B ****
PROBEM1_B = PROBEM1_T AND BULK 

//***** Define connectivity/via layer -- nplug ****
nplug_g = nplug2 AND GATED 
nplug_g_sz = SIZE nplug_g BY -0.001 
nplug_no_g = nplug2 NOT GATED 
nplug = nplug_g_sz OR nplug_no_g 

//***** Define connectivity/via layer -- mom5m1 ****
mom5p11 = metal5 AND MOMDMY23 
mom5m1 = mom5p11 NOT INTERACT MOMDMY25 
erc_pmos_gates1 = COPY tpgate1 
erc_pmos_gates = erc_pmos_gates1 NOT VARi  //  Exclude RF, SRAM, VAR

//***** Define connectivity/via layer -- d_tpdiff_hv ****
d_tpdiff_hv_11 = tpdiff_all AND HVD_P 
d_tpdiff_hv_1 = d_tpdiff_hv_11 NOT INTERACT pgate_demos_hv25_mac 
d_tpdiff_hv_21 = pthin2_hv_d INTERACT pgate_demos_hv25_mac 
d_tpdiff_hv_2 = d_tpdiff_hv_21 NOT pgate_demos_hv25_mac 
d_tpdiff_hv = d_tpdiff_hv_1 OR d_tpdiff_hv_2 

//***** Define connectivity/via layer -- mom5p2 ****
mom5p21 = metal5 AND MOMDMY24 
mom5p2 = mom5p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- ntap ****
xwell = NW OUTSIDE NWDMY 
ntapx = tndiff1 AND xwell 
ntap1 = ntapx NOT BJTDMY 
ntap = ntap1 AND plug_sel 

//***** Define connectivity/via layer -- PROBEM4_B ****
PROBEM4_B = PROBEM4_T AND BULK 

//***** Define connectivity/via layer -- hvptap ****
hvptap1 = tpdiff_all AND PSUBi 
hvptap2 = hvptap1 INTERACT CO 
hvptap3 = hvptap1 INTERACT tndiffco 
hvptap = hvptap2 OR hvptap3 
pCore = c_pmall NOT wpe_hv 
rppolywo_serp_d_aux = rppolywo_serp_d AND SERPDMY 
c_nmIO_aux = dfm_gate2 AND nIO 
MOM_field3 = M3 AND MOMDMY3 

//***** Define connectivity/via layer -- nxwell_JNW_via ****
nxwell_JNW_via = nxwell AND JNW 
nxwell_float1 = nxwell NOT INTERACT VAR  //  exclude nwell under VAR for floating nwell check
nxwell_float2 = nxwell_float1 NOT INTERACT trwell  //  exclude nwell resistor for floating nwell check
nxwell_float3 = nxwell_float2 NOT TCDDMY  //  exclude dummy nwell under TCDDMY
nxwell_float = nxwell_float3 NOT SBDDMY  //  exclude nwell under SBDDMY

//***** Define connectivity/via layer -- PROBEM3_B ****
PROBEM3_B = PROBEM3_T AND BULK 

//***** Define connectivity/via layer -- VIA2 ****
VIA2 = COPY VIA2i  //  VIA2
pIO = c_pmall NOT wpe_hv  // for 1.8V/2.5v/3.3V

//***** Define connectivity/via layer -- alvtpplug ****
alvtpplug1 = tpdiff_all AND PWLVT 
alvtpplug2 = alvtpplug1 INTERACT CO 
alvtpplug3 = alvtpplug1 INTERACT tndiffco 
alvtpplug = alvtpplug2 OR alvtpplug3  //  define PWLVT contact

//***** Define connectivity/via layer -- mom5m2 ****
mom5m2 = mom5p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- ntaphv ****
hvntap1 = tndiff_all AND HVNW 
hvntap2 = hvntap1 INTERACT CO 
tpdiffco = tpdiff_all INTERACT CO 
hvntap3 = hvntap1 INTERACT tpdiffco 
ntaphv = hvntap2 OR hvntap3 
d_nmcore = OD2 OR nw_ntn  //  nmos core for WPE (Dark tone)
nCore = BULK NOT d_nmcore  //  nmos core for WPE (clear tone)
c_nmcore_aux = dfm_gate2 AND nCore 

//***** Define connectivity/via layer -- alvtnplug ****
alvtnplug1 = tndiff_all AND NWLVT 
alvtnplug2 = alvtnplug1 INTERACT CO 
alvtnplug3 = alvtnplug1 INTERACT tpdiffco 
alvtnplug = alvtnplug2 OR alvtnplug3  //  define NWLVT contact
nxwell_hv = COPY HVNW 

//***** Define connectivity/via layer -- dnwc ****
dnwc_ori = DNWi AND anwell 
dnwc_not = JNW NOT NW 
dnwc = dnwc_ori NOT dnwc_not 

//***** Define connectivity/via layer -- p3_term ****
p3_term = p3 AND poly_org 

//***** Define connectivity/via layer -- mom4p2 ****
mom4p21 = metal4 AND MOMDMY24 
mom4p2 = mom4p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- VIA5 ****
VIA5 = COPY VIA5i  //  VIA5
c_pmIO_aux = dfm_gate2 AND pIO 

//***** Define connectivity/via layer -- mom4m2 ****
mom4m2 = mom4p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- VIA3 ****
VIA3 = COPY VIA3i  //  VIA3

//***** Define connectivity/via layer -- pplug ****
pplug_g = pplug2 AND GATED 
pplug_g_sz = SIZE pplug_g BY -0.001 
pplug_no_g = pplug2 NOT GATED 
pplug = pplug_g_sz OR pplug_no_g 

//***** Define connectivity/via layer -- dnw_4vnjfet_d_all ****
dnw_4vnjfet_d_all = dnw_4vnjfet_d OR DNW 
MOM_field4 = M4 AND MOMDMY4 

//***** Define connectivity/via layer -- mom3m2 ****
mom3p21 = metal3 AND MOMDMY24 
mom3m2 = mom3p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- hia_rf_via ****
hia_rf_via1 = RFDMY_HIA_psub AND psub 
hia_rf_via = hia_rf_via1 NOT rwel 

//***** Define connectivity/via layer -- rfdmy56_via ****
rfdmy56_via1 = rfdmy56 AND psub 
rwel_out = rwel INSIDE rfdmy56 
rfdmy56_via2 = rfdmy56_via1 NOT rwel_out 
nw_dnw = NW INTERACT rwel 
rfdmy56_via = rfdmy56_via2 NOT nw_dnw 

//***** Define connectivity/via layer -- d_tndiff_hv ****
d_tndiff_hv_11 = tndiff_all AND HVD_N 
d_tndiff_hv_1 = d_tndiff_hv_11 NOT INTERACT ngate_demos_hv25_mac 
d_tndiff_hv_21 = nthin2_hv_d INTERACT ngate_demos_hv25_mac 
d_tndiff_hv_2 = d_tndiff_hv_21 NOT ngate_demos_hv25_mac 
d_tndiff_hv = d_tndiff_hv_1 OR d_tndiff_hv_2 

//***** Define connectivity/via layer -- mom4m1 ****
mom4p11 = metal4 AND MOMDMY23 
mom4m1 = mom4p11 NOT INTERACT MOMDMY25 
c_pmcore_aux = dfm_gate2 AND pCore 

//***** Define connectivity/via layer -- indm4c ****
indm4 = indm6a AND M4Y 
indm4c = indm4 AND IND_D4 

//***** Define connectivity/via layer -- VIA4 ****
VIA4 = COPY VIA4i  //  VIA4
MOM_field5 = M5 AND MOMDMY5 

//***** Define connectivity/via layer -- mom4p1 ****
mom4p1 = mom4p11 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom3p2 ****
mom3p2 = mom3p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- VIA6 ****
VIA6a = RV OR CBD 
VIA6b = VIA6a OR WRV 
VIA6 = VIA6b OR CB 

//***** Define connectivity/via layer -- n_pplug ****
n_pplug1 = mdiff INTERACT CO 
n_pplug2 = n_pplug1 AND PP 
n_pplug3 = n_pplug2 NOT nxwell 
n_pplug4 = n_pplug3 NOT NWLVT 
n_pplug5 = n_pplug4 NOT HVNW 
n_pplug6 = n_pplug5 NOT rwel_ori 
n_pplug7 = n_pplug6 AND n_psub 
n_pplug8 = n_pplug7 NOT vargt1_p  //  Avoid the misjudge of disconnection between pmoscap source and drain.
n_pplug = n_pplug8 NOT TCDDMY_all 
pnwdio_r50_wi_dnw = pnwdio_r50 INTERACT DNW 

//***** Define connectivity/via layer -- mom5p1 ****
mom5p1 = mom5p11 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom3m1 ****
mom3m1 = mom3p11 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- dnw_4vnjfet_s_all ****
dnw_4vnjfet_s_all = dnw_4vnjfet_s OR DNW 

//***** Define connectivity/via layer -- ptap ****
ptap1 = tpdiff1 AND psub 
ptap = ptap1 AND plug_sel 

//***** Define connectivity/via layer -- poly_mom ****
MOMDMY_all = MOMDMY0 OR MOMDMY100 
poly_mom = poly_org INTERACT MOMDMY_all 
nHV = wpe_hv NOT nw_ntn  //  nmos 5V for WPE (clear tone)
c_nmHV_aux = dfm_gate2 AND nHV 
MOM_field1 = M1 AND MOMDMY1 
erc_nmos_gates1 = tngate1 OR dngate_25_fgd_mac 
erc_nmos_gates2 = erc_nmos_gates1 OR ngate_25_fgd_mac 
erc_nmos_gates = erc_nmos_gates2 NOT VARi  //   Exclude RF, SRAM, VAR
//#############################################
//# CONNECTION                                #
//#############################################
CONNECT cemit1 tpdiff
CONNECT cgate CG
CONNECT cnbase1 tndiff BY nplug
CONNECT cnemit1 tndiff
CONNECT cpbase1 tpdiff BY pplug
CONNECT d_tndiff_dehv tndiff
CONNECT d_tndiff_hv tndiff
CONNECT d_tpdiff_hv tpdiff
CONNECT metal1 CG BY cg_cont
CONNECT metal1 d_tndiff BY odCont
CONNECT metal1 d_tpdiff BY odCont
CONNECT metal1 eg BY polyCont
CONNECT metal1 p3 BY p3Cont
CONNECT metal1 poly BY polyCont
CONNECT metal1 s_tndiff BY odCont
CONNECT metal1 s_tpdiff BY odCont
CONNECT metal1 tndiff BY odCont
CONNECT metal1 tndiff_jfet BY odCont
CONNECT metal1 tndiff_sbd BY odCont
CONNECT metal1 tpdiff BY odCont
CONNECT metal1 tpdiff_jfet BY odCont
CONNECT metal1 tpdiff_sbd BY odCont
CONNECT metal1 ydio_t BY odCont
CONNECT metal2 metal1 BY VIA1
CONNECT metal3 metal2 BY VIA2
CONNECT metal3 mom3m1
CONNECT metal3 mom3m2
CONNECT metal3 mom3p1
CONNECT metal3 mom3p2
CONNECT metal4 indm4c
CONNECT metal4 metal3 BY VIA3
CONNECT metal4 mom4m1
CONNECT metal4 mom4m2
CONNECT metal4 mom4p1
CONNECT metal4 mom4p2
CONNECT metal5 indm5c
CONNECT metal5 metal4 BY VIA4
CONNECT metal5 mom5m1
CONNECT metal5 mom5m2
CONNECT metal5 mom5p1
CONNECT metal5 mom5p2
CONNECT metal6 indm6c
CONNECT metal6 indm6m
CONNECT metal6 indm6p
CONNECT metal6 metal5 BY VIA5
CONNECT metal7 indm7c
CONNECT metal7 metal6 BY VIA6
CONNECT n_pplug tpdiff
CONNECT ncoll1 nxwell_npn
CONNECT nplug tndiff
CONNECT ntap tndiff
CONNECT poly p3_term
CONNECT poly poly3
CONNECT poly poly_mom
CONNECT poly poly_rf
CONNECT pplug tpdiff
CONNECT ptap tpdiff
CONNECT s_tndiff_dehv tndiff
CONNECT s_tndiff_hv tndiff
CONNECT s_tpdiff_hv tpdiff
CONNECT tiod tndiff
CONNECT tiod tpdiff
CONNECT tndiff cg_drain
CONNECT tndiff comso
CONNECT tndiff crown BY blc
CONNECT tndiff nxwell_npn BY nplug
CONNECT tndiff tpdiff
CONNECT tndiff ydio_t
CONNECT tndiff_jfet tndiff
CONNECT tndiff_jfet tpdiff
CONNECT tndiff_jfet tpdiff_jfet
CONNECT tndiff_sbd tndiff
CONNECT tndiff_sbd tpdiff
CONNECT tndiff_sbd tpdiff_sbd
CONNECT tpdiff crown BY blc
CONNECT tpdiff_jfet tndiff
CONNECT tpdiff_jfet tpdiff
CONNECT tpdiff_sbd tndiff
CONNECT tpdiff_sbd tpdiff
CONNECT wlgate poly

#IFDEF RC_DECK
CONNECT  tndiff_jfet nxwell BY nplug
CONNECT  nxwell dnw_4vnjfet_s_all BY dnwc
CONNECT  nxwell dnw_4vnjfet_d_all BY dnwc
CONNECT  nxwell dnw_4vnjfet_s BY dnwc
CONNECT  nxwell tndiff_dmy BY nplug_dmy
CONNECT  nxwell PROBEM2_T BY PROBEM2_B
CONNECT  nxwell DNW BY dnwc
CONNECT  nxwell JNW BY nxwell_JNW_via
CONNECT  nxwell PROBEM3_T BY PROBEM3_B
CONNECT  nxwell PROBEM1_T BY PROBEM1_B
CONNECT  nxwell PROBEM4_T BY PROBEM4_B
CONNECT  nxwell dnw_4vnjfet_d BY dnwc
CONNECT  tpdiff rwel_4vnjfet BY pplug
CONNECT  tpdiff PSUBi BY hvptap
CONNECT  tpdiff psub_term BY pplug
CONNECT  tpdiff HVPW BY hvptap
CONNECT  tpdiff coll1 BY pplug
CONNECT  tpdiff rwel BY pplug
CONNECT  tpdiff PWLVT BY alvtpplug
CONNECT  tpdiff rwel_4vpjfet_s BY pplug
CONNECT  tpdiff psub BY pplug
CONNECT  tpdiff LVBJTDMY BY lv_pplug
CONNECT  tpdiff rwel_4vpjfet_d BY pplug
CONNECT  tpdiff RFDMY_HIA_bulk BY hia_rf_pplug
CONNECT  psub LVBJTDMY_psub BY lvbjtdmy_via
CONNECT  psub psub_under_jfet BY psub_under_jfet_via
CONNECT  psub PROBEM2_T BY PROBEM2_B
CONNECT  psub RFDMY_HIA_psub BY hia_rf_via
CONNECT  psub PROBEM3_T BY PROBEM3_B
CONNECT  psub PROBEM1_T BY PROBEM1_B
CONNECT  psub rfdmy56 BY rfdmy56_via
CONNECT  psub tpdiff_dmy BY pplug_dmy
CONNECT  psub PROBEM4_T BY PROBEM4_B
CONNECT  tpdiff_sbd rwel_4vnjfet BY pplug
CONNECT  tpdiff_sbd rwel BY pplug
CONNECT  tpdiff_sbd psub BY pplug
CONNECT  tpdiff_sbd rwel_4vpjfet_d BY pplug
CONNECT  tndiff_sbd nxwell BY nplug
CONNECT  tndiff nxwell BY nplug
CONNECT  tndiff NWLVT BY alvtnplug
CONNECT  tndiff HVNW BY ntaphv
CONNECT  tpdiff_jfet rwel_4vnjfet BY pplug
CONNECT  tpdiff_jfet rwel BY pplug
CONNECT  tpdiff_jfet rwel_4vpjfet_s BY pplug
CONNECT  tpdiff_jfet psub BY pplug
#ELSE
SCONNECT tndiff_jfet nxwell BY nplug
SCONNECT nxwell dnw_4vnjfet_s_all BY dnwc
SCONNECT nxwell dnw_4vnjfet_d_all BY dnwc
SCONNECT nxwell dnw_4vnjfet_s BY dnwc
SCONNECT nxwell tndiff_dmy BY nplug_dmy
SCONNECT nxwell PROBEM2_T BY PROBEM2_B
SCONNECT nxwell DNW BY dnwc
SCONNECT nxwell JNW BY nxwell_JNW_via
SCONNECT nxwell PROBEM3_T BY PROBEM3_B
SCONNECT nxwell PROBEM1_T BY PROBEM1_B
SCONNECT nxwell PROBEM4_T BY PROBEM4_B
SCONNECT nxwell dnw_4vnjfet_d BY dnwc
SCONNECT tpdiff rwel_4vnjfet BY pplug
#IFNDEF NW_RING
  SCONNECT tpdiff n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff PSUBi BY hvptap
SCONNECT tpdiff psub_term BY pplug
SCONNECT tpdiff HVPW BY hvptap
SCONNECT tpdiff coll1 BY pplug
SCONNECT tpdiff rwel BY pplug
SCONNECT tpdiff PWLVT BY alvtpplug
SCONNECT tpdiff rwel_4vpjfet_s BY pplug
SCONNECT tpdiff psub BY pplug
SCONNECT tpdiff LVBJTDMY BY lv_pplug
SCONNECT tpdiff rwel_4vpjfet_d BY pplug
SCONNECT tpdiff RFDMY_HIA_bulk BY hia_rf_pplug
SCONNECT psub LVBJTDMY_psub BY lvbjtdmy_via
SCONNECT psub psub_under_jfet BY psub_under_jfet_via
SCONNECT psub PROBEM2_T BY PROBEM2_B
SCONNECT psub RFDMY_HIA_psub BY hia_rf_via
SCONNECT psub PROBEM3_T BY PROBEM3_B
SCONNECT psub PROBEM1_T BY PROBEM1_B
SCONNECT psub rfdmy56 BY rfdmy56_via
SCONNECT psub tpdiff_dmy BY pplug_dmy
SCONNECT psub PROBEM4_T BY PROBEM4_B
SCONNECT tpdiff_sbd rwel_4vnjfet BY pplug
SCONNECT tpdiff_sbd rwel BY pplug
SCONNECT tpdiff_sbd n_psub BY n_pplug
SCONNECT tpdiff_sbd psub BY pplug
SCONNECT tpdiff_sbd rwel_4vpjfet_d BY pplug
SCONNECT tndiff_sbd nxwell BY nplug
SCONNECT tndiff nxwell BY nplug
SCONNECT tndiff NWLVT BY alvtnplug
SCONNECT tndiff HVNW BY ntaphv
SCONNECT tpdiff_jfet rwel_4vnjfet BY pplug
SCONNECT tpdiff_jfet rwel BY pplug
SCONNECT tpdiff_jfet n_psub BY n_pplug
SCONNECT tpdiff_jfet rwel_4vpjfet_s BY pplug
SCONNECT tpdiff_jfet psub BY pplug
#ENDIF
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
OD_id = COPY OD
CONNECT OD_id
OD_p = DFM PROPERTY OD_id
    [ ODNET = NETID(OD_id) ]
#ENDIF
#ENDIF
all_mos_gates = ((((pgate_hv25_mac OR (pgate_hv25 OR (pgate_18_mac OR (phvgate_mac OR (pgate_25od_mac OR (pgate_25od OR (pgate_25ud_mac OR (pgate_25ud OR (pgate_25_mac OR (pgate_25 OR (pgate_18ud_mac OR (pgate_18ud OR (pgate_18 OR (phvgate OR (pgate_avt_mac OR (pgate_avt OR (plvgate_mac OR (plvgate OR (pgate_sullhc OR (pelvgate_mac OR (pelvgate OR (pgate_sdpnci OR (pgate_snci OR (pgate_s_ull10ttp OR (pgate_s_ull OR (pgate_s OR (pehvgate_mac OR (pehvgate OR (pgate_mac OR (pgate OR (ngate_18na_mac OR (ngate_18na OR (ngate_25naod_mac OR (ngate_25naod OR (ngate_25naud_mac OR (ngate_25naud OR (ngate_25na_mac OR (ngate_25na OR (dngate_18ud_mac OR (dngate_18ud OR (ngate_18ud_mac OR (ngate_18ud OR (dngate_18_mac OR (ngate_18_mac OR (n1hvgate_mac OR (nrgate_mac OR (dngate_25_ngd_mac OR (dngate_25_fgd_mac OR (dngate_ana25_mac OR (dngate_25od_mac OR (dngate_25od OR (dngate_25ud_mac OR (dngate_25ud OR (dngate_25_mac OR (dngate_25 OR (ngate_25_ngd_mac OR (ngate_25_fgd_mac OR (ngate_ana25_mac OR (ngate_25od_mac OR (ngate_25od OR (ngate_25ud_mac OR (ngate_25ud OR (ngate_25_mac OR (ngate_25 OR (dngate_18 OR (ngate_18 OR (n1hvgate OR (nrgate OR (ngate_sullhcpd OR (ngate_sullhcpg OR (ngate_sdpncipd OR (ngate_sdpncipg OR (ngate_sncipd OR (ngate_sncipg OR (ngate_spd_ull10ttprp OR (ngate_spg_ull10ttprp OR (ngate_spd_ull10ttp OR (ngate_spg_ull10ttp OR (ngate_spd_ull OR (ngate_spg_ull OR (ngate_spd OR (ngate_spg OR (ngate_hv25_mac OR (ngate_hv25 OR (ngate_mac OR (n1lvgate_mac OR (ngate OR (n1lvgate OR (n1elvgate_mac OR (nelvgate_mac OR (n1elvgate OR (nelvgate OR (nrgate_avt_mac OR (nrgate_avt OR (ngate_avt_mac OR (ngate_avt OR (n1ehvgate_mac OR (nehvgate_mac OR (n1ehvgate OR (nehvgate OR (nlvgate_mac OR (nhvgate_mac OR (nlvgate OR (nhvgate OR (nlavgate_mac OR (nlavgate OR (nlgate OR nlgate_mac))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) OR wlgate) OR vargt) OR vargt_18) OR vargt_25
poly = poly_org NOT all_mos_gates
tndiff_cut = tndiff_jfet OR (tndiff_sbd OR (comso OR (cg_drain OR (s_tndiff_dehv OR (d_tndiff_dehv OR (d_tndiff_hv OR s_tndiff_hv))))))
tpdiff_cut = tpdiff_jfet OR (tpdiff_sbd OR (d_tpdiff_hv OR s_tpdiff_hv))
tndiff = tndiff_all NOT tndiff_cut 
tpdiff = tpdiff_all NOT tpdiff_cut


 /* SPECIAL CONNECTIONS FOR without R diffusion */ 
CONNECT tndiff d_tndiff_hv
CONNECT cnbase1 d_tndiff_hv BY nplug 
CONNECT cnemit1 d_tndiff_hv 
CONNECT d_tndiff_dehv d_tndiff_hv 

CONNECT metal1 d_tndiff_hv BY odCont 
CONNECT nplug d_tndiff_hv 
CONNECT ntap d_tndiff_hv 
CONNECT s_tndiff_dehv d_tndiff_hv 
CONNECT s_tndiff_hv d_tndiff_hv 
CONNECT tiod d_tndiff_hv 
CONNECT d_tndiff_hv cg_drain 
CONNECT d_tndiff_hv comso 
CONNECT d_tndiff_hv crown BY blc 
CONNECT d_tndiff_hv nxwell_npn BY nplug 
CONNECT d_tndiff_hv tpdiff 
CONNECT d_tndiff_hv ydio_t 
CONNECT tndiff_jfet d_tndiff_hv 
CONNECT tndiff_sbd d_tndiff_hv 
CONNECT tpdiff_jfet d_tndiff_hv 
CONNECT tpdiff_sbd d_tndiff_hv 

CONNECT d_tndiff_hv s_tndiff_hv
CONNECT d_tndiff_hv d_tndiff_dehv
CONNECT d_tndiff_hv s_tndiff_dehv
CONNECT d_tndiff_hv cg_drain
CONNECT d_tndiff_hv comso
CONNECT d_tndiff_hv tndiff_sbd
CONNECT d_tndiff_hv tndiff_jfet
CONNECT tndiff s_tndiff_hv
CONNECT cnbase1 s_tndiff_hv BY nplug 
CONNECT cnemit1 s_tndiff_hv 
CONNECT d_tndiff_dehv s_tndiff_hv 
CONNECT d_tndiff_hv s_tndiff_hv 
CONNECT metal1 s_tndiff_hv BY odCont 
CONNECT nplug s_tndiff_hv 
CONNECT ntap s_tndiff_hv 
CONNECT s_tndiff_dehv s_tndiff_hv 

CONNECT tiod s_tndiff_hv 
CONNECT s_tndiff_hv cg_drain 
CONNECT s_tndiff_hv comso 
CONNECT s_tndiff_hv crown BY blc 
CONNECT s_tndiff_hv nxwell_npn BY nplug 
CONNECT s_tndiff_hv tpdiff 
CONNECT s_tndiff_hv ydio_t 
CONNECT tndiff_jfet s_tndiff_hv 
CONNECT tndiff_sbd s_tndiff_hv 
CONNECT tpdiff_jfet s_tndiff_hv 
CONNECT tpdiff_sbd s_tndiff_hv 

CONNECT s_tndiff_hv d_tndiff_dehv
CONNECT s_tndiff_hv s_tndiff_dehv
CONNECT s_tndiff_hv cg_drain
CONNECT s_tndiff_hv comso
CONNECT s_tndiff_hv tndiff_sbd
CONNECT s_tndiff_hv tndiff_jfet
CONNECT tndiff d_tndiff_dehv
CONNECT cnbase1 d_tndiff_dehv BY nplug 
CONNECT cnemit1 d_tndiff_dehv 

CONNECT d_tndiff_hv d_tndiff_dehv 
CONNECT metal1 d_tndiff_dehv BY odCont 
CONNECT nplug d_tndiff_dehv 
CONNECT ntap d_tndiff_dehv 
CONNECT s_tndiff_dehv d_tndiff_dehv 
CONNECT s_tndiff_hv d_tndiff_dehv 
CONNECT tiod d_tndiff_dehv 
CONNECT d_tndiff_dehv cg_drain 
CONNECT d_tndiff_dehv comso 
CONNECT d_tndiff_dehv crown BY blc 
CONNECT d_tndiff_dehv nxwell_npn BY nplug 
CONNECT d_tndiff_dehv tpdiff 
CONNECT d_tndiff_dehv ydio_t 
CONNECT tndiff_jfet d_tndiff_dehv 
CONNECT tndiff_sbd d_tndiff_dehv 
CONNECT tpdiff_jfet d_tndiff_dehv 
CONNECT tpdiff_sbd d_tndiff_dehv 

CONNECT d_tndiff_dehv s_tndiff_dehv
CONNECT d_tndiff_dehv cg_drain
CONNECT d_tndiff_dehv comso
CONNECT d_tndiff_dehv tndiff_sbd
CONNECT d_tndiff_dehv tndiff_jfet
CONNECT tndiff s_tndiff_dehv
CONNECT cnbase1 s_tndiff_dehv BY nplug 
CONNECT cnemit1 s_tndiff_dehv 
CONNECT d_tndiff_dehv s_tndiff_dehv 
CONNECT d_tndiff_hv s_tndiff_dehv 
CONNECT metal1 s_tndiff_dehv BY odCont 
CONNECT nplug s_tndiff_dehv 
CONNECT ntap s_tndiff_dehv 

CONNECT s_tndiff_hv s_tndiff_dehv 
CONNECT tiod s_tndiff_dehv 
CONNECT s_tndiff_dehv cg_drain 
CONNECT s_tndiff_dehv comso 
CONNECT s_tndiff_dehv crown BY blc 
CONNECT s_tndiff_dehv nxwell_npn BY nplug 
CONNECT s_tndiff_dehv tpdiff 
CONNECT s_tndiff_dehv ydio_t 
CONNECT tndiff_jfet s_tndiff_dehv 
CONNECT tndiff_sbd s_tndiff_dehv 
CONNECT tpdiff_jfet s_tndiff_dehv 
CONNECT tpdiff_sbd s_tndiff_dehv 

CONNECT s_tndiff_dehv cg_drain
CONNECT s_tndiff_dehv comso
CONNECT s_tndiff_dehv tndiff_sbd
CONNECT s_tndiff_dehv tndiff_jfet
CONNECT tndiff cg_drain
CONNECT cnbase1 cg_drain BY nplug 
CONNECT cnemit1 cg_drain 
CONNECT d_tndiff_dehv cg_drain 
CONNECT d_tndiff_hv cg_drain 
CONNECT metal1 cg_drain BY odCont 
CONNECT nplug cg_drain 
CONNECT ntap cg_drain 
CONNECT s_tndiff_dehv cg_drain 
CONNECT s_tndiff_hv cg_drain 
CONNECT tiod cg_drain 

CONNECT cg_drain comso 
CONNECT cg_drain crown BY blc 
CONNECT cg_drain nxwell_npn BY nplug 
CONNECT cg_drain tpdiff 
CONNECT cg_drain ydio_t 
CONNECT tndiff_jfet cg_drain 
CONNECT tndiff_sbd cg_drain 
CONNECT tpdiff_jfet cg_drain 
CONNECT tpdiff_sbd cg_drain 

CONNECT cg_drain comso
CONNECT cg_drain tndiff_sbd
CONNECT cg_drain tndiff_jfet
CONNECT tndiff comso
CONNECT cnbase1 comso BY nplug 
CONNECT cnemit1 comso 
CONNECT d_tndiff_dehv comso 
CONNECT d_tndiff_hv comso 
CONNECT metal1 comso BY odCont 
CONNECT nplug comso 
CONNECT ntap comso 
CONNECT s_tndiff_dehv comso 
CONNECT s_tndiff_hv comso 
CONNECT tiod comso 
CONNECT comso cg_drain 

CONNECT comso crown BY blc 
CONNECT comso nxwell_npn BY nplug 
CONNECT comso tpdiff 
CONNECT comso ydio_t 
CONNECT tndiff_jfet comso 
CONNECT tndiff_sbd comso 
CONNECT tpdiff_jfet comso 
CONNECT tpdiff_sbd comso 

CONNECT comso tndiff_sbd
CONNECT comso tndiff_jfet
CONNECT tndiff tndiff_sbd
CONNECT cnbase1 tndiff_sbd BY nplug 
CONNECT cnemit1 tndiff_sbd 
CONNECT d_tndiff_dehv tndiff_sbd 
CONNECT d_tndiff_hv tndiff_sbd 
CONNECT metal1 tndiff_sbd BY odCont 
CONNECT nplug tndiff_sbd 
CONNECT ntap tndiff_sbd 
CONNECT s_tndiff_dehv tndiff_sbd 
CONNECT s_tndiff_hv tndiff_sbd 
CONNECT tiod tndiff_sbd 
CONNECT tndiff_sbd cg_drain 
CONNECT tndiff_sbd comso 
CONNECT tndiff_sbd crown BY blc 
CONNECT tndiff_sbd nxwell_npn BY nplug 
CONNECT tndiff_sbd tpdiff 
CONNECT tndiff_sbd ydio_t 
CONNECT tndiff_jfet tndiff_sbd 

CONNECT tpdiff_jfet tndiff_sbd 
CONNECT tpdiff_sbd tndiff_sbd 

CONNECT tndiff_sbd tndiff_jfet
CONNECT tndiff tndiff_jfet
CONNECT cnbase1 tndiff_jfet BY nplug 
CONNECT cnemit1 tndiff_jfet 
CONNECT d_tndiff_dehv tndiff_jfet 
CONNECT d_tndiff_hv tndiff_jfet 
CONNECT metal1 tndiff_jfet BY odCont 
CONNECT nplug tndiff_jfet 
CONNECT ntap tndiff_jfet 
CONNECT s_tndiff_dehv tndiff_jfet 
CONNECT s_tndiff_hv tndiff_jfet 
CONNECT tiod tndiff_jfet 
CONNECT tndiff_jfet cg_drain 
CONNECT tndiff_jfet comso 
CONNECT tndiff_jfet crown BY blc 
CONNECT tndiff_jfet nxwell_npn BY nplug 
CONNECT tndiff_jfet tpdiff 
CONNECT tndiff_jfet ydio_t 

CONNECT tndiff_sbd tndiff_jfet 
CONNECT tpdiff_jfet tndiff_jfet 
CONNECT tpdiff_sbd tndiff_jfet 

CONNECT tpdiff d_tpdiff_hv
CONNECT cemit1 d_tpdiff_hv 
CONNECT cpbase1 d_tpdiff_hv BY pplug 

CONNECT metal1 d_tpdiff_hv BY odCont 
CONNECT n_pplug d_tpdiff_hv 
CONNECT pplug d_tpdiff_hv 
CONNECT ptap d_tpdiff_hv 
CONNECT s_tpdiff_hv d_tpdiff_hv 
CONNECT tiod d_tpdiff_hv 
CONNECT tndiff d_tpdiff_hv 
CONNECT tndiff_jfet d_tpdiff_hv 
CONNECT tndiff_sbd d_tpdiff_hv 
CONNECT d_tpdiff_hv crown BY blc 
CONNECT tpdiff_jfet d_tpdiff_hv 
CONNECT tpdiff_sbd d_tpdiff_hv 

CONNECT d_tpdiff_hv s_tpdiff_hv
CONNECT d_tpdiff_hv tpdiff_sbd
CONNECT d_tpdiff_hv tpdiff_jfet
CONNECT tpdiff s_tpdiff_hv
CONNECT cemit1 s_tpdiff_hv 
CONNECT cpbase1 s_tpdiff_hv BY pplug 
CONNECT d_tpdiff_hv s_tpdiff_hv 
CONNECT metal1 s_tpdiff_hv BY odCont 
CONNECT n_pplug s_tpdiff_hv 
CONNECT pplug s_tpdiff_hv 
CONNECT ptap s_tpdiff_hv 

CONNECT tiod s_tpdiff_hv 
CONNECT tndiff s_tpdiff_hv 
CONNECT tndiff_jfet s_tpdiff_hv 
CONNECT tndiff_sbd s_tpdiff_hv 
CONNECT s_tpdiff_hv crown BY blc 
CONNECT tpdiff_jfet s_tpdiff_hv 
CONNECT tpdiff_sbd s_tpdiff_hv 

CONNECT s_tpdiff_hv tpdiff_sbd
CONNECT s_tpdiff_hv tpdiff_jfet
CONNECT tpdiff tpdiff_sbd
CONNECT cemit1 tpdiff_sbd 
CONNECT cpbase1 tpdiff_sbd BY pplug 
CONNECT d_tpdiff_hv tpdiff_sbd 
CONNECT metal1 tpdiff_sbd BY odCont 
CONNECT n_pplug tpdiff_sbd 
CONNECT pplug tpdiff_sbd 
CONNECT ptap tpdiff_sbd 
CONNECT s_tpdiff_hv tpdiff_sbd 
CONNECT tiod tpdiff_sbd 
CONNECT tndiff tpdiff_sbd 
CONNECT tndiff_jfet tpdiff_sbd 
CONNECT tndiff_sbd tpdiff_sbd 
CONNECT tpdiff_sbd crown BY blc 
CONNECT tpdiff_jfet tpdiff_sbd 


CONNECT tpdiff_sbd tpdiff_jfet
CONNECT tpdiff tpdiff_jfet
CONNECT cemit1 tpdiff_jfet 
CONNECT cpbase1 tpdiff_jfet BY pplug 
CONNECT d_tpdiff_hv tpdiff_jfet 
CONNECT metal1 tpdiff_jfet BY odCont 
CONNECT n_pplug tpdiff_jfet 
CONNECT pplug tpdiff_jfet 
CONNECT ptap tpdiff_jfet 
CONNECT s_tpdiff_hv tpdiff_jfet 
CONNECT tiod tpdiff_jfet 
CONNECT tndiff tpdiff_jfet 
CONNECT tndiff_jfet tpdiff_jfet 
CONNECT tndiff_sbd tpdiff_jfet 
CONNECT tpdiff_jfet crown BY blc 

CONNECT tpdiff_sbd tpdiff_jfet 


#IFDEF RC_DECK
CONNECT d_tndiff_hv HVNW BY ntaphv 
CONNECT d_tndiff_hv NWLVT BY alvtnplug 
CONNECT d_tndiff_hv nxwell BY nplug 

CONNECT s_tndiff_hv HVNW BY ntaphv 
CONNECT s_tndiff_hv NWLVT BY alvtnplug 
CONNECT s_tndiff_hv nxwell BY nplug 

CONNECT d_tndiff_dehv HVNW BY ntaphv 
CONNECT d_tndiff_dehv NWLVT BY alvtnplug 
CONNECT d_tndiff_dehv nxwell BY nplug 

CONNECT s_tndiff_dehv HVNW BY ntaphv 
CONNECT s_tndiff_dehv NWLVT BY alvtnplug 
CONNECT s_tndiff_dehv nxwell BY nplug 

CONNECT cg_drain HVNW BY ntaphv 
CONNECT cg_drain NWLVT BY alvtnplug 
CONNECT cg_drain nxwell BY nplug 

CONNECT comso HVNW BY ntaphv 
CONNECT comso NWLVT BY alvtnplug 
CONNECT comso nxwell BY nplug 

CONNECT tndiff_sbd HVNW BY ntaphv 
CONNECT tndiff_sbd NWLVT BY alvtnplug 
CONNECT tndiff_sbd nxwell BY nplug 

CONNECT tndiff_jfet HVNW BY ntaphv 
CONNECT tndiff_jfet NWLVT BY alvtnplug 
CONNECT tndiff_jfet nxwell BY nplug 

CONNECT d_tpdiff_hv HVPW BY hvptap 
CONNECT d_tpdiff_hv LVBJTDMY BY lv_pplug 
CONNECT d_tpdiff_hv PSUBi BY hvptap 
CONNECT d_tpdiff_hv PWLVT BY alvtpplug 
CONNECT d_tpdiff_hv RFDMY_HIA_bulk BY hia_rf_pplug 
CONNECT d_tpdiff_hv coll1 BY pplug 
CONNECT d_tpdiff_hv psub BY pplug 
CONNECT d_tpdiff_hv psub_term BY pplug 
CONNECT d_tpdiff_hv rwel BY pplug 
CONNECT d_tpdiff_hv rwel_4vnjfet BY pplug 
CONNECT d_tpdiff_hv rwel_4vpjfet_d BY pplug 
CONNECT d_tpdiff_hv rwel_4vpjfet_s BY pplug 

CONNECT s_tpdiff_hv HVPW BY hvptap 
CONNECT s_tpdiff_hv LVBJTDMY BY lv_pplug 
CONNECT s_tpdiff_hv PSUBi BY hvptap 
CONNECT s_tpdiff_hv PWLVT BY alvtpplug 
CONNECT s_tpdiff_hv RFDMY_HIA_bulk BY hia_rf_pplug 
CONNECT s_tpdiff_hv coll1 BY pplug 
CONNECT s_tpdiff_hv psub BY pplug 
CONNECT s_tpdiff_hv psub_term BY pplug 
CONNECT s_tpdiff_hv rwel BY pplug 
CONNECT s_tpdiff_hv rwel_4vnjfet BY pplug 
CONNECT s_tpdiff_hv rwel_4vpjfet_d BY pplug 
CONNECT s_tpdiff_hv rwel_4vpjfet_s BY pplug 

CONNECT tpdiff_sbd HVPW BY hvptap 
CONNECT tpdiff_sbd LVBJTDMY BY lv_pplug 
CONNECT tpdiff_sbd PSUBi BY hvptap 
CONNECT tpdiff_sbd PWLVT BY alvtpplug 
CONNECT tpdiff_sbd RFDMY_HIA_bulk BY hia_rf_pplug 
CONNECT tpdiff_sbd coll1 BY pplug 
CONNECT tpdiff_sbd psub BY pplug 
CONNECT tpdiff_sbd psub_term BY pplug 
CONNECT tpdiff_sbd rwel BY pplug 
CONNECT tpdiff_sbd rwel_4vnjfet BY pplug 
CONNECT tpdiff_sbd rwel_4vpjfet_d BY pplug 
CONNECT tpdiff_sbd rwel_4vpjfet_s BY pplug 

CONNECT tpdiff_jfet HVPW BY hvptap 
CONNECT tpdiff_jfet LVBJTDMY BY lv_pplug 
CONNECT tpdiff_jfet PSUBi BY hvptap 
CONNECT tpdiff_jfet PWLVT BY alvtpplug 
CONNECT tpdiff_jfet RFDMY_HIA_bulk BY hia_rf_pplug 
CONNECT tpdiff_jfet coll1 BY pplug 
CONNECT tpdiff_jfet psub BY pplug 
CONNECT tpdiff_jfet psub_term BY pplug 
CONNECT tpdiff_jfet rwel BY pplug 
CONNECT tpdiff_jfet rwel_4vnjfet BY pplug 
CONNECT tpdiff_jfet rwel_4vpjfet_d BY pplug 
CONNECT tpdiff_jfet rwel_4vpjfet_s BY pplug 

#ELSE
SCONNECT d_tndiff_hv HVNW BY ntaphv 
SCONNECT d_tndiff_hv NWLVT BY alvtnplug 
SCONNECT d_tndiff_hv nxwell BY nplug 

SCONNECT s_tndiff_hv HVNW BY ntaphv 
SCONNECT s_tndiff_hv NWLVT BY alvtnplug 
SCONNECT s_tndiff_hv nxwell BY nplug 

SCONNECT d_tndiff_dehv HVNW BY ntaphv 
SCONNECT d_tndiff_dehv NWLVT BY alvtnplug 
SCONNECT d_tndiff_dehv nxwell BY nplug 

SCONNECT s_tndiff_dehv HVNW BY ntaphv 
SCONNECT s_tndiff_dehv NWLVT BY alvtnplug 
SCONNECT s_tndiff_dehv nxwell BY nplug 

SCONNECT cg_drain HVNW BY ntaphv 
SCONNECT cg_drain NWLVT BY alvtnplug 
SCONNECT cg_drain nxwell BY nplug 

SCONNECT comso HVNW BY ntaphv 
SCONNECT comso NWLVT BY alvtnplug 
SCONNECT comso nxwell BY nplug 

SCONNECT tndiff_sbd HVNW BY ntaphv 
SCONNECT tndiff_sbd NWLVT BY alvtnplug 
SCONNECT tndiff_sbd nxwell BY nplug 

SCONNECT tndiff_jfet HVNW BY ntaphv 
SCONNECT tndiff_jfet NWLVT BY alvtnplug 
SCONNECT tndiff_jfet nxwell BY nplug 

SCONNECT d_tpdiff_hv HVPW BY hvptap 
SCONNECT d_tpdiff_hv LVBJTDMY BY lv_pplug 
SCONNECT d_tpdiff_hv PSUBi BY hvptap 
SCONNECT d_tpdiff_hv PWLVT BY alvtpplug 
SCONNECT d_tpdiff_hv RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT d_tpdiff_hv coll1 BY pplug 
#IFNDEF NW_RING
  SCONNECT d_tpdiff_hv n_psub BY n_pplug 
#ENDIF
SCONNECT d_tpdiff_hv psub BY pplug 
SCONNECT d_tpdiff_hv psub_term BY pplug 
SCONNECT d_tpdiff_hv rwel BY pplug 
SCONNECT d_tpdiff_hv rwel_4vnjfet BY pplug 
SCONNECT d_tpdiff_hv rwel_4vpjfet_d BY pplug 
SCONNECT d_tpdiff_hv rwel_4vpjfet_s BY pplug 

SCONNECT s_tpdiff_hv HVPW BY hvptap 
SCONNECT s_tpdiff_hv LVBJTDMY BY lv_pplug 
SCONNECT s_tpdiff_hv PSUBi BY hvptap 
SCONNECT s_tpdiff_hv PWLVT BY alvtpplug 
SCONNECT s_tpdiff_hv RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT s_tpdiff_hv coll1 BY pplug 
#IFNDEF NW_RING
  SCONNECT s_tpdiff_hv n_psub BY n_pplug 
#ENDIF
SCONNECT s_tpdiff_hv psub BY pplug 
SCONNECT s_tpdiff_hv psub_term BY pplug 
SCONNECT s_tpdiff_hv rwel BY pplug 
SCONNECT s_tpdiff_hv rwel_4vnjfet BY pplug 
SCONNECT s_tpdiff_hv rwel_4vpjfet_d BY pplug 
SCONNECT s_tpdiff_hv rwel_4vpjfet_s BY pplug 

SCONNECT tpdiff_sbd HVPW BY hvptap 
SCONNECT tpdiff_sbd LVBJTDMY BY lv_pplug 
SCONNECT tpdiff_sbd PSUBi BY hvptap 
SCONNECT tpdiff_sbd PWLVT BY alvtpplug 
SCONNECT tpdiff_sbd RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT tpdiff_sbd coll1 BY pplug 
#IFNDEF NW_RING
  SCONNECT tpdiff_sbd n_psub BY n_pplug 
#ENDIF
SCONNECT tpdiff_sbd psub BY pplug 
SCONNECT tpdiff_sbd psub_term BY pplug 
SCONNECT tpdiff_sbd rwel BY pplug 
SCONNECT tpdiff_sbd rwel_4vnjfet BY pplug 
SCONNECT tpdiff_sbd rwel_4vpjfet_d BY pplug 
SCONNECT tpdiff_sbd rwel_4vpjfet_s BY pplug 

SCONNECT tpdiff_jfet HVPW BY hvptap 
SCONNECT tpdiff_jfet LVBJTDMY BY lv_pplug 
SCONNECT tpdiff_jfet PSUBi BY hvptap 
SCONNECT tpdiff_jfet PWLVT BY alvtpplug 
SCONNECT tpdiff_jfet RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT tpdiff_jfet coll1 BY pplug 
#IFNDEF NW_RING
  SCONNECT tpdiff_jfet n_psub BY n_pplug 
#ENDIF
SCONNECT tpdiff_jfet psub BY pplug 
SCONNECT tpdiff_jfet psub_term BY pplug 
SCONNECT tpdiff_jfet rwel BY pplug 
SCONNECT tpdiff_jfet rwel_4vnjfet BY pplug 
SCONNECT tpdiff_jfet rwel_4vpjfet_d BY pplug 
SCONNECT tpdiff_jfet rwel_4vpjfet_s BY pplug 

#ENDIF
CONNECT ngate poly
CONNECT ngate_18 poly
CONNECT dngate_18 poly
CONNECT dngate_18_mac poly
CONNECT ngate_18_mac poly
CONNECT ngate_18ud poly
CONNECT dngate_18ud poly
CONNECT dngate_18ud_mac poly
CONNECT ngate_18ud_mac poly
CONNECT ngate_25 poly
CONNECT dngate_25 poly
CONNECT dngate_25_mac poly
CONNECT dngate_25_fgd_mac poly
CONNECT ngate_25_fgd_mac poly
CONNECT ngate_25_mac poly
CONNECT dngate_25_ngd_mac poly
CONNECT ngate_25_ngd_mac poly
CONNECT ngate_25od poly
CONNECT dngate_25od poly
CONNECT dngate_25od_mac poly
CONNECT ngate_25od_mac poly
CONNECT ngate_25ud poly
CONNECT dngate_25ud poly
CONNECT dngate_25ud_mac poly
CONNECT ngate_25ud_mac poly
CONNECT dngate_ana25_mac poly
CONNECT ngate_ana25_mac poly
CONNECT ngate_avt poly
CONNECT nrgate_avt poly
CONNECT nrgate_avt_mac poly
CONNECT ngate_avt_mac poly
CONNECT nrgate poly
CONNECT nrgate_mac poly
CONNECT nehvgate poly
CONNECT n1ehvgate poly
CONNECT n1ehvgate_mac poly
CONNECT nehvgate_mac poly
CONNECT nelvgate poly
CONNECT n1elvgate poly
CONNECT n1elvgate_mac poly
CONNECT nelvgate_mac poly
CONNECT nhvgate poly
CONNECT n1hvgate poly
CONNECT n1hvgate_mac poly
CONNECT nhvgate_mac poly
CONNECT nlvgate poly
CONNECT n1lvgate poly
CONNECT n1lvgate_mac poly
CONNECT nlvgate_mac poly
CONNECT ngate_mac poly
CONNECT nlgate poly
CONNECT ngate_18na poly
CONNECT ngate_18na_mac poly
CONNECT ngate_25na poly
CONNECT ngate_25na_mac poly
CONNECT ngate_25naod poly
CONNECT ngate_25naod_mac poly
CONNECT ngate_25naud poly
CONNECT ngate_25naud_mac poly
CONNECT nlgate_mac poly
CONNECT nlavgate poly
CONNECT nlavgate_mac poly
CONNECT ngate_sdpncipd poly
CONNECT ngate_sncipd poly
CONNECT ngate_spd poly
CONNECT ngate_spd_ull10ttprp poly
CONNECT ngate_spd_ull10ttp poly
CONNECT ngate_sullhcpd poly
CONNECT ngate_spd_ull poly
CONNECT ngate_sdpncipg poly
CONNECT ngate_sncipg poly
CONNECT ngate_spg poly
CONNECT ngate_spg_ull10ttprp poly
CONNECT ngate_spg_ull10ttp poly
CONNECT ngate_sullhcpg poly
CONNECT ngate_spg_ull poly
CONNECT pgate poly
CONNECT pgate_18 poly
CONNECT pgate_18_mac poly
CONNECT pgate_18ud poly
CONNECT pgate_18ud_mac poly
CONNECT pgate_25 poly
CONNECT pgate_25_mac poly
CONNECT pgate_25od poly
CONNECT pgate_25od_mac poly
CONNECT pgate_25ud poly
CONNECT pgate_25ud_mac poly
CONNECT pgate_avt poly
CONNECT pgate_avt_mac poly
CONNECT pehvgate poly
CONNECT pehvgate_mac poly
CONNECT pelvgate poly
CONNECT pelvgate_mac poly
CONNECT phvgate poly
CONNECT phvgate_mac poly
CONNECT plvgate poly
CONNECT plvgate_mac poly
CONNECT pgate_mac poly
CONNECT pgate_sdpnci poly
CONNECT pgate_snci poly
CONNECT pgate_s poly
CONNECT pgate_s_ull10ttp poly
CONNECT pgate_sullhc poly
CONNECT pgate_s_ull poly
CONNECT ngate_hv25 poly
CONNECT ngate_hv25_mac poly
CONNECT pgate_hv25 poly
CONNECT pgate_hv25_mac poly
CONNECT poly vargt
CONNECT poly vargt_18
CONNECT poly vargt_25

//#############################################
//# FORM DEVICE                               #
//#############################################

#IFDEF RC_DECK

#IFDEF DFM_RULE
INCLUDE $TSMC_CAL_DFM_PATH/dfm_device

DEVICE LDDP(pch_hv25_spw) pgate_hv25 d_tpdiff_hv(D) pgate_hv25(G) s_tpdiff_hv(S) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_hv25_spw netlist element "M" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_hv25, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25, d_tpdiff_hv)) / 2
   L=area(pgate_hv25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDP(pch_hv25_spw) pgate_hv25_mac d_tpdiff_hv(D) pgate_hv25_mac(G) s_tpdiff_hv(S) nxwell(B) <pthin> netlist model pch_hv25_spw_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_hv25_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25_mac, d_tpdiff_hv)) / 2
   L=area(pgate_hv25_mac) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hv25_spw_mac" 
pgate_hv25_mac_in_edge = pgate_hv25_mac INSIDE EDGE s_tpdiff_hv
pgate_hv25_mac_coin_edge = pgate_hv25_mac COIN EDGE s_tpdiff_hv
pgate_hv25_mac_WL = DFM PROPERTY pgate_hv25_mac pgate_hv25_mac_in_edge pgate_hv25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_hv25_mac_in_edge) + length(pgate_hv25_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_hv25_mac)/property_ref(drawn_w) ]
pch_hv25_spw_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_hv25_spw_mac" ANNOTATE OD_p pgate_hv25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hv25_spw"
       drawn_w = DFM_NUM_VAL( pgate_hv25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_hv25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hv25_spw_mac_ODN_layer
#ENDIF

DEVICE LDDN(nch_hv25_snw) ngate_hv25 d_tndiff_hv(D) ngate_hv25(G) s_tndiff_hv(S) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_hv25_snw netlist element "M" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hv25, s_tndiff_hv ) + perimeter_coincide(ngate_hv25, d_tndiff_hv)) / 2
   L=area(ngate_hv25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_hv25_snw) ngate_hv25_mac d_tndiff_hv(D) ngate_hv25_mac(G) s_tndiff_hv(S) psub(B) <nthin1> netlist model nch_hv25_snw_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hv25_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv25_mac, d_tndiff_hv)) / 2
   L=area(ngate_hv25_mac) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hv25_snw_mac" 
ngate_hv25_mac_in_edge = ngate_hv25_mac INSIDE EDGE s_tndiff_hv
ngate_hv25_mac_coin_edge = ngate_hv25_mac COIN EDGE s_tndiff_hv
ngate_hv25_mac_WL = DFM PROPERTY ngate_hv25_mac ngate_hv25_mac_in_edge ngate_hv25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hv25_mac_in_edge) + length(ngate_hv25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hv25_mac)/property_ref(drawn_w) ]
nch_hv25_snw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hv25_snw_mac" ANNOTATE OD_p ngate_hv25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hv25_snw"
       drawn_w = DFM_NUM_VAL( ngate_hv25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hv25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hv25_snw_mac_ODN_layer
#ENDIF

ngatez1 = SIZE ngate BY 0.005
ngatez = ngatez1 AND nthin1
DEVICE MN(nch) ngatez ngate(G) tndiff(S) tndiff(D) psub(B) netlist model nch CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch" 
ngate_in_edge = ngate INSIDE EDGE tndiff
ngate_coin_edge = ngate COIN EDGE tndiff
ngate_WL = DFM PROPERTY ngate ngate_in_edge ngate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_in_edge) + length(ngate_coin_edge))/2 ]
       [ drawn_l = area(ngate)/property_ref(drawn_w) ]
nch_ODN_layer = DEVICE LAYER TEMPLATE "nch" ANNOTATE OD_p ngate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch"
       drawn_w = DFM_NUM_VAL( ngate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ODN_layer
#ENDIF

DEVICE MN(nch_18) ngate_18 ngate_18(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18, tndiff ) + perimeter_inside(ngate_18, tndiff)) / 2
   L=area(ngate_18) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18" 
ngate_18_in_edge = ngate_18 INSIDE EDGE tndiff
ngate_18_coin_edge = ngate_18 COIN EDGE tndiff
ngate_18_WL = DFM PROPERTY ngate_18 ngate_18_in_edge ngate_18_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18_in_edge) + length(ngate_18_coin_edge))/2 ]
       [ drawn_l = area(ngate_18)/property_ref(drawn_w) ]
nch_18_ODN_layer = DEVICE LAYER TEMPLATE "nch_18" ANNOTATE OD_p ngate_18_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18"
       drawn_w = DFM_NUM_VAL( ngate_18_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_ODN_layer
#ENDIF

DEVICE MN(nch_18_dnw) dngate_18 dngate_18(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_18, tndiff ) + perimeter_inside(dngate_18, tndiff)) / 2
   L=area(dngate_18) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_dnw" 
dngate_18_in_edge = dngate_18 INSIDE EDGE tndiff
dngate_18_coin_edge = dngate_18 COIN EDGE tndiff
dngate_18_WL = DFM PROPERTY dngate_18 dngate_18_in_edge dngate_18_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18_in_edge) + length(dngate_18_coin_edge))/2 ]
       [ drawn_l = area(dngate_18)/property_ref(drawn_w) ]
nch_18_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_dnw" ANNOTATE OD_p dngate_18_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_18_dnw) dngate_18_mac dngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_18_mac, tndiff ) + perimeter_inside(dngate_18_mac, tndiff)) / 2
   L=area(dngate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_dnw_mac" 
dngate_18_mac_in_edge = dngate_18_mac INSIDE EDGE tndiff
dngate_18_mac_coin_edge = dngate_18_mac COIN EDGE tndiff
dngate_18_mac_WL = DFM PROPERTY dngate_18_mac dngate_18_mac_in_edge dngate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18_mac_in_edge) + length(dngate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_18_mac)/property_ref(drawn_w) ]
nch_18_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_dnw_mac" ANNOTATE OD_p dngate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18) ngate_18_mac ngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2
   L=area(ngate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_mac" 
ngate_18_mac_in_edge = ngate_18_mac INSIDE EDGE tndiff
ngate_18_mac_coin_edge = ngate_18_mac COIN EDGE tndiff
ngate_18_mac_WL = DFM PROPERTY ngate_18_mac ngate_18_mac_in_edge ngate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18_mac_in_edge) + length(ngate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18_mac)/property_ref(drawn_w) ]
nch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_mac" ANNOTATE OD_p ngate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18"
       drawn_w = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15) ngate_18ud ngate_18ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18ud15 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18ud, tndiff ) + perimeter_inside(ngate_18ud, tndiff)) / 2
   L=area(ngate_18ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15" 
ngate_18ud_in_edge = ngate_18ud INSIDE EDGE tndiff
ngate_18ud_coin_edge = ngate_18ud COIN EDGE tndiff
ngate_18ud_WL = DFM PROPERTY ngate_18ud ngate_18ud_in_edge ngate_18ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud_in_edge) + length(ngate_18ud_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud)/property_ref(drawn_w) ]
nch_18ud15_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15" ANNOTATE OD_p ngate_18ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15"
       drawn_w = DFM_NUM_VAL( ngate_18ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15_dnw) dngate_18ud dngate_18ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18ud15 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_18ud, tndiff ) + perimeter_inside(dngate_18ud, tndiff)) / 2
   L=area(dngate_18ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_dnw" 
dngate_18ud_in_edge = dngate_18ud INSIDE EDGE tndiff
dngate_18ud_coin_edge = dngate_18ud COIN EDGE tndiff
dngate_18ud_WL = DFM PROPERTY dngate_18ud dngate_18ud_in_edge dngate_18ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18ud_in_edge) + length(dngate_18ud_coin_edge))/2 ]
       [ drawn_l = area(dngate_18ud)/property_ref(drawn_w) ]
nch_18ud15_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_dnw" ANNOTATE OD_p dngate_18ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15_dnw) dngate_18ud_mac dngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_18ud_mac, tndiff ) + perimeter_inside(dngate_18ud_mac, tndiff)) / 2
   L=area(dngate_18ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_dnw_mac" 
dngate_18ud_mac_in_edge = dngate_18ud_mac INSIDE EDGE tndiff
dngate_18ud_mac_coin_edge = dngate_18ud_mac COIN EDGE tndiff
dngate_18ud_mac_WL = DFM PROPERTY dngate_18ud_mac dngate_18ud_mac_in_edge dngate_18ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18ud_mac_in_edge) + length(dngate_18ud_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_18ud_mac)/property_ref(drawn_w) ]
nch_18ud15_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_dnw_mac" ANNOTATE OD_p dngate_18ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15) ngate_18ud_mac ngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18ud_mac, tndiff ) + perimeter_inside(ngate_18ud_mac, tndiff)) / 2
   L=area(ngate_18ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_mac" 
ngate_18ud_mac_in_edge = ngate_18ud_mac INSIDE EDGE tndiff
ngate_18ud_mac_coin_edge = ngate_18ud_mac COIN EDGE tndiff
ngate_18ud_mac_WL = DFM PROPERTY ngate_18ud_mac ngate_18ud_mac_in_edge ngate_18ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud_mac_in_edge) + length(ngate_18ud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud_mac)/property_ref(drawn_w) ]
nch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_mac" ANNOTATE OD_p ngate_18ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15"
       drawn_w = DFM_NUM_VAL( ngate_18ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25) ngate_25 ngate_25(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25, tndiff ) + perimeter_inside(ngate_25, tndiff)) / 2
   L=area(ngate_25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25" 
ngate_25_in_edge = ngate_25 INSIDE EDGE tndiff
ngate_25_coin_edge = ngate_25 COIN EDGE tndiff
ngate_25_WL = DFM PROPERTY ngate_25 ngate_25_in_edge ngate_25_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_in_edge) + length(ngate_25_coin_edge))/2 ]
       [ drawn_l = area(ngate_25)/property_ref(drawn_w) ]
nch_25_ODN_layer = DEVICE LAYER TEMPLATE "nch_25" ANNOTATE OD_p ngate_25_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25"
       drawn_w = DFM_NUM_VAL( ngate_25_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_ODN_layer
#ENDIF

DEVICE MN(nch_25_dnw) dngate_25 dngate_25(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25, tndiff ) + perimeter_inside(dngate_25, tndiff)) / 2
   L=area(dngate_25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_dnw" 
dngate_25_in_edge = dngate_25 INSIDE EDGE tndiff
dngate_25_coin_edge = dngate_25 COIN EDGE tndiff
dngate_25_WL = DFM PROPERTY dngate_25 dngate_25_in_edge dngate_25_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_in_edge) + length(dngate_25_coin_edge))/2 ]
       [ drawn_l = area(dngate_25)/property_ref(drawn_w) ]
nch_25_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_dnw" ANNOTATE OD_p dngate_25_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_25_dnw) dngate_25_mac dngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25_mac, tndiff ) + perimeter_inside(dngate_25_mac, tndiff)) / 2
   L=area(dngate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_dnw_mac" 
dngate_25_mac_in_edge = dngate_25_mac INSIDE EDGE tndiff
dngate_25_mac_coin_edge = dngate_25_mac COIN EDGE tndiff
dngate_25_mac_WL = DFM PROPERTY dngate_25_mac dngate_25_mac_in_edge dngate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_mac_in_edge) + length(dngate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25_mac)/property_ref(drawn_w) ]
nch_25_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_dnw_mac" ANNOTATE OD_p dngate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_fgd_dnw_mac) dngate_25_fgd_mac dngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_fgd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25_fgd_mac, tndiff ) + perimeter_inside(dngate_25_fgd_mac, tndiff)) / 2
   L=area(dngate_25_fgd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_fgd_dnw_mac" 
dngate_25_fgd_mac_in_edge = dngate_25_fgd_mac INSIDE EDGE tndiff
dngate_25_fgd_mac_coin_edge = dngate_25_fgd_mac COIN EDGE tndiff
dngate_25_fgd_mac_WL = DFM PROPERTY dngate_25_fgd_mac dngate_25_fgd_mac_in_edge dngate_25_fgd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_fgd_mac_in_edge) + length(dngate_25_fgd_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25_fgd_mac)/property_ref(drawn_w) ]
nch_25_fgd_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_fgd_dnw_mac" ANNOTATE OD_p dngate_25_fgd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_fgd_dnw_mac"
       drawn_w = DFM_NUM_VAL( dngate_25_fgd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_fgd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_fgd_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_fgd_mac) ngate_25_fgd_mac ngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_fgd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25_fgd_mac, tndiff ) + perimeter_inside(ngate_25_fgd_mac, tndiff)) / 2
   L=area(ngate_25_fgd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_fgd_mac" 
ngate_25_fgd_mac_in_edge = ngate_25_fgd_mac INSIDE EDGE tndiff
ngate_25_fgd_mac_coin_edge = ngate_25_fgd_mac COIN EDGE tndiff
ngate_25_fgd_mac_WL = DFM PROPERTY ngate_25_fgd_mac ngate_25_fgd_mac_in_edge ngate_25_fgd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_fgd_mac_in_edge) + length(ngate_25_fgd_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_fgd_mac)/property_ref(drawn_w) ]
nch_25_fgd_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_fgd_mac" ANNOTATE OD_p ngate_25_fgd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_fgd_mac"
       drawn_w = DFM_NUM_VAL( ngate_25_fgd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_fgd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_fgd_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25) ngate_25_mac ngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2
   L=area(ngate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_mac" 
ngate_25_mac_in_edge = ngate_25_mac INSIDE EDGE tndiff
ngate_25_mac_coin_edge = ngate_25_mac COIN EDGE tndiff
ngate_25_mac_WL = DFM PROPERTY ngate_25_mac ngate_25_mac_in_edge ngate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_mac_in_edge) + length(ngate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_mac)/property_ref(drawn_w) ]
nch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_mac" ANNOTATE OD_p ngate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25"
       drawn_w = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_ngd_dnw_mac) dngate_25_ngd_mac dngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_ngd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25_ngd_mac, tndiff ) + perimeter_inside(dngate_25_ngd_mac, tndiff)) / 2
   L=area(dngate_25_ngd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_ngd_dnw_mac" 
dngate_25_ngd_mac_in_edge = dngate_25_ngd_mac INSIDE EDGE tndiff
dngate_25_ngd_mac_coin_edge = dngate_25_ngd_mac COIN EDGE tndiff
dngate_25_ngd_mac_WL = DFM PROPERTY dngate_25_ngd_mac dngate_25_ngd_mac_in_edge dngate_25_ngd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_ngd_mac_in_edge) + length(dngate_25_ngd_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25_ngd_mac)/property_ref(drawn_w) ]
nch_25_ngd_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_ngd_dnw_mac" ANNOTATE OD_p dngate_25_ngd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_ngd_dnw_mac"
       drawn_w = DFM_NUM_VAL( dngate_25_ngd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_ngd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_ngd_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_ngd_mac) ngate_25_ngd_mac ngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_ngd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25_ngd_mac, tndiff ) + perimeter_inside(ngate_25_ngd_mac, tndiff)) / 2
   L=area(ngate_25_ngd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_ngd_mac" 
ngate_25_ngd_mac_in_edge = ngate_25_ngd_mac INSIDE EDGE tndiff
ngate_25_ngd_mac_coin_edge = ngate_25_ngd_mac COIN EDGE tndiff
ngate_25_ngd_mac_WL = DFM PROPERTY ngate_25_ngd_mac ngate_25_ngd_mac_in_edge ngate_25_ngd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_ngd_mac_in_edge) + length(ngate_25_ngd_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_ngd_mac)/property_ref(drawn_w) ]
nch_25_ngd_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_ngd_mac" ANNOTATE OD_p ngate_25_ngd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_ngd_mac"
       drawn_w = DFM_NUM_VAL( ngate_25_ngd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_ngd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_ngd_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25od33) ngate_25od ngate_25od(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25od33 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25od, tndiff ) + perimeter_inside(ngate_25od, tndiff)) / 2
   L=area(ngate_25od) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33" 
ngate_25od_in_edge = ngate_25od INSIDE EDGE tndiff
ngate_25od_coin_edge = ngate_25od COIN EDGE tndiff
ngate_25od_WL = DFM PROPERTY ngate_25od ngate_25od_in_edge ngate_25od_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25od_in_edge) + length(ngate_25od_coin_edge))/2 ]
       [ drawn_l = area(ngate_25od)/property_ref(drawn_w) ]
nch_25od33_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33" ANNOTATE OD_p ngate_25od_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33"
       drawn_w = DFM_NUM_VAL( ngate_25od_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25od_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_ODN_layer
#ENDIF

DEVICE MN(nch_25od33_dnw) dngate_25od dngate_25od(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25od33 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25od, tndiff ) + perimeter_inside(dngate_25od, tndiff)) / 2
   L=area(dngate_25od) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_dnw" 
dngate_25od_in_edge = dngate_25od INSIDE EDGE tndiff
dngate_25od_coin_edge = dngate_25od COIN EDGE tndiff
dngate_25od_WL = DFM PROPERTY dngate_25od dngate_25od_in_edge dngate_25od_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25od_in_edge) + length(dngate_25od_coin_edge))/2 ]
       [ drawn_l = area(dngate_25od)/property_ref(drawn_w) ]
nch_25od33_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_dnw" ANNOTATE OD_p dngate_25od_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25od_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25od_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_25od33_dnw) dngate_25od_mac dngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25od_mac, tndiff ) + perimeter_inside(dngate_25od_mac, tndiff)) / 2
   L=area(dngate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_dnw_mac" 
dngate_25od_mac_in_edge = dngate_25od_mac INSIDE EDGE tndiff
dngate_25od_mac_coin_edge = dngate_25od_mac COIN EDGE tndiff
dngate_25od_mac_WL = DFM PROPERTY dngate_25od_mac dngate_25od_mac_in_edge dngate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25od_mac_in_edge) + length(dngate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25od_mac)/property_ref(drawn_w) ]
nch_25od33_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_dnw_mac" ANNOTATE OD_p dngate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25od33) ngate_25od_mac ngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2
   L=area(ngate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_mac" 
ngate_25od_mac_in_edge = ngate_25od_mac INSIDE EDGE tndiff
ngate_25od_mac_coin_edge = ngate_25od_mac COIN EDGE tndiff
ngate_25od_mac_WL = DFM PROPERTY ngate_25od_mac ngate_25od_mac_in_edge ngate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25od_mac_in_edge) + length(ngate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25od_mac)/property_ref(drawn_w) ]
nch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_mac" ANNOTATE OD_p ngate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33"
       drawn_w = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18) ngate_25ud ngate_25ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25ud18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25ud, tndiff ) + perimeter_inside(ngate_25ud, tndiff)) / 2
   L=area(ngate_25ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18" 
ngate_25ud_in_edge = ngate_25ud INSIDE EDGE tndiff
ngate_25ud_coin_edge = ngate_25ud COIN EDGE tndiff
ngate_25ud_WL = DFM PROPERTY ngate_25ud ngate_25ud_in_edge ngate_25ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25ud_in_edge) + length(ngate_25ud_coin_edge))/2 ]
       [ drawn_l = area(ngate_25ud)/property_ref(drawn_w) ]
nch_25ud18_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18" ANNOTATE OD_p ngate_25ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18_dnw) dngate_25ud dngate_25ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25ud18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25ud, tndiff ) + perimeter_inside(dngate_25ud, tndiff)) / 2
   L=area(dngate_25ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_dnw" 
dngate_25ud_in_edge = dngate_25ud INSIDE EDGE tndiff
dngate_25ud_coin_edge = dngate_25ud COIN EDGE tndiff
dngate_25ud_WL = DFM PROPERTY dngate_25ud dngate_25ud_in_edge dngate_25ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25ud_in_edge) + length(dngate_25ud_coin_edge))/2 ]
       [ drawn_l = area(dngate_25ud)/property_ref(drawn_w) ]
nch_25ud18_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_dnw" ANNOTATE OD_p dngate_25ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18_dnw) dngate_25ud_mac dngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_25ud_mac, tndiff ) + perimeter_inside(dngate_25ud_mac, tndiff)) / 2
   L=area(dngate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_dnw_mac" 
dngate_25ud_mac_in_edge = dngate_25ud_mac INSIDE EDGE tndiff
dngate_25ud_mac_coin_edge = dngate_25ud_mac COIN EDGE tndiff
dngate_25ud_mac_WL = DFM PROPERTY dngate_25ud_mac dngate_25ud_mac_in_edge dngate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25ud_mac_in_edge) + length(dngate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25ud_mac)/property_ref(drawn_w) ]
nch_25ud18_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_dnw_mac" ANNOTATE OD_p dngate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18) ngate_25ud_mac ngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2
   L=area(ngate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_mac" 
ngate_25ud_mac_in_edge = ngate_25ud_mac INSIDE EDGE tndiff
ngate_25ud_mac_coin_edge = ngate_25ud_mac COIN EDGE tndiff
ngate_25ud_mac_WL = DFM PROPERTY ngate_25ud_mac ngate_25ud_mac_in_edge ngate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25ud_mac_in_edge) + length(ngate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25ud_mac)/property_ref(drawn_w) ]
nch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_mac" ANNOTATE OD_p ngate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ana25_dnw_mac) dngate_ana25_mac dngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_ana25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(dngate_ana25_mac, tndiff ) + perimeter_inside(dngate_ana25_mac, tndiff)) / 2
   L=area(dngate_ana25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ana25_dnw_mac" 
dngate_ana25_mac_in_edge = dngate_ana25_mac INSIDE EDGE tndiff
dngate_ana25_mac_coin_edge = dngate_ana25_mac COIN EDGE tndiff
dngate_ana25_mac_WL = DFM PROPERTY dngate_ana25_mac dngate_ana25_mac_in_edge dngate_ana25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_ana25_mac_in_edge) + length(dngate_ana25_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_ana25_mac)/property_ref(drawn_w) ]
nch_ana25_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ana25_dnw_mac" ANNOTATE OD_p dngate_ana25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ana25_dnw_mac"
       drawn_w = DFM_NUM_VAL( dngate_ana25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_ana25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ana25_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ana25_mac) ngate_ana25_mac ngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_ana25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_ana25_mac, tndiff ) + perimeter_inside(ngate_ana25_mac, tndiff)) / 2
   L=area(ngate_ana25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ana25_mac" 
ngate_ana25_mac_in_edge = ngate_ana25_mac INSIDE EDGE tndiff
ngate_ana25_mac_coin_edge = ngate_ana25_mac COIN EDGE tndiff
ngate_ana25_mac_WL = DFM PROPERTY ngate_ana25_mac ngate_ana25_mac_in_edge ngate_ana25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_ana25_mac_in_edge) + length(ngate_ana25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_ana25_mac)/property_ref(drawn_w) ]
nch_ana25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ana25_mac" ANNOTATE OD_p ngate_ana25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ana25_mac"
       drawn_w = DFM_NUM_VAL( ngate_ana25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_ana25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ana25_mac_ODN_layer
#ENDIF

ngate_avtz1 = SIZE ngate_avt BY 0.005
ngate_avtz = ngate_avtz1 AND nthin1
DEVICE MN(nch_avt) ngate_avtz ngate_avt(G) tndiff(S) tndiff(D) psub(B) netlist model nch_avt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt" 
ngate_avt_in_edge = ngate_avt INSIDE EDGE tndiff
ngate_avt_coin_edge = ngate_avt COIN EDGE tndiff
ngate_avt_WL = DFM PROPERTY ngate_avt ngate_avt_in_edge ngate_avt_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_avt_in_edge) + length(ngate_avt_coin_edge))/2 ]
       [ drawn_l = area(ngate_avt)/property_ref(drawn_w) ]
nch_avt_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt" ANNOTATE OD_p ngate_avt_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt"
       drawn_w = DFM_NUM_VAL( ngate_avt_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_avt_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_ODN_layer
#ENDIF

nrgate_avtz1 = SIZE nrgate_avt BY 0.005
nrgate_avtz = nrgate_avtz1 AND nthin1
DEVICE MN(nch_avt_dnw) nrgate_avtz nrgate_avt(G) tndiff(S) tndiff(D) psub(B) netlist model nch_avt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_dnw" 
nrgate_avt_in_edge = nrgate_avt INSIDE EDGE tndiff
nrgate_avt_coin_edge = nrgate_avt COIN EDGE tndiff
nrgate_avt_WL = DFM PROPERTY nrgate_avt nrgate_avt_in_edge nrgate_avt_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_avt_in_edge) + length(nrgate_avt_coin_edge))/2 ]
       [ drawn_l = area(nrgate_avt)/property_ref(drawn_w) ]
nch_avt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_dnw" ANNOTATE OD_p nrgate_avt_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_avt_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_avt_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_dnw_ODN_layer
#ENDIF

nrgate_avt_macz1 = SIZE nrgate_avt_mac BY 0.005
nrgate_avt_macz = nrgate_avt_macz1 AND nthin1
DEVICE MN(nch_avt_dnw) nrgate_avt_macz nrgate_avt_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_avt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_dnw_mac" 
nrgate_avt_mac_in_edge = nrgate_avt_mac INSIDE EDGE tndiff
nrgate_avt_mac_coin_edge = nrgate_avt_mac COIN EDGE tndiff
nrgate_avt_mac_WL = DFM PROPERTY nrgate_avt_mac nrgate_avt_mac_in_edge nrgate_avt_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_avt_mac_in_edge) + length(nrgate_avt_mac_coin_edge))/2 ]
       [ drawn_l = area(nrgate_avt_mac)/property_ref(drawn_w) ]
nch_avt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_dnw_mac" ANNOTATE OD_p nrgate_avt_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_avt_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_avt_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_dnw_mac_ODN_layer
#ENDIF

ngate_avt_macz1 = SIZE ngate_avt_mac BY 0.005
ngate_avt_macz = ngate_avt_macz1 AND nthin1
DEVICE MN(nch_avt) ngate_avt_macz ngate_avt_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_avt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_mac" 
ngate_avt_mac_in_edge = ngate_avt_mac INSIDE EDGE tndiff
ngate_avt_mac_coin_edge = ngate_avt_mac COIN EDGE tndiff
ngate_avt_mac_WL = DFM PROPERTY ngate_avt_mac ngate_avt_mac_in_edge ngate_avt_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_avt_mac_in_edge) + length(ngate_avt_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_avt_mac)/property_ref(drawn_w) ]
nch_avt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_mac" ANNOTATE OD_p ngate_avt_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt"
       drawn_w = DFM_NUM_VAL( ngate_avt_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_avt_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_mac_ODN_layer
#ENDIF

nrgatez1 = SIZE nrgate BY 0.005
nrgatez = nrgatez1 AND nthin1
DEVICE MN(nch_dnw) nrgatez nrgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_dnw" 
nrgate_in_edge = nrgate INSIDE EDGE tndiff
nrgate_coin_edge = nrgate COIN EDGE tndiff
nrgate_WL = DFM PROPERTY nrgate nrgate_in_edge nrgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_in_edge) + length(nrgate_coin_edge))/2 ]
       [ drawn_l = area(nrgate)/property_ref(drawn_w) ]
nch_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_dnw" ANNOTATE OD_p nrgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_dnw_ODN_layer
#ENDIF

nrgate_macz1 = SIZE nrgate_mac BY 0.005
nrgate_macz = nrgate_macz1 AND nthin1
DEVICE MN(nch_dnw) nrgate_macz nrgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_dnw_mac" 
nrgate_mac_in_edge = nrgate_mac INSIDE EDGE tndiff
nrgate_mac_coin_edge = nrgate_mac COIN EDGE tndiff
nrgate_mac_WL = DFM PROPERTY nrgate_mac nrgate_mac_in_edge nrgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_mac_in_edge) + length(nrgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nrgate_mac)/property_ref(drawn_w) ]
nch_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_dnw_mac" ANNOTATE OD_p nrgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_dnw_mac_ODN_layer
#ENDIF

nehvgatez1 = SIZE nehvgate BY 0.005
nehvgatez = nehvgatez1 AND nthin1
DEVICE MN(nch_ehvt) nehvgatez nehvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ehvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt" 
nehvgate_in_edge = nehvgate INSIDE EDGE tndiff
nehvgate_coin_edge = nehvgate COIN EDGE tndiff
nehvgate_WL = DFM PROPERTY nehvgate nehvgate_in_edge nehvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nehvgate_in_edge) + length(nehvgate_coin_edge))/2 ]
       [ drawn_l = area(nehvgate)/property_ref(drawn_w) ]
nch_ehvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt" ANNOTATE OD_p nehvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt"
       drawn_w = DFM_NUM_VAL( nehvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nehvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_ODN_layer
#ENDIF

n1ehvgatez1 = SIZE n1ehvgate BY 0.005
n1ehvgatez = n1ehvgatez1 AND nthin1
DEVICE MN(nch_ehvt_dnw) n1ehvgatez n1ehvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ehvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_dnw" 
n1ehvgate_in_edge = n1ehvgate INSIDE EDGE tndiff
n1ehvgate_coin_edge = n1ehvgate COIN EDGE tndiff
n1ehvgate_WL = DFM PROPERTY n1ehvgate n1ehvgate_in_edge n1ehvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1ehvgate_in_edge) + length(n1ehvgate_coin_edge))/2 ]
       [ drawn_l = area(n1ehvgate)/property_ref(drawn_w) ]
nch_ehvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_dnw" ANNOTATE OD_p n1ehvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt_dnw"
       drawn_w = DFM_NUM_VAL( n1ehvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1ehvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_dnw_ODN_layer
#ENDIF

n1ehvgate_macz1 = SIZE n1ehvgate_mac BY 0.005
n1ehvgate_macz = n1ehvgate_macz1 AND nthin1
DEVICE MN(nch_ehvt_dnw) n1ehvgate_macz n1ehvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ehvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_dnw_mac" 
n1ehvgate_mac_in_edge = n1ehvgate_mac INSIDE EDGE tndiff
n1ehvgate_mac_coin_edge = n1ehvgate_mac COIN EDGE tndiff
n1ehvgate_mac_WL = DFM PROPERTY n1ehvgate_mac n1ehvgate_mac_in_edge n1ehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1ehvgate_mac_in_edge) + length(n1ehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1ehvgate_mac)/property_ref(drawn_w) ]
nch_ehvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_dnw_mac" ANNOTATE OD_p n1ehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt_dnw"
       drawn_w = DFM_NUM_VAL( n1ehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1ehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_dnw_mac_ODN_layer
#ENDIF

nehvgate_macz1 = SIZE nehvgate_mac BY 0.005
nehvgate_macz = nehvgate_macz1 AND nthin1
DEVICE MN(nch_ehvt) nehvgate_macz nehvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ehvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_mac" 
nehvgate_mac_in_edge = nehvgate_mac INSIDE EDGE tndiff
nehvgate_mac_coin_edge = nehvgate_mac COIN EDGE tndiff
nehvgate_mac_WL = DFM PROPERTY nehvgate_mac nehvgate_mac_in_edge nehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nehvgate_mac_in_edge) + length(nehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nehvgate_mac)/property_ref(drawn_w) ]
nch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_mac" ANNOTATE OD_p nehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt"
       drawn_w = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_mac_ODN_layer
#ENDIF

nelvgatez1 = SIZE nelvgate BY 0.005
nelvgatez = nelvgatez1 AND nthin1
DEVICE MN(nch_elvt) nelvgatez nelvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt" 
nelvgate_in_edge = nelvgate INSIDE EDGE tndiff
nelvgate_coin_edge = nelvgate COIN EDGE tndiff
nelvgate_WL = DFM PROPERTY nelvgate nelvgate_in_edge nelvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nelvgate_in_edge) + length(nelvgate_coin_edge))/2 ]
       [ drawn_l = area(nelvgate)/property_ref(drawn_w) ]
nch_elvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt" ANNOTATE OD_p nelvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt"
       drawn_w = DFM_NUM_VAL( nelvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nelvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_ODN_layer
#ENDIF

n1elvgatez1 = SIZE n1elvgate BY 0.005
n1elvgatez = n1elvgatez1 AND nthin1
DEVICE MN(nch_elvt_dnw) n1elvgatez n1elvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt_dnw" 
n1elvgate_in_edge = n1elvgate INSIDE EDGE tndiff
n1elvgate_coin_edge = n1elvgate COIN EDGE tndiff
n1elvgate_WL = DFM PROPERTY n1elvgate n1elvgate_in_edge n1elvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1elvgate_in_edge) + length(n1elvgate_coin_edge))/2 ]
       [ drawn_l = area(n1elvgate)/property_ref(drawn_w) ]
nch_elvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt_dnw" ANNOTATE OD_p n1elvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_dnw"
       drawn_w = DFM_NUM_VAL( n1elvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1elvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_dnw_ODN_layer
#ENDIF

n1elvgate_macz1 = SIZE n1elvgate_mac BY 0.005
n1elvgate_macz = n1elvgate_macz1 AND nthin1
DEVICE MN(nch_elvt_dnw) n1elvgate_macz n1elvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt_dnw_mac" 
n1elvgate_mac_in_edge = n1elvgate_mac INSIDE EDGE tndiff
n1elvgate_mac_coin_edge = n1elvgate_mac COIN EDGE tndiff
n1elvgate_mac_WL = DFM PROPERTY n1elvgate_mac n1elvgate_mac_in_edge n1elvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1elvgate_mac_in_edge) + length(n1elvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1elvgate_mac)/property_ref(drawn_w) ]
nch_elvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt_dnw_mac" ANNOTATE OD_p n1elvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_dnw"
       drawn_w = DFM_NUM_VAL( n1elvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1elvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_dnw_mac_ODN_layer
#ENDIF

nelvgate_macz1 = SIZE nelvgate_mac BY 0.005
nelvgate_macz = nelvgate_macz1 AND nthin1
DEVICE MN(nch_elvt) nelvgate_macz nelvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt_mac" 
nelvgate_mac_in_edge = nelvgate_mac INSIDE EDGE tndiff
nelvgate_mac_coin_edge = nelvgate_mac COIN EDGE tndiff
nelvgate_mac_WL = DFM PROPERTY nelvgate_mac nelvgate_mac_in_edge nelvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nelvgate_mac_in_edge) + length(nelvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nelvgate_mac)/property_ref(drawn_w) ]
nch_elvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt_mac" ANNOTATE OD_p nelvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt"
       drawn_w = DFM_NUM_VAL( nelvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nelvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_mac_ODN_layer
#ENDIF

nhvgatez1 = SIZE nhvgate BY 0.005
nhvgatez = nhvgatez1 AND nthin1
DEVICE MN(nch_hvt) nhvgatez nhvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt" 
nhvgate_in_edge = nhvgate INSIDE EDGE tndiff
nhvgate_coin_edge = nhvgate COIN EDGE tndiff
nhvgate_WL = DFM PROPERTY nhvgate nhvgate_in_edge nhvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nhvgate_in_edge) + length(nhvgate_coin_edge))/2 ]
       [ drawn_l = area(nhvgate)/property_ref(drawn_w) ]
nch_hvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt" ANNOTATE OD_p nhvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt"
       drawn_w = DFM_NUM_VAL( nhvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nhvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_ODN_layer
#ENDIF

n1hvgatez1 = SIZE n1hvgate BY 0.005
n1hvgatez = n1hvgatez1 AND nthin1
DEVICE MN(nch_hvt_dnw) n1hvgatez n1hvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_dnw" 
n1hvgate_in_edge = n1hvgate INSIDE EDGE tndiff
n1hvgate_coin_edge = n1hvgate COIN EDGE tndiff
n1hvgate_WL = DFM PROPERTY n1hvgate n1hvgate_in_edge n1hvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1hvgate_in_edge) + length(n1hvgate_coin_edge))/2 ]
       [ drawn_l = area(n1hvgate)/property_ref(drawn_w) ]
nch_hvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_dnw" ANNOTATE OD_p n1hvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt_dnw"
       drawn_w = DFM_NUM_VAL( n1hvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1hvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_dnw_ODN_layer
#ENDIF

n1hvgate_macz1 = SIZE n1hvgate_mac BY 0.005
n1hvgate_macz = n1hvgate_macz1 AND nthin1
DEVICE MN(nch_hvt_dnw) n1hvgate_macz n1hvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_dnw_mac" 
n1hvgate_mac_in_edge = n1hvgate_mac INSIDE EDGE tndiff
n1hvgate_mac_coin_edge = n1hvgate_mac COIN EDGE tndiff
n1hvgate_mac_WL = DFM PROPERTY n1hvgate_mac n1hvgate_mac_in_edge n1hvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1hvgate_mac_in_edge) + length(n1hvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1hvgate_mac)/property_ref(drawn_w) ]
nch_hvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_dnw_mac" ANNOTATE OD_p n1hvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt_dnw"
       drawn_w = DFM_NUM_VAL( n1hvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1hvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_dnw_mac_ODN_layer
#ENDIF

nhvgate_macz1 = SIZE nhvgate_mac BY 0.005
nhvgate_macz = nhvgate_macz1 AND nthin1
DEVICE MN(nch_hvt) nhvgate_macz nhvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_mac" 
nhvgate_mac_in_edge = nhvgate_mac INSIDE EDGE tndiff
nhvgate_mac_coin_edge = nhvgate_mac COIN EDGE tndiff
nhvgate_mac_WL = DFM PROPERTY nhvgate_mac nhvgate_mac_in_edge nhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nhvgate_mac_in_edge) + length(nhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nhvgate_mac)/property_ref(drawn_w) ]
nch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_mac" ANNOTATE OD_p nhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt"
       drawn_w = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_mac_ODN_layer
#ENDIF

nlvgatez1 = SIZE nlvgate BY 0.005
nlvgatez = nlvgatez1 AND nthin1
DEVICE MN(nch_lvt) nlvgatez nlvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt" 
nlvgate_in_edge = nlvgate INSIDE EDGE tndiff
nlvgate_coin_edge = nlvgate COIN EDGE tndiff
nlvgate_WL = DFM PROPERTY nlvgate nlvgate_in_edge nlvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlvgate_in_edge) + length(nlvgate_coin_edge))/2 ]
       [ drawn_l = area(nlvgate)/property_ref(drawn_w) ]
nch_lvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt" ANNOTATE OD_p nlvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt"
       drawn_w = DFM_NUM_VAL( nlvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_ODN_layer
#ENDIF

n1lvgatez1 = SIZE n1lvgate BY 0.005
n1lvgatez = n1lvgatez1 AND nthin1
DEVICE MN(nch_lvt_dnw) n1lvgatez n1lvgate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt CMACRO dfm_nmos_core_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_dnw" 
n1lvgate_in_edge = n1lvgate INSIDE EDGE tndiff
n1lvgate_coin_edge = n1lvgate COIN EDGE tndiff
n1lvgate_WL = DFM PROPERTY n1lvgate n1lvgate_in_edge n1lvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1lvgate_in_edge) + length(n1lvgate_coin_edge))/2 ]
       [ drawn_l = area(n1lvgate)/property_ref(drawn_w) ]
nch_lvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_dnw" ANNOTATE OD_p n1lvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_dnw"
       drawn_w = DFM_NUM_VAL( n1lvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1lvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_dnw_ODN_layer
#ENDIF

n1lvgate_macz1 = SIZE n1lvgate_mac BY 0.005
n1lvgate_macz = n1lvgate_macz1 AND nthin1
DEVICE MN(nch_lvt_dnw) n1lvgate_macz n1lvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_dnw_mac" 
n1lvgate_mac_in_edge = n1lvgate_mac INSIDE EDGE tndiff
n1lvgate_mac_coin_edge = n1lvgate_mac COIN EDGE tndiff
n1lvgate_mac_WL = DFM PROPERTY n1lvgate_mac n1lvgate_mac_in_edge n1lvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1lvgate_mac_in_edge) + length(n1lvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1lvgate_mac)/property_ref(drawn_w) ]
nch_lvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_dnw_mac" ANNOTATE OD_p n1lvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_dnw"
       drawn_w = DFM_NUM_VAL( n1lvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1lvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_dnw_mac_ODN_layer
#ENDIF

nlvgate_macz1 = SIZE nlvgate_mac BY 0.005
nlvgate_macz = nlvgate_macz1 AND nthin1
DEVICE MN(nch_lvt) nlvgate_macz nlvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_mac" 
nlvgate_mac_in_edge = nlvgate_mac INSIDE EDGE tndiff
nlvgate_mac_coin_edge = nlvgate_mac COIN EDGE tndiff
nlvgate_mac_WL = DFM PROPERTY nlvgate_mac nlvgate_mac_in_edge nlvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlvgate_mac_in_edge) + length(nlvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlvgate_mac)/property_ref(drawn_w) ]
nch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_mac" ANNOTATE OD_p nlvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt"
       drawn_w = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_mac_ODN_layer
#ENDIF

ngate_macz1 = SIZE ngate_mac BY 0.005
ngate_macz = ngate_macz1 AND nthin1
DEVICE MN(nch) ngate_macz ngate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_mac" 
ngate_mac_in_edge = ngate_mac INSIDE EDGE tndiff
ngate_mac_coin_edge = ngate_mac COIN EDGE tndiff
ngate_mac_WL = DFM PROPERTY ngate_mac ngate_mac_in_edge ngate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_mac_in_edge) + length(ngate_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_mac)/property_ref(drawn_w) ]
nch_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_mac" ANNOTATE OD_p ngate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch"
       drawn_w = DFM_NUM_VAL( ngate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na) nlgate nlgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(nlgate, tndiff ) + perimeter_inside(nlgate, tndiff)) / 2
   L=area(nlgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na" 
nlgate_in_edge = nlgate INSIDE EDGE tndiff
nlgate_coin_edge = nlgate COIN EDGE tndiff
nlgate_WL = DFM PROPERTY nlgate nlgate_in_edge nlgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlgate_in_edge) + length(nlgate_coin_edge))/2 ]
       [ drawn_l = area(nlgate)/property_ref(drawn_w) ]
nch_na_ODN_layer = DEVICE LAYER TEMPLATE "nch_na" ANNOTATE OD_p nlgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na"
       drawn_w = DFM_NUM_VAL( nlgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na_ODN_layer
#ENDIF

DEVICE MN(nch_na18) ngate_18na ngate_18na(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na18 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18na, tndiff ) + perimeter_inside(ngate_18na, tndiff)) / 2
   L=area(ngate_18na) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na18" 
ngate_18na_in_edge = ngate_18na INSIDE EDGE tndiff
ngate_18na_coin_edge = ngate_18na COIN EDGE tndiff
ngate_18na_WL = DFM PROPERTY ngate_18na ngate_18na_in_edge ngate_18na_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18na_in_edge) + length(ngate_18na_coin_edge))/2 ]
       [ drawn_l = area(ngate_18na)/property_ref(drawn_w) ]
nch_na18_ODN_layer = DEVICE LAYER TEMPLATE "nch_na18" ANNOTATE OD_p ngate_18na_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na18"
       drawn_w = DFM_NUM_VAL( ngate_18na_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18na_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na18_ODN_layer
#ENDIF

DEVICE MN(nch_na18) ngate_18na_mac ngate_18na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2
   L=area(ngate_18na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na18_mac" 
ngate_18na_mac_in_edge = ngate_18na_mac INSIDE EDGE tndiff
ngate_18na_mac_coin_edge = ngate_18na_mac COIN EDGE tndiff
ngate_18na_mac_WL = DFM PROPERTY ngate_18na_mac ngate_18na_mac_in_edge ngate_18na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18na_mac_in_edge) + length(ngate_18na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18na_mac)/property_ref(drawn_w) ]
nch_na18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na18_mac" ANNOTATE OD_p ngate_18na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na18"
       drawn_w = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25) ngate_25na ngate_25na(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25na, tndiff ) + perimeter_inside(ngate_25na, tndiff)) / 2
   L=area(ngate_25na) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25" 
ngate_25na_in_edge = ngate_25na INSIDE EDGE tndiff
ngate_25na_coin_edge = ngate_25na COIN EDGE tndiff
ngate_25na_WL = DFM PROPERTY ngate_25na ngate_25na_in_edge ngate_25na_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25na_in_edge) + length(ngate_25na_coin_edge))/2 ]
       [ drawn_l = area(ngate_25na)/property_ref(drawn_w) ]
nch_na25_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25" ANNOTATE OD_p ngate_25na_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25"
       drawn_w = DFM_NUM_VAL( ngate_25na_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25na_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25_ODN_layer
#ENDIF

DEVICE MN(nch_na25) ngate_25na_mac ngate_25na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2
   L=area(ngate_25na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25_mac" 
ngate_25na_mac_in_edge = ngate_25na_mac INSIDE EDGE tndiff
ngate_25na_mac_coin_edge = ngate_25na_mac COIN EDGE tndiff
ngate_25na_mac_WL = DFM PROPERTY ngate_25na_mac ngate_25na_mac_in_edge ngate_25na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25na_mac_in_edge) + length(ngate_25na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25na_mac)/property_ref(drawn_w) ]
nch_na25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25_mac" ANNOTATE OD_p ngate_25na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25"
       drawn_w = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25od33) ngate_25naod ngate_25naod(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25od33 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25naod, tndiff ) + perimeter_inside(ngate_25naod, tndiff)) / 2
   L=area(ngate_25naod) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25od33" 
ngate_25naod_in_edge = ngate_25naod INSIDE EDGE tndiff
ngate_25naod_coin_edge = ngate_25naod COIN EDGE tndiff
ngate_25naod_WL = DFM PROPERTY ngate_25naod ngate_25naod_in_edge ngate_25naod_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naod_in_edge) + length(ngate_25naod_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naod)/property_ref(drawn_w) ]
nch_na25od33_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25od33" ANNOTATE OD_p ngate_25naod_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25od33"
       drawn_w = DFM_NUM_VAL( ngate_25naod_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naod_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25od33_ODN_layer
#ENDIF

DEVICE MN(nch_na25od33) ngate_25naod_mac ngate_25naod_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25od33_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2
   L=area(ngate_25naod_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25od33_mac" 
ngate_25naod_mac_in_edge = ngate_25naod_mac INSIDE EDGE tndiff
ngate_25naod_mac_coin_edge = ngate_25naod_mac COIN EDGE tndiff
ngate_25naod_mac_WL = DFM PROPERTY ngate_25naod_mac ngate_25naod_mac_in_edge ngate_25naod_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naod_mac_in_edge) + length(ngate_25naod_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naod_mac)/property_ref(drawn_w) ]
nch_na25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25od33_mac" ANNOTATE OD_p ngate_25naod_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25od33"
       drawn_w = DFM_NUM_VAL( ngate_25naod_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naod_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25od33_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25ud18) ngate_25naud ngate_25naud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25ud18 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25naud, tndiff ) + perimeter_inside(ngate_25naud, tndiff)) / 2
   L=area(ngate_25naud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25ud18" 
ngate_25naud_in_edge = ngate_25naud INSIDE EDGE tndiff
ngate_25naud_coin_edge = ngate_25naud COIN EDGE tndiff
ngate_25naud_WL = DFM PROPERTY ngate_25naud ngate_25naud_in_edge ngate_25naud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naud_in_edge) + length(ngate_25naud_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naud)/property_ref(drawn_w) ]
nch_na25ud18_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25ud18" ANNOTATE OD_p ngate_25naud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25naud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25ud18_ODN_layer
#ENDIF

DEVICE MN(nch_na25ud18) ngate_25naud_mac ngate_25naud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25ud18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2
   L=area(ngate_25naud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25ud18_mac" 
ngate_25naud_mac_in_edge = ngate_25naud_mac INSIDE EDGE tndiff
ngate_25naud_mac_coin_edge = ngate_25naud_mac COIN EDGE tndiff
ngate_25naud_mac_WL = DFM PROPERTY ngate_25naud_mac ngate_25naud_mac_in_edge ngate_25naud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naud_mac_in_edge) + length(ngate_25naud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naud_mac)/property_ref(drawn_w) ]
nch_na25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25ud18_mac" ANNOTATE OD_p ngate_25naud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25naud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25ud18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na) nlgate_mac nlgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W=(perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2
   L=area(nlgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na_mac" 
nlgate_mac_in_edge = nlgate_mac INSIDE EDGE tndiff
nlgate_mac_coin_edge = nlgate_mac COIN EDGE tndiff
nlgate_mac_WL = DFM PROPERTY nlgate_mac nlgate_mac_in_edge nlgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlgate_mac_in_edge) + length(nlgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlgate_mac)/property_ref(drawn_w) ]
nch_na_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na_mac" ANNOTATE OD_p nlgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na"
       drawn_w = DFM_NUM_VAL( nlgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na_mac_ODN_layer
#ENDIF

DEVICE MN(nch_naavt) nlavgate nlavgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_naavt [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(nlavgate, tndiff ) + perimeter_inside(nlavgate, tndiff)) / 2
   L=area(nlavgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_naavt" 
nlavgate_in_edge = nlavgate INSIDE EDGE tndiff
nlavgate_coin_edge = nlavgate COIN EDGE tndiff
nlavgate_WL = DFM PROPERTY nlavgate nlavgate_in_edge nlavgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlavgate_in_edge) + length(nlavgate_coin_edge))/2 ]
       [ drawn_l = area(nlavgate)/property_ref(drawn_w) ]
nch_naavt_ODN_layer = DEVICE LAYER TEMPLATE "nch_naavt" ANNOTATE OD_p nlavgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_naavt"
       drawn_w = DFM_NUM_VAL( nlavgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlavgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_naavt_ODN_layer
#ENDIF

DEVICE MN(nch_naavt) nlavgate_mac nlavgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_naavt_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W=(perimeter_coincide(nlavgate_mac, tndiff ) + perimeter_inside(nlavgate_mac, tndiff)) / 2
   L=area(nlavgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_naavt_mac" 
nlavgate_mac_in_edge = nlavgate_mac INSIDE EDGE tndiff
nlavgate_mac_coin_edge = nlavgate_mac COIN EDGE tndiff
nlavgate_mac_WL = DFM PROPERTY nlavgate_mac nlavgate_mac_in_edge nlavgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlavgate_mac_in_edge) + length(nlavgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlavgate_mac)/property_ref(drawn_w) ]
nch_naavt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_naavt_mac" ANNOTATE OD_p nlavgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_naavt"
       drawn_w = DFM_NUM_VAL( nlavgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlavgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_naavt_mac_ODN_layer
#ENDIF

DEVICE MN(nchpd_dpncisr) ngate_sdpncipd ngate_sdpncipd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_dpncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sdpncipd, tndiff ) + perimeter_inside(ngate_sdpncipd, tndiff)) / 2
   L=area(ngate_sdpncipd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ncisr) ngate_sncipd ngate_sncipd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sncipd, tndiff ) + perimeter_inside(ngate_sncipd, tndiff)) / 2
   L=area(ngate_sncipd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_sr) ngate_spd ngate_spd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2
   L=area(ngate_spd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ull10ttprpsr) ngate_spd_ull10ttprp ngate_spd_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ull10ttprpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spd_ull10ttprp, tndiff ) + perimeter_inside(ngate_spd_ull10ttprp, tndiff)) / 2
   L=area(ngate_spd_ull10ttprp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ull10ttpsr) ngate_spd_ull10ttp ngate_spd_ull10ttp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ull10ttpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spd_ull10ttp, tndiff ) + perimeter_inside(ngate_spd_ull10ttp, tndiff)) / 2
   L=area(ngate_spd_ull10ttp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ullhcsr) ngate_sullhcpd ngate_sullhcpd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ullhcsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sullhcpd, tndiff ) + perimeter_inside(ngate_sullhcpd, tndiff)) / 2
   L=area(ngate_sullhcpd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ullsr) ngate_spd_ull ngate_spd_ull(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spd_ull, tndiff ) + perimeter_inside(ngate_spd_ull, tndiff)) / 2
   L=area(ngate_spd_ull) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_dpncisr) ngate_sdpncipg ngate_sdpncipg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_dpncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sdpncipg, tndiff ) + perimeter_inside(ngate_sdpncipg, tndiff)) / 2
   L=area(ngate_sdpncipg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ncisr) ngate_sncipg ngate_sncipg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sncipg, tndiff ) + perimeter_inside(ngate_sncipg, tndiff)) / 2
   L=area(ngate_sncipg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_sr) ngate_spg ngate_spg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2
   L=area(ngate_spg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ull10ttprpsr) ngate_spg_ull10ttprp ngate_spg_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ull10ttprpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spg_ull10ttprp, tndiff ) + perimeter_inside(ngate_spg_ull10ttprp, tndiff)) / 2
   L=area(ngate_spg_ull10ttprp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ull10ttpsr) ngate_spg_ull10ttp ngate_spg_ull10ttp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ull10ttpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spg_ull10ttp, tndiff ) + perimeter_inside(ngate_spg_ull10ttp, tndiff)) / 2
   L=area(ngate_spg_ull10ttp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ullhcsr) ngate_sullhcpg ngate_sullhcpg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ullhcsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sullhcpg, tndiff ) + perimeter_inside(ngate_sullhcpg, tndiff)) / 2
   L=area(ngate_sullhcpg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ullsr) ngate_spg_ull ngate_spg_ull(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spg_ull, tndiff ) + perimeter_inside(ngate_spg_ull, tndiff)) / 2
   L=area(ngate_spg_ull) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

pgatez1 = SIZE pgate BY 0.005
pgatez = pgatez1 AND pthin
DEVICE MP(pch) pgatez pgate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch CMACRO dfm_pmos_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch" 
pgate_in_edge = pgate INSIDE EDGE tpdiff
pgate_coin_edge = pgate COIN EDGE tpdiff
pgate_WL = DFM PROPERTY pgate pgate_in_edge pgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_in_edge) + length(pgate_coin_edge))/2 ]
       [ drawn_l = area(pgate)/property_ref(drawn_w) ]
pch_ODN_layer = DEVICE LAYER TEMPLATE "pch" ANNOTATE OD_p pgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch"
       drawn_w = DFM_NUM_VAL( pgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ODN_layer
#ENDIF

DEVICE MP(pch_18) pgate_18 pgate_18(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18, tpdiff ) + perimeter_inside(pgate_18, tpdiff)) / 2
   L=area(pgate_18) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18" 
pgate_18_in_edge = pgate_18 INSIDE EDGE tpdiff
pgate_18_coin_edge = pgate_18 COIN EDGE tpdiff
pgate_18_WL = DFM PROPERTY pgate_18 pgate_18_in_edge pgate_18_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18_in_edge) + length(pgate_18_coin_edge))/2 ]
       [ drawn_l = area(pgate_18)/property_ref(drawn_w) ]
pch_18_ODN_layer = DEVICE LAYER TEMPLATE "pch_18" ANNOTATE OD_p pgate_18_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18"
       drawn_w = DFM_NUM_VAL( pgate_18_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18_ODN_layer
#ENDIF

DEVICE MP(pch_18) pgate_18_mac pgate_18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2
   L=area(pgate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18_mac" 
pgate_18_mac_in_edge = pgate_18_mac INSIDE EDGE tpdiff
pgate_18_mac_coin_edge = pgate_18_mac COIN EDGE tpdiff
pgate_18_mac_WL = DFM PROPERTY pgate_18_mac pgate_18_mac_in_edge pgate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18_mac_in_edge) + length(pgate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18_mac)/property_ref(drawn_w) ]
pch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18_mac" ANNOTATE OD_p pgate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18"
       drawn_w = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_18ud15) pgate_18ud pgate_18ud(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_18ud15 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18ud, tpdiff ) + perimeter_inside(pgate_18ud, tpdiff)) / 2
   L=area(pgate_18ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud15" 
pgate_18ud_in_edge = pgate_18ud INSIDE EDGE tpdiff
pgate_18ud_coin_edge = pgate_18ud COIN EDGE tpdiff
pgate_18ud_WL = DFM PROPERTY pgate_18ud pgate_18ud_in_edge pgate_18ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud_in_edge) + length(pgate_18ud_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud)/property_ref(drawn_w) ]
pch_18ud15_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud15" ANNOTATE OD_p pgate_18ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud15"
       drawn_w = DFM_NUM_VAL( pgate_18ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud15_ODN_layer
#ENDIF

DEVICE MP(pch_18ud15) pgate_18ud_mac pgate_18ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18ud_mac, tpdiff ) + perimeter_inside(pgate_18ud_mac, tpdiff)) / 2
   L=area(pgate_18ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud15_mac" 
pgate_18ud_mac_in_edge = pgate_18ud_mac INSIDE EDGE tpdiff
pgate_18ud_mac_coin_edge = pgate_18ud_mac COIN EDGE tpdiff
pgate_18ud_mac_WL = DFM PROPERTY pgate_18ud_mac pgate_18ud_mac_in_edge pgate_18ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud_mac_in_edge) + length(pgate_18ud_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud_mac)/property_ref(drawn_w) ]
pch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud15_mac" ANNOTATE OD_p pgate_18ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud15"
       drawn_w = DFM_NUM_VAL( pgate_18ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25) pgate_25 pgate_25(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_25 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25, tpdiff ) + perimeter_inside(pgate_25, tpdiff)) / 2
   L=area(pgate_25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25" 
pgate_25_in_edge = pgate_25 INSIDE EDGE tpdiff
pgate_25_coin_edge = pgate_25 COIN EDGE tpdiff
pgate_25_WL = DFM PROPERTY pgate_25 pgate_25_in_edge pgate_25_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25_in_edge) + length(pgate_25_coin_edge))/2 ]
       [ drawn_l = area(pgate_25)/property_ref(drawn_w) ]
pch_25_ODN_layer = DEVICE LAYER TEMPLATE "pch_25" ANNOTATE OD_p pgate_25_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25"
       drawn_w = DFM_NUM_VAL( pgate_25_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25_ODN_layer
#ENDIF

DEVICE MP(pch_25) pgate_25_mac pgate_25_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2
   L=area(pgate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25_mac" 
pgate_25_mac_in_edge = pgate_25_mac INSIDE EDGE tpdiff
pgate_25_mac_coin_edge = pgate_25_mac COIN EDGE tpdiff
pgate_25_mac_WL = DFM PROPERTY pgate_25_mac pgate_25_mac_in_edge pgate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25_mac_in_edge) + length(pgate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25_mac)/property_ref(drawn_w) ]
pch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25_mac" ANNOTATE OD_p pgate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25"
       drawn_w = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25od33) pgate_25od pgate_25od(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_25od33 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25od, tpdiff ) + perimeter_inside(pgate_25od, tpdiff)) / 2
   L=area(pgate_25od) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25od33" 
pgate_25od_in_edge = pgate_25od INSIDE EDGE tpdiff
pgate_25od_coin_edge = pgate_25od COIN EDGE tpdiff
pgate_25od_WL = DFM PROPERTY pgate_25od pgate_25od_in_edge pgate_25od_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25od_in_edge) + length(pgate_25od_coin_edge))/2 ]
       [ drawn_l = area(pgate_25od)/property_ref(drawn_w) ]
pch_25od33_ODN_layer = DEVICE LAYER TEMPLATE "pch_25od33" ANNOTATE OD_p pgate_25od_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25od33"
       drawn_w = DFM_NUM_VAL( pgate_25od_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25od_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25od33_ODN_layer
#ENDIF

DEVICE MP(pch_25od33) pgate_25od_mac pgate_25od_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2
   L=area(pgate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25od33_mac" 
pgate_25od_mac_in_edge = pgate_25od_mac INSIDE EDGE tpdiff
pgate_25od_mac_coin_edge = pgate_25od_mac COIN EDGE tpdiff
pgate_25od_mac_WL = DFM PROPERTY pgate_25od_mac pgate_25od_mac_in_edge pgate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25od_mac_in_edge) + length(pgate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25od_mac)/property_ref(drawn_w) ]
pch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25od33_mac" ANNOTATE OD_p pgate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25od33"
       drawn_w = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25od33_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25ud18) pgate_25ud pgate_25ud(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_25ud18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25ud, tpdiff ) + perimeter_inside(pgate_25ud, tpdiff)) / 2
   L=area(pgate_25ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25ud18" 
pgate_25ud_in_edge = pgate_25ud INSIDE EDGE tpdiff
pgate_25ud_coin_edge = pgate_25ud COIN EDGE tpdiff
pgate_25ud_WL = DFM PROPERTY pgate_25ud pgate_25ud_in_edge pgate_25ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25ud_in_edge) + length(pgate_25ud_coin_edge))/2 ]
       [ drawn_l = area(pgate_25ud)/property_ref(drawn_w) ]
pch_25ud18_ODN_layer = DEVICE LAYER TEMPLATE "pch_25ud18" ANNOTATE OD_p pgate_25ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25ud18"
       drawn_w = DFM_NUM_VAL( pgate_25ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25ud18_ODN_layer
#ENDIF

DEVICE MP(pch_25ud18) pgate_25ud_mac pgate_25ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2
   L=area(pgate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25ud18_mac" 
pgate_25ud_mac_in_edge = pgate_25ud_mac INSIDE EDGE tpdiff
pgate_25ud_mac_coin_edge = pgate_25ud_mac COIN EDGE tpdiff
pgate_25ud_mac_WL = DFM PROPERTY pgate_25ud_mac pgate_25ud_mac_in_edge pgate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25ud_mac_in_edge) + length(pgate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25ud_mac)/property_ref(drawn_w) ]
pch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25ud18_mac" ANNOTATE OD_p pgate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25ud18"
       drawn_w = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25ud18_mac_ODN_layer
#ENDIF

pgate_avtz1 = SIZE pgate_avt BY 0.005
pgate_avtz = pgate_avtz1 AND pthin
DEVICE MP(pch_avt) pgate_avtz pgate_avt(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_avt CMACRO dfm_pmos_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_avt" 
pgate_avt_in_edge = pgate_avt INSIDE EDGE tpdiff
pgate_avt_coin_edge = pgate_avt COIN EDGE tpdiff
pgate_avt_WL = DFM PROPERTY pgate_avt pgate_avt_in_edge pgate_avt_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_avt_in_edge) + length(pgate_avt_coin_edge))/2 ]
       [ drawn_l = area(pgate_avt)/property_ref(drawn_w) ]
pch_avt_ODN_layer = DEVICE LAYER TEMPLATE "pch_avt" ANNOTATE OD_p pgate_avt_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_avt"
       drawn_w = DFM_NUM_VAL( pgate_avt_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_avt_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_avt_ODN_layer
#ENDIF

pgate_avt_macz1 = SIZE pgate_avt_mac BY 0.005
pgate_avt_macz = pgate_avt_macz1 AND pthin
DEVICE MP(pch_avt) pgate_avt_macz pgate_avt_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_avt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_avt_mac" 
pgate_avt_mac_in_edge = pgate_avt_mac INSIDE EDGE tpdiff
pgate_avt_mac_coin_edge = pgate_avt_mac COIN EDGE tpdiff
pgate_avt_mac_WL = DFM PROPERTY pgate_avt_mac pgate_avt_mac_in_edge pgate_avt_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_avt_mac_in_edge) + length(pgate_avt_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_avt_mac)/property_ref(drawn_w) ]
pch_avt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_avt_mac" ANNOTATE OD_p pgate_avt_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_avt"
       drawn_w = DFM_NUM_VAL( pgate_avt_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_avt_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_avt_mac_ODN_layer
#ENDIF

pehvgatez1 = SIZE pehvgate BY 0.005
pehvgatez = pehvgatez1 AND pthin
DEVICE MP(pch_ehvt) pehvgatez pehvgate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ehvt CMACRO dfm_pmos_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ehvt" 
pehvgate_in_edge = pehvgate INSIDE EDGE tpdiff
pehvgate_coin_edge = pehvgate COIN EDGE tpdiff
pehvgate_WL = DFM PROPERTY pehvgate pehvgate_in_edge pehvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pehvgate_in_edge) + length(pehvgate_coin_edge))/2 ]
       [ drawn_l = area(pehvgate)/property_ref(drawn_w) ]
pch_ehvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_ehvt" ANNOTATE OD_p pehvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ehvt"
       drawn_w = DFM_NUM_VAL( pehvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pehvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ehvt_ODN_layer
#ENDIF

pehvgate_macz1 = SIZE pehvgate_mac BY 0.005
pehvgate_macz = pehvgate_macz1 AND pthin
DEVICE MP(pch_ehvt) pehvgate_macz pehvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ehvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ehvt_mac" 
pehvgate_mac_in_edge = pehvgate_mac INSIDE EDGE tpdiff
pehvgate_mac_coin_edge = pehvgate_mac COIN EDGE tpdiff
pehvgate_mac_WL = DFM PROPERTY pehvgate_mac pehvgate_mac_in_edge pehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pehvgate_mac_in_edge) + length(pehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pehvgate_mac)/property_ref(drawn_w) ]
pch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_ehvt_mac" ANNOTATE OD_p pehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ehvt"
       drawn_w = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ehvt_mac_ODN_layer
#ENDIF

pelvgatez1 = SIZE pelvgate BY 0.005
pelvgatez = pelvgatez1 AND pthin
DEVICE MP(pch_elvt) pelvgatez pelvgate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_elvt CMACRO dfm_pmos_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_elvt" 
pelvgate_in_edge = pelvgate INSIDE EDGE tpdiff
pelvgate_coin_edge = pelvgate COIN EDGE tpdiff
pelvgate_WL = DFM PROPERTY pelvgate pelvgate_in_edge pelvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pelvgate_in_edge) + length(pelvgate_coin_edge))/2 ]
       [ drawn_l = area(pelvgate)/property_ref(drawn_w) ]
pch_elvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_elvt" ANNOTATE OD_p pelvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_elvt"
       drawn_w = DFM_NUM_VAL( pelvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pelvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_elvt_ODN_layer
#ENDIF

pelvgate_macz1 = SIZE pelvgate_mac BY 0.005
pelvgate_macz = pelvgate_macz1 AND pthin
DEVICE MP(pch_elvt) pelvgate_macz pelvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_elvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_elvt_mac" 
pelvgate_mac_in_edge = pelvgate_mac INSIDE EDGE tpdiff
pelvgate_mac_coin_edge = pelvgate_mac COIN EDGE tpdiff
pelvgate_mac_WL = DFM PROPERTY pelvgate_mac pelvgate_mac_in_edge pelvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pelvgate_mac_in_edge) + length(pelvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pelvgate_mac)/property_ref(drawn_w) ]
pch_elvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_elvt_mac" ANNOTATE OD_p pelvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_elvt"
       drawn_w = DFM_NUM_VAL( pelvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pelvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_elvt_mac_ODN_layer
#ENDIF

phvgatez1 = SIZE phvgate BY 0.005
phvgatez = phvgatez1 AND pthin
DEVICE MP(pch_hvt) phvgatez phvgate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_hvt CMACRO dfm_pmos_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hvt" 
phvgate_in_edge = phvgate INSIDE EDGE tpdiff
phvgate_coin_edge = phvgate COIN EDGE tpdiff
phvgate_WL = DFM PROPERTY phvgate phvgate_in_edge phvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(phvgate_in_edge) + length(phvgate_coin_edge))/2 ]
       [ drawn_l = area(phvgate)/property_ref(drawn_w) ]
pch_hvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_hvt" ANNOTATE OD_p phvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hvt"
       drawn_w = DFM_NUM_VAL( phvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( phvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hvt_ODN_layer
#ENDIF

phvgate_macz1 = SIZE phvgate_mac BY 0.005
phvgate_macz = phvgate_macz1 AND pthin
DEVICE MP(pch_hvt) phvgate_macz phvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_hvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hvt_mac" 
phvgate_mac_in_edge = phvgate_mac INSIDE EDGE tpdiff
phvgate_mac_coin_edge = phvgate_mac COIN EDGE tpdiff
phvgate_mac_WL = DFM PROPERTY phvgate_mac phvgate_mac_in_edge phvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(phvgate_mac_in_edge) + length(phvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(phvgate_mac)/property_ref(drawn_w) ]
pch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_hvt_mac" ANNOTATE OD_p phvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hvt"
       drawn_w = DFM_NUM_VAL( phvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( phvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hvt_mac_ODN_layer
#ENDIF

plvgatez1 = SIZE plvgate BY 0.005
plvgatez = plvgatez1 AND pthin
DEVICE MP(pch_lvt) plvgatez plvgate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvt CMACRO dfm_pmos_compact
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_lvt" 
plvgate_in_edge = plvgate INSIDE EDGE tpdiff
plvgate_coin_edge = plvgate COIN EDGE tpdiff
plvgate_WL = DFM PROPERTY plvgate plvgate_in_edge plvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(plvgate_in_edge) + length(plvgate_coin_edge))/2 ]
       [ drawn_l = area(plvgate)/property_ref(drawn_w) ]
pch_lvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_lvt" ANNOTATE OD_p plvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt"
       drawn_w = DFM_NUM_VAL( plvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( plvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_lvt_ODN_layer
#ENDIF

plvgate_macz1 = SIZE plvgate_mac BY 0.005
plvgate_macz = plvgate_macz1 AND pthin
DEVICE MP(pch_lvt) plvgate_macz plvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_lvt_mac" 
plvgate_mac_in_edge = plvgate_mac INSIDE EDGE tpdiff
plvgate_mac_coin_edge = plvgate_mac COIN EDGE tpdiff
plvgate_mac_WL = DFM PROPERTY plvgate_mac plvgate_mac_in_edge plvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(plvgate_mac_in_edge) + length(plvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(plvgate_mac)/property_ref(drawn_w) ]
pch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_lvt_mac" ANNOTATE OD_p plvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt"
       drawn_w = DFM_NUM_VAL( plvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( plvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_lvt_mac_ODN_layer
#ENDIF

pgate_macz1 = SIZE pgate_mac BY 0.005
pgate_macz = pgate_macz1 AND pthin
DEVICE MP(pch) pgate_macz pgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_mac" 
pgate_mac_in_edge = pgate_mac INSIDE EDGE tpdiff
pgate_mac_coin_edge = pgate_mac COIN EDGE tpdiff
pgate_mac_WL = DFM PROPERTY pgate_mac pgate_mac_in_edge pgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_mac_in_edge) + length(pgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_mac)/property_ref(drawn_w) ]
pch_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_mac" ANNOTATE OD_p pgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch"
       drawn_w = DFM_NUM_VAL( pgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_mac_ODN_layer
#ENDIF

DEVICE MP(pchpu_dpncisr) pgate_sdpnci pgate_sdpnci(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_dpncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_sdpnci, tpdiff ) + perimeter_inside(pgate_sdpnci, tpdiff)) / 2
   L=area(pgate_sdpnci) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ncisr) pgate_snci pgate_snci(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_snci, tpdiff ) + perimeter_inside(pgate_snci, tpdiff)) / 2
   L=area(pgate_snci) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_sr) pgate_s pgate_s(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2
   L=area(pgate_s) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ull10ttpsr) pgate_s_ull10ttp pgate_s_ull10ttp(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ull10ttpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_s_ull10ttp, tpdiff ) + perimeter_inside(pgate_s_ull10ttp, tpdiff)) / 2
   L=area(pgate_s_ull10ttp) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ullhcsr) pgate_sullhc pgate_sullhc(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ullhcsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_sullhc, tpdiff ) + perimeter_inside(pgate_sullhc, tpdiff)) / 2
   L=area(pgate_sullhc) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ullsr) pgate_s_ull pgate_s_ull(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_s_ull, tpdiff ) + perimeter_inside(pgate_s_ull, tpdiff)) / 2
   L=area(pgate_s_ull) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]


#ELSE
DEVICE LDDP(pch_hv25_spw) pgate_hv25 d_tpdiff_hv(D) pgate_hv25(G) s_tpdiff_hv(S) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_hv25_spw netlist element "M" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_hv25, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25, d_tpdiff_hv)) / 2
   L = area(pgate_hv25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDP(pch_hv25_spw) pgate_hv25_mac d_tpdiff_hv(D) pgate_hv25_mac(G) s_tpdiff_hv(S) nxwell(B) <pthin> netlist model pch_hv25_spw_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_hv25_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25_mac, d_tpdiff_hv)) / 2
   L = area(pgate_hv25_mac) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hv25_spw_mac" 
pgate_hv25_mac_in_edge = pgate_hv25_mac INSIDE EDGE s_tpdiff_hv
pgate_hv25_mac_coin_edge = pgate_hv25_mac COIN EDGE s_tpdiff_hv
pgate_hv25_mac_WL = DFM PROPERTY pgate_hv25_mac pgate_hv25_mac_in_edge pgate_hv25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_hv25_mac_in_edge) + length(pgate_hv25_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_hv25_mac)/property_ref(drawn_w) ]
pch_hv25_spw_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_hv25_spw_mac" ANNOTATE OD_p pgate_hv25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hv25_spw"
       drawn_w = DFM_NUM_VAL( pgate_hv25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_hv25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hv25_spw_mac_ODN_layer
#ENDIF

DEVICE LDDN(nch_hv25_snw) ngate_hv25 d_tndiff_hv(D) ngate_hv25(G) s_tndiff_hv(S) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_hv25_snw netlist element "M" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hv25, s_tndiff_hv ) + perimeter_coincide(ngate_hv25, d_tndiff_hv)) / 2
   L = area(ngate_hv25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_hv25_snw) ngate_hv25_mac d_tndiff_hv(D) ngate_hv25_mac(G) s_tndiff_hv(S) psub(B) <nthin1> netlist model nch_hv25_snw_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hv25_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv25_mac, d_tndiff_hv)) / 2
   L = area(ngate_hv25_mac) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hv25_snw_mac" 
ngate_hv25_mac_in_edge = ngate_hv25_mac INSIDE EDGE s_tndiff_hv
ngate_hv25_mac_coin_edge = ngate_hv25_mac COIN EDGE s_tndiff_hv
ngate_hv25_mac_WL = DFM PROPERTY ngate_hv25_mac ngate_hv25_mac_in_edge ngate_hv25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hv25_mac_in_edge) + length(ngate_hv25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hv25_mac)/property_ref(drawn_w) ]
nch_hv25_snw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hv25_snw_mac" ANNOTATE OD_p ngate_hv25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hv25_snw"
       drawn_w = DFM_NUM_VAL( ngate_hv25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hv25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hv25_snw_mac_ODN_layer
#ENDIF

DEVICE MN(nch) ngate ngate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate, tndiff ) + perimeter_inside(ngate, tndiff)) / 2
   L = area(ngate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch" 
ngate_in_edge = ngate INSIDE EDGE tndiff
ngate_coin_edge = ngate COIN EDGE tndiff
ngate_WL = DFM PROPERTY ngate ngate_in_edge ngate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_in_edge) + length(ngate_coin_edge))/2 ]
       [ drawn_l = area(ngate)/property_ref(drawn_w) ]
nch_ODN_layer = DEVICE LAYER TEMPLATE "nch" ANNOTATE OD_p ngate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch"
       drawn_w = DFM_NUM_VAL( ngate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ODN_layer
#ENDIF

DEVICE MN(nch_18) ngate_18 ngate_18(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18, tndiff ) + perimeter_inside(ngate_18, tndiff)) / 2
   L = area(ngate_18) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18" 
ngate_18_in_edge = ngate_18 INSIDE EDGE tndiff
ngate_18_coin_edge = ngate_18 COIN EDGE tndiff
ngate_18_WL = DFM PROPERTY ngate_18 ngate_18_in_edge ngate_18_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18_in_edge) + length(ngate_18_coin_edge))/2 ]
       [ drawn_l = area(ngate_18)/property_ref(drawn_w) ]
nch_18_ODN_layer = DEVICE LAYER TEMPLATE "nch_18" ANNOTATE OD_p ngate_18_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18"
       drawn_w = DFM_NUM_VAL( ngate_18_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_ODN_layer
#ENDIF

DEVICE MN(nch_18_dnw) dngate_18 dngate_18(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_18, tndiff ) + perimeter_inside(dngate_18, tndiff)) / 2
   L = area(dngate_18) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_dnw" 
dngate_18_in_edge = dngate_18 INSIDE EDGE tndiff
dngate_18_coin_edge = dngate_18 COIN EDGE tndiff
dngate_18_WL = DFM PROPERTY dngate_18 dngate_18_in_edge dngate_18_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18_in_edge) + length(dngate_18_coin_edge))/2 ]
       [ drawn_l = area(dngate_18)/property_ref(drawn_w) ]
nch_18_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_dnw" ANNOTATE OD_p dngate_18_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_18_dnw) dngate_18_mac dngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_18_mac, tndiff ) + perimeter_inside(dngate_18_mac, tndiff)) / 2
   L = area(dngate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_dnw_mac" 
dngate_18_mac_in_edge = dngate_18_mac INSIDE EDGE tndiff
dngate_18_mac_coin_edge = dngate_18_mac COIN EDGE tndiff
dngate_18_mac_WL = DFM PROPERTY dngate_18_mac dngate_18_mac_in_edge dngate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18_mac_in_edge) + length(dngate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_18_mac)/property_ref(drawn_w) ]
nch_18_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_dnw_mac" ANNOTATE OD_p dngate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18) ngate_18_mac ngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2
   L = area(ngate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_mac" 
ngate_18_mac_in_edge = ngate_18_mac INSIDE EDGE tndiff
ngate_18_mac_coin_edge = ngate_18_mac COIN EDGE tndiff
ngate_18_mac_WL = DFM PROPERTY ngate_18_mac ngate_18_mac_in_edge ngate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18_mac_in_edge) + length(ngate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18_mac)/property_ref(drawn_w) ]
nch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_mac" ANNOTATE OD_p ngate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18"
       drawn_w = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15) ngate_18ud ngate_18ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18ud15 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18ud, tndiff ) + perimeter_inside(ngate_18ud, tndiff)) / 2
   L = area(ngate_18ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15" 
ngate_18ud_in_edge = ngate_18ud INSIDE EDGE tndiff
ngate_18ud_coin_edge = ngate_18ud COIN EDGE tndiff
ngate_18ud_WL = DFM PROPERTY ngate_18ud ngate_18ud_in_edge ngate_18ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud_in_edge) + length(ngate_18ud_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud)/property_ref(drawn_w) ]
nch_18ud15_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15" ANNOTATE OD_p ngate_18ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15"
       drawn_w = DFM_NUM_VAL( ngate_18ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15_dnw) dngate_18ud dngate_18ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_18ud15 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_18ud, tndiff ) + perimeter_inside(dngate_18ud, tndiff)) / 2
   L = area(dngate_18ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_dnw" 
dngate_18ud_in_edge = dngate_18ud INSIDE EDGE tndiff
dngate_18ud_coin_edge = dngate_18ud COIN EDGE tndiff
dngate_18ud_WL = DFM PROPERTY dngate_18ud dngate_18ud_in_edge dngate_18ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18ud_in_edge) + length(dngate_18ud_coin_edge))/2 ]
       [ drawn_l = area(dngate_18ud)/property_ref(drawn_w) ]
nch_18ud15_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_dnw" ANNOTATE OD_p dngate_18ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15_dnw) dngate_18ud_mac dngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_18ud_mac, tndiff ) + perimeter_inside(dngate_18ud_mac, tndiff)) / 2
   L = area(dngate_18ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_dnw_mac" 
dngate_18ud_mac_in_edge = dngate_18ud_mac INSIDE EDGE tndiff
dngate_18ud_mac_coin_edge = dngate_18ud_mac COIN EDGE tndiff
dngate_18ud_mac_WL = DFM PROPERTY dngate_18ud_mac dngate_18ud_mac_in_edge dngate_18ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_18ud_mac_in_edge) + length(dngate_18ud_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_18ud_mac)/property_ref(drawn_w) ]
nch_18ud15_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_dnw_mac" ANNOTATE OD_p dngate_18ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15_dnw"
       drawn_w = DFM_NUM_VAL( dngate_18ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_18ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15) ngate_18ud_mac ngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18ud_mac, tndiff ) + perimeter_inside(ngate_18ud_mac, tndiff)) / 2
   L = area(ngate_18ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_mac" 
ngate_18ud_mac_in_edge = ngate_18ud_mac INSIDE EDGE tndiff
ngate_18ud_mac_coin_edge = ngate_18ud_mac COIN EDGE tndiff
ngate_18ud_mac_WL = DFM PROPERTY ngate_18ud_mac ngate_18ud_mac_in_edge ngate_18ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud_mac_in_edge) + length(ngate_18ud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud_mac)/property_ref(drawn_w) ]
nch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_mac" ANNOTATE OD_p ngate_18ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15"
       drawn_w = DFM_NUM_VAL( ngate_18ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25) ngate_25 ngate_25(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25, tndiff ) + perimeter_inside(ngate_25, tndiff)) / 2
   L = area(ngate_25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25" 
ngate_25_in_edge = ngate_25 INSIDE EDGE tndiff
ngate_25_coin_edge = ngate_25 COIN EDGE tndiff
ngate_25_WL = DFM PROPERTY ngate_25 ngate_25_in_edge ngate_25_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_in_edge) + length(ngate_25_coin_edge))/2 ]
       [ drawn_l = area(ngate_25)/property_ref(drawn_w) ]
nch_25_ODN_layer = DEVICE LAYER TEMPLATE "nch_25" ANNOTATE OD_p ngate_25_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25"
       drawn_w = DFM_NUM_VAL( ngate_25_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_ODN_layer
#ENDIF

DEVICE MN(nch_25_dnw) dngate_25 dngate_25(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25, tndiff ) + perimeter_inside(dngate_25, tndiff)) / 2
   L = area(dngate_25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_dnw" 
dngate_25_in_edge = dngate_25 INSIDE EDGE tndiff
dngate_25_coin_edge = dngate_25 COIN EDGE tndiff
dngate_25_WL = DFM PROPERTY dngate_25 dngate_25_in_edge dngate_25_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_in_edge) + length(dngate_25_coin_edge))/2 ]
       [ drawn_l = area(dngate_25)/property_ref(drawn_w) ]
nch_25_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_dnw" ANNOTATE OD_p dngate_25_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_25_dnw) dngate_25_mac dngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25_mac, tndiff ) + perimeter_inside(dngate_25_mac, tndiff)) / 2
   L = area(dngate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_dnw_mac" 
dngate_25_mac_in_edge = dngate_25_mac INSIDE EDGE tndiff
dngate_25_mac_coin_edge = dngate_25_mac COIN EDGE tndiff
dngate_25_mac_WL = DFM PROPERTY dngate_25_mac dngate_25_mac_in_edge dngate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_mac_in_edge) + length(dngate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25_mac)/property_ref(drawn_w) ]
nch_25_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_dnw_mac" ANNOTATE OD_p dngate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_fgd_dnw_mac) dngate_25_fgd_mac dngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_fgd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25_fgd_mac, tndiff ) + perimeter_inside(dngate_25_fgd_mac, tndiff)) / 2
   L = area(dngate_25_fgd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_fgd_dnw_mac" 
dngate_25_fgd_mac_in_edge = dngate_25_fgd_mac INSIDE EDGE tndiff
dngate_25_fgd_mac_coin_edge = dngate_25_fgd_mac COIN EDGE tndiff
dngate_25_fgd_mac_WL = DFM PROPERTY dngate_25_fgd_mac dngate_25_fgd_mac_in_edge dngate_25_fgd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_fgd_mac_in_edge) + length(dngate_25_fgd_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25_fgd_mac)/property_ref(drawn_w) ]
nch_25_fgd_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_fgd_dnw_mac" ANNOTATE OD_p dngate_25_fgd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_fgd_dnw_mac"
       drawn_w = DFM_NUM_VAL( dngate_25_fgd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_fgd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_fgd_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_fgd_mac) ngate_25_fgd_mac ngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_fgd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25_fgd_mac, tndiff ) + perimeter_inside(ngate_25_fgd_mac, tndiff)) / 2
   L = area(ngate_25_fgd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_fgd_mac" 
ngate_25_fgd_mac_in_edge = ngate_25_fgd_mac INSIDE EDGE tndiff
ngate_25_fgd_mac_coin_edge = ngate_25_fgd_mac COIN EDGE tndiff
ngate_25_fgd_mac_WL = DFM PROPERTY ngate_25_fgd_mac ngate_25_fgd_mac_in_edge ngate_25_fgd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_fgd_mac_in_edge) + length(ngate_25_fgd_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_fgd_mac)/property_ref(drawn_w) ]
nch_25_fgd_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_fgd_mac" ANNOTATE OD_p ngate_25_fgd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_fgd_mac"
       drawn_w = DFM_NUM_VAL( ngate_25_fgd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_fgd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_fgd_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25) ngate_25_mac ngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2
   L = area(ngate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_mac" 
ngate_25_mac_in_edge = ngate_25_mac INSIDE EDGE tndiff
ngate_25_mac_coin_edge = ngate_25_mac COIN EDGE tndiff
ngate_25_mac_WL = DFM PROPERTY ngate_25_mac ngate_25_mac_in_edge ngate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_mac_in_edge) + length(ngate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_mac)/property_ref(drawn_w) ]
nch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_mac" ANNOTATE OD_p ngate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25"
       drawn_w = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_ngd_dnw_mac) dngate_25_ngd_mac dngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_ngd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25_ngd_mac, tndiff ) + perimeter_inside(dngate_25_ngd_mac, tndiff)) / 2
   L = area(dngate_25_ngd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_ngd_dnw_mac" 
dngate_25_ngd_mac_in_edge = dngate_25_ngd_mac INSIDE EDGE tndiff
dngate_25_ngd_mac_coin_edge = dngate_25_ngd_mac COIN EDGE tndiff
dngate_25_ngd_mac_WL = DFM PROPERTY dngate_25_ngd_mac dngate_25_ngd_mac_in_edge dngate_25_ngd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25_ngd_mac_in_edge) + length(dngate_25_ngd_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25_ngd_mac)/property_ref(drawn_w) ]
nch_25_ngd_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_ngd_dnw_mac" ANNOTATE OD_p dngate_25_ngd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_ngd_dnw_mac"
       drawn_w = DFM_NUM_VAL( dngate_25_ngd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25_ngd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_ngd_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_ngd_mac) ngate_25_ngd_mac ngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> netlist model nch_25_ngd_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25_ngd_mac, tndiff ) + perimeter_inside(ngate_25_ngd_mac, tndiff)) / 2
   L = area(ngate_25_ngd_mac) / W
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_ngd_mac" 
ngate_25_ngd_mac_in_edge = ngate_25_ngd_mac INSIDE EDGE tndiff
ngate_25_ngd_mac_coin_edge = ngate_25_ngd_mac COIN EDGE tndiff
ngate_25_ngd_mac_WL = DFM PROPERTY ngate_25_ngd_mac ngate_25_ngd_mac_in_edge ngate_25_ngd_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_ngd_mac_in_edge) + length(ngate_25_ngd_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_ngd_mac)/property_ref(drawn_w) ]
nch_25_ngd_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_ngd_mac" ANNOTATE OD_p ngate_25_ngd_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_ngd_mac"
       drawn_w = DFM_NUM_VAL( ngate_25_ngd_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_ngd_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_ngd_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25od33) ngate_25od ngate_25od(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25od33 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25od, tndiff ) + perimeter_inside(ngate_25od, tndiff)) / 2
   L = area(ngate_25od) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33" 
ngate_25od_in_edge = ngate_25od INSIDE EDGE tndiff
ngate_25od_coin_edge = ngate_25od COIN EDGE tndiff
ngate_25od_WL = DFM PROPERTY ngate_25od ngate_25od_in_edge ngate_25od_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25od_in_edge) + length(ngate_25od_coin_edge))/2 ]
       [ drawn_l = area(ngate_25od)/property_ref(drawn_w) ]
nch_25od33_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33" ANNOTATE OD_p ngate_25od_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33"
       drawn_w = DFM_NUM_VAL( ngate_25od_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25od_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_ODN_layer
#ENDIF

DEVICE MN(nch_25od33_dnw) dngate_25od dngate_25od(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25od33 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25od, tndiff ) + perimeter_inside(dngate_25od, tndiff)) / 2
   L = area(dngate_25od) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_dnw" 
dngate_25od_in_edge = dngate_25od INSIDE EDGE tndiff
dngate_25od_coin_edge = dngate_25od COIN EDGE tndiff
dngate_25od_WL = DFM PROPERTY dngate_25od dngate_25od_in_edge dngate_25od_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25od_in_edge) + length(dngate_25od_coin_edge))/2 ]
       [ drawn_l = area(dngate_25od)/property_ref(drawn_w) ]
nch_25od33_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_dnw" ANNOTATE OD_p dngate_25od_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25od_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25od_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_25od33_dnw) dngate_25od_mac dngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25od_mac, tndiff ) + perimeter_inside(dngate_25od_mac, tndiff)) / 2
   L = area(dngate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_dnw_mac" 
dngate_25od_mac_in_edge = dngate_25od_mac INSIDE EDGE tndiff
dngate_25od_mac_coin_edge = dngate_25od_mac COIN EDGE tndiff
dngate_25od_mac_WL = DFM PROPERTY dngate_25od_mac dngate_25od_mac_in_edge dngate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25od_mac_in_edge) + length(dngate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25od_mac)/property_ref(drawn_w) ]
nch_25od33_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_dnw_mac" ANNOTATE OD_p dngate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25od33) ngate_25od_mac ngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2
   L = area(ngate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_mac" 
ngate_25od_mac_in_edge = ngate_25od_mac INSIDE EDGE tndiff
ngate_25od_mac_coin_edge = ngate_25od_mac COIN EDGE tndiff
ngate_25od_mac_WL = DFM PROPERTY ngate_25od_mac ngate_25od_mac_in_edge ngate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25od_mac_in_edge) + length(ngate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25od_mac)/property_ref(drawn_w) ]
nch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_mac" ANNOTATE OD_p ngate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33"
       drawn_w = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18) ngate_25ud ngate_25ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25ud18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25ud, tndiff ) + perimeter_inside(ngate_25ud, tndiff)) / 2
   L = area(ngate_25ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18" 
ngate_25ud_in_edge = ngate_25ud INSIDE EDGE tndiff
ngate_25ud_coin_edge = ngate_25ud COIN EDGE tndiff
ngate_25ud_WL = DFM PROPERTY ngate_25ud ngate_25ud_in_edge ngate_25ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25ud_in_edge) + length(ngate_25ud_coin_edge))/2 ]
       [ drawn_l = area(ngate_25ud)/property_ref(drawn_w) ]
nch_25ud18_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18" ANNOTATE OD_p ngate_25ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18_dnw) dngate_25ud dngate_25ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_25ud18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25ud, tndiff ) + perimeter_inside(dngate_25ud, tndiff)) / 2
   L = area(dngate_25ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_dnw" 
dngate_25ud_in_edge = dngate_25ud INSIDE EDGE tndiff
dngate_25ud_coin_edge = dngate_25ud COIN EDGE tndiff
dngate_25ud_WL = DFM PROPERTY dngate_25ud dngate_25ud_in_edge dngate_25ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25ud_in_edge) + length(dngate_25ud_coin_edge))/2 ]
       [ drawn_l = area(dngate_25ud)/property_ref(drawn_w) ]
nch_25ud18_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_dnw" ANNOTATE OD_p dngate_25ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18_dnw) dngate_25ud_mac dngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_25ud_mac, tndiff ) + perimeter_inside(dngate_25ud_mac, tndiff)) / 2
   L = area(dngate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_dnw_mac" 
dngate_25ud_mac_in_edge = dngate_25ud_mac INSIDE EDGE tndiff
dngate_25ud_mac_coin_edge = dngate_25ud_mac COIN EDGE tndiff
dngate_25ud_mac_WL = DFM PROPERTY dngate_25ud_mac dngate_25ud_mac_in_edge dngate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_25ud_mac_in_edge) + length(dngate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_25ud_mac)/property_ref(drawn_w) ]
nch_25ud18_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_dnw_mac" ANNOTATE OD_p dngate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18_dnw"
       drawn_w = DFM_NUM_VAL( dngate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18) ngate_25ud_mac ngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2
   L = area(ngate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_mac" 
ngate_25ud_mac_in_edge = ngate_25ud_mac INSIDE EDGE tndiff
ngate_25ud_mac_coin_edge = ngate_25ud_mac COIN EDGE tndiff
ngate_25ud_mac_WL = DFM PROPERTY ngate_25ud_mac ngate_25ud_mac_in_edge ngate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25ud_mac_in_edge) + length(ngate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25ud_mac)/property_ref(drawn_w) ]
nch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_mac" ANNOTATE OD_p ngate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ana25_dnw_mac) dngate_ana25_mac dngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_ana25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(dngate_ana25_mac, tndiff ) + perimeter_inside(dngate_ana25_mac, tndiff)) / 2
   L = area(dngate_ana25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ana25_dnw_mac" 
dngate_ana25_mac_in_edge = dngate_ana25_mac INSIDE EDGE tndiff
dngate_ana25_mac_coin_edge = dngate_ana25_mac COIN EDGE tndiff
dngate_ana25_mac_WL = DFM PROPERTY dngate_ana25_mac dngate_ana25_mac_in_edge dngate_ana25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(dngate_ana25_mac_in_edge) + length(dngate_ana25_mac_coin_edge))/2 ]
       [ drawn_l = area(dngate_ana25_mac)/property_ref(drawn_w) ]
nch_ana25_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ana25_dnw_mac" ANNOTATE OD_p dngate_ana25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ana25_dnw_mac"
       drawn_w = DFM_NUM_VAL( dngate_ana25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( dngate_ana25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ana25_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ana25_mac) ngate_ana25_mac ngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_ana25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_ana25_mac, tndiff ) + perimeter_inside(ngate_ana25_mac, tndiff)) / 2
   L = area(ngate_ana25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ana25_mac" 
ngate_ana25_mac_in_edge = ngate_ana25_mac INSIDE EDGE tndiff
ngate_ana25_mac_coin_edge = ngate_ana25_mac COIN EDGE tndiff
ngate_ana25_mac_WL = DFM PROPERTY ngate_ana25_mac ngate_ana25_mac_in_edge ngate_ana25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_ana25_mac_in_edge) + length(ngate_ana25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_ana25_mac)/property_ref(drawn_w) ]
nch_ana25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ana25_mac" ANNOTATE OD_p ngate_ana25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ana25_mac"
       drawn_w = DFM_NUM_VAL( ngate_ana25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_ana25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ana25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_avt) ngate_avt ngate_avt(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_avt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_avt, tndiff ) + perimeter_inside(ngate_avt, tndiff)) / 2
   L = area(ngate_avt) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt" 
ngate_avt_in_edge = ngate_avt INSIDE EDGE tndiff
ngate_avt_coin_edge = ngate_avt COIN EDGE tndiff
ngate_avt_WL = DFM PROPERTY ngate_avt ngate_avt_in_edge ngate_avt_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_avt_in_edge) + length(ngate_avt_coin_edge))/2 ]
       [ drawn_l = area(ngate_avt)/property_ref(drawn_w) ]
nch_avt_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt" ANNOTATE OD_p ngate_avt_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt"
       drawn_w = DFM_NUM_VAL( ngate_avt_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_avt_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_ODN_layer
#ENDIF

DEVICE MN(nch_avt_dnw) nrgate_avt nrgate_avt(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_avt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nrgate_avt, tndiff ) + perimeter_inside(nrgate_avt, tndiff)) / 2
   L = area(nrgate_avt) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_dnw" 
nrgate_avt_in_edge = nrgate_avt INSIDE EDGE tndiff
nrgate_avt_coin_edge = nrgate_avt COIN EDGE tndiff
nrgate_avt_WL = DFM PROPERTY nrgate_avt nrgate_avt_in_edge nrgate_avt_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_avt_in_edge) + length(nrgate_avt_coin_edge))/2 ]
       [ drawn_l = area(nrgate_avt)/property_ref(drawn_w) ]
nch_avt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_dnw" ANNOTATE OD_p nrgate_avt_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_avt_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_avt_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_avt_dnw) nrgate_avt_mac nrgate_avt_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_avt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nrgate_avt_mac, tndiff ) + perimeter_inside(nrgate_avt_mac, tndiff)) / 2
   L = area(nrgate_avt_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_dnw_mac" 
nrgate_avt_mac_in_edge = nrgate_avt_mac INSIDE EDGE tndiff
nrgate_avt_mac_coin_edge = nrgate_avt_mac COIN EDGE tndiff
nrgate_avt_mac_WL = DFM PROPERTY nrgate_avt_mac nrgate_avt_mac_in_edge nrgate_avt_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_avt_mac_in_edge) + length(nrgate_avt_mac_coin_edge))/2 ]
       [ drawn_l = area(nrgate_avt_mac)/property_ref(drawn_w) ]
nch_avt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_dnw_mac" ANNOTATE OD_p nrgate_avt_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_avt_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_avt_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_avt) ngate_avt_mac ngate_avt_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_avt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_avt_mac, tndiff ) + perimeter_inside(ngate_avt_mac, tndiff)) / 2
   L = area(ngate_avt_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_mac" 
ngate_avt_mac_in_edge = ngate_avt_mac INSIDE EDGE tndiff
ngate_avt_mac_coin_edge = ngate_avt_mac COIN EDGE tndiff
ngate_avt_mac_WL = DFM PROPERTY ngate_avt_mac ngate_avt_mac_in_edge ngate_avt_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_avt_mac_in_edge) + length(ngate_avt_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_avt_mac)/property_ref(drawn_w) ]
nch_avt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_mac" ANNOTATE OD_p ngate_avt_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt"
       drawn_w = DFM_NUM_VAL( ngate_avt_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_avt_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_dnw) nrgate nrgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nrgate, tndiff ) + perimeter_inside(nrgate, tndiff)) / 2
   L = area(nrgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_dnw" 
nrgate_in_edge = nrgate INSIDE EDGE tndiff
nrgate_coin_edge = nrgate COIN EDGE tndiff
nrgate_WL = DFM PROPERTY nrgate nrgate_in_edge nrgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_in_edge) + length(nrgate_coin_edge))/2 ]
       [ drawn_l = area(nrgate)/property_ref(drawn_w) ]
nch_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_dnw" ANNOTATE OD_p nrgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_dnw) nrgate_mac nrgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nrgate_mac, tndiff ) + perimeter_inside(nrgate_mac, tndiff)) / 2
   L = area(nrgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_dnw_mac" 
nrgate_mac_in_edge = nrgate_mac INSIDE EDGE tndiff
nrgate_mac_coin_edge = nrgate_mac COIN EDGE tndiff
nrgate_mac_WL = DFM PROPERTY nrgate_mac nrgate_mac_in_edge nrgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nrgate_mac_in_edge) + length(nrgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nrgate_mac)/property_ref(drawn_w) ]
nch_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_dnw_mac" ANNOTATE OD_p nrgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_dnw"
       drawn_w = DFM_NUM_VAL( nrgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nrgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ehvt) nehvgate nehvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_ehvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nehvgate, tndiff ) + perimeter_inside(nehvgate, tndiff)) / 2
   L = area(nehvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt" 
nehvgate_in_edge = nehvgate INSIDE EDGE tndiff
nehvgate_coin_edge = nehvgate COIN EDGE tndiff
nehvgate_WL = DFM PROPERTY nehvgate nehvgate_in_edge nehvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nehvgate_in_edge) + length(nehvgate_coin_edge))/2 ]
       [ drawn_l = area(nehvgate)/property_ref(drawn_w) ]
nch_ehvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt" ANNOTATE OD_p nehvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt"
       drawn_w = DFM_NUM_VAL( nehvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nehvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_ODN_layer
#ENDIF

DEVICE MN(nch_ehvt_dnw) n1ehvgate n1ehvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_ehvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1ehvgate, tndiff ) + perimeter_inside(n1ehvgate, tndiff)) / 2
   L = area(n1ehvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_dnw" 
n1ehvgate_in_edge = n1ehvgate INSIDE EDGE tndiff
n1ehvgate_coin_edge = n1ehvgate COIN EDGE tndiff
n1ehvgate_WL = DFM PROPERTY n1ehvgate n1ehvgate_in_edge n1ehvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1ehvgate_in_edge) + length(n1ehvgate_coin_edge))/2 ]
       [ drawn_l = area(n1ehvgate)/property_ref(drawn_w) ]
nch_ehvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_dnw" ANNOTATE OD_p n1ehvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt_dnw"
       drawn_w = DFM_NUM_VAL( n1ehvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1ehvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_ehvt_dnw) n1ehvgate_mac n1ehvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_ehvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1ehvgate_mac, tndiff ) + perimeter_inside(n1ehvgate_mac, tndiff)) / 2
   L = area(n1ehvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_dnw_mac" 
n1ehvgate_mac_in_edge = n1ehvgate_mac INSIDE EDGE tndiff
n1ehvgate_mac_coin_edge = n1ehvgate_mac COIN EDGE tndiff
n1ehvgate_mac_WL = DFM PROPERTY n1ehvgate_mac n1ehvgate_mac_in_edge n1ehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1ehvgate_mac_in_edge) + length(n1ehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1ehvgate_mac)/property_ref(drawn_w) ]
nch_ehvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_dnw_mac" ANNOTATE OD_p n1ehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt_dnw"
       drawn_w = DFM_NUM_VAL( n1ehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1ehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ehvt) nehvgate_mac nehvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_ehvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nehvgate_mac, tndiff ) + perimeter_inside(nehvgate_mac, tndiff)) / 2
   L = area(nehvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_mac" 
nehvgate_mac_in_edge = nehvgate_mac INSIDE EDGE tndiff
nehvgate_mac_coin_edge = nehvgate_mac COIN EDGE tndiff
nehvgate_mac_WL = DFM PROPERTY nehvgate_mac nehvgate_mac_in_edge nehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nehvgate_mac_in_edge) + length(nehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nehvgate_mac)/property_ref(drawn_w) ]
nch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_mac" ANNOTATE OD_p nehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt"
       drawn_w = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt) nelvgate nelvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_elvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nelvgate, tndiff ) + perimeter_inside(nelvgate, tndiff)) / 2
   L = area(nelvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt" 
nelvgate_in_edge = nelvgate INSIDE EDGE tndiff
nelvgate_coin_edge = nelvgate COIN EDGE tndiff
nelvgate_WL = DFM PROPERTY nelvgate nelvgate_in_edge nelvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nelvgate_in_edge) + length(nelvgate_coin_edge))/2 ]
       [ drawn_l = area(nelvgate)/property_ref(drawn_w) ]
nch_elvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt" ANNOTATE OD_p nelvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt"
       drawn_w = DFM_NUM_VAL( nelvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nelvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_dnw) n1elvgate n1elvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_elvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1elvgate, tndiff ) + perimeter_inside(n1elvgate, tndiff)) / 2
   L = area(n1elvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt_dnw" 
n1elvgate_in_edge = n1elvgate INSIDE EDGE tndiff
n1elvgate_coin_edge = n1elvgate COIN EDGE tndiff
n1elvgate_WL = DFM PROPERTY n1elvgate n1elvgate_in_edge n1elvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1elvgate_in_edge) + length(n1elvgate_coin_edge))/2 ]
       [ drawn_l = area(n1elvgate)/property_ref(drawn_w) ]
nch_elvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt_dnw" ANNOTATE OD_p n1elvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_dnw"
       drawn_w = DFM_NUM_VAL( n1elvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1elvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_dnw) n1elvgate_mac n1elvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_elvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1elvgate_mac, tndiff ) + perimeter_inside(n1elvgate_mac, tndiff)) / 2
   L = area(n1elvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt_dnw_mac" 
n1elvgate_mac_in_edge = n1elvgate_mac INSIDE EDGE tndiff
n1elvgate_mac_coin_edge = n1elvgate_mac COIN EDGE tndiff
n1elvgate_mac_WL = DFM PROPERTY n1elvgate_mac n1elvgate_mac_in_edge n1elvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1elvgate_mac_in_edge) + length(n1elvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1elvgate_mac)/property_ref(drawn_w) ]
nch_elvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt_dnw_mac" ANNOTATE OD_p n1elvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_dnw"
       drawn_w = DFM_NUM_VAL( n1elvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1elvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt) nelvgate_mac nelvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_elvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nelvgate_mac, tndiff ) + perimeter_inside(nelvgate_mac, tndiff)) / 2
   L = area(nelvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_elvt_mac" 
nelvgate_mac_in_edge = nelvgate_mac INSIDE EDGE tndiff
nelvgate_mac_coin_edge = nelvgate_mac COIN EDGE tndiff
nelvgate_mac_WL = DFM PROPERTY nelvgate_mac nelvgate_mac_in_edge nelvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nelvgate_mac_in_edge) + length(nelvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nelvgate_mac)/property_ref(drawn_w) ]
nch_elvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_elvt_mac" ANNOTATE OD_p nelvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt"
       drawn_w = DFM_NUM_VAL( nelvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nelvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_elvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hvt) nhvgate nhvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_hvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nhvgate, tndiff ) + perimeter_inside(nhvgate, tndiff)) / 2
   L = area(nhvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt" 
nhvgate_in_edge = nhvgate INSIDE EDGE tndiff
nhvgate_coin_edge = nhvgate COIN EDGE tndiff
nhvgate_WL = DFM PROPERTY nhvgate nhvgate_in_edge nhvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nhvgate_in_edge) + length(nhvgate_coin_edge))/2 ]
       [ drawn_l = area(nhvgate)/property_ref(drawn_w) ]
nch_hvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt" ANNOTATE OD_p nhvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt"
       drawn_w = DFM_NUM_VAL( nhvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nhvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_ODN_layer
#ENDIF

DEVICE MN(nch_hvt_dnw) n1hvgate n1hvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_hvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1hvgate, tndiff ) + perimeter_inside(n1hvgate, tndiff)) / 2
   L = area(n1hvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_dnw" 
n1hvgate_in_edge = n1hvgate INSIDE EDGE tndiff
n1hvgate_coin_edge = n1hvgate COIN EDGE tndiff
n1hvgate_WL = DFM PROPERTY n1hvgate n1hvgate_in_edge n1hvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1hvgate_in_edge) + length(n1hvgate_coin_edge))/2 ]
       [ drawn_l = area(n1hvgate)/property_ref(drawn_w) ]
nch_hvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_dnw" ANNOTATE OD_p n1hvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt_dnw"
       drawn_w = DFM_NUM_VAL( n1hvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1hvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_hvt_dnw) n1hvgate_mac n1hvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_hvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1hvgate_mac, tndiff ) + perimeter_inside(n1hvgate_mac, tndiff)) / 2
   L = area(n1hvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_dnw_mac" 
n1hvgate_mac_in_edge = n1hvgate_mac INSIDE EDGE tndiff
n1hvgate_mac_coin_edge = n1hvgate_mac COIN EDGE tndiff
n1hvgate_mac_WL = DFM PROPERTY n1hvgate_mac n1hvgate_mac_in_edge n1hvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1hvgate_mac_in_edge) + length(n1hvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1hvgate_mac)/property_ref(drawn_w) ]
nch_hvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_dnw_mac" ANNOTATE OD_p n1hvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt_dnw"
       drawn_w = DFM_NUM_VAL( n1hvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1hvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hvt) nhvgate_mac nhvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_hvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nhvgate_mac, tndiff ) + perimeter_inside(nhvgate_mac, tndiff)) / 2
   L = area(nhvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_mac" 
nhvgate_mac_in_edge = nhvgate_mac INSIDE EDGE tndiff
nhvgate_mac_coin_edge = nhvgate_mac COIN EDGE tndiff
nhvgate_mac_WL = DFM PROPERTY nhvgate_mac nhvgate_mac_in_edge nhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nhvgate_mac_in_edge) + length(nhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nhvgate_mac)/property_ref(drawn_w) ]
nch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_mac" ANNOTATE OD_p nhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt"
       drawn_w = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvt) nlvgate nlvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_lvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nlvgate, tndiff ) + perimeter_inside(nlvgate, tndiff)) / 2
   L = area(nlvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt" 
nlvgate_in_edge = nlvgate INSIDE EDGE tndiff
nlvgate_coin_edge = nlvgate COIN EDGE tndiff
nlvgate_WL = DFM PROPERTY nlvgate nlvgate_in_edge nlvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlvgate_in_edge) + length(nlvgate_coin_edge))/2 ]
       [ drawn_l = area(nlvgate)/property_ref(drawn_w) ]
nch_lvt_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt" ANNOTATE OD_p nlvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt"
       drawn_w = DFM_NUM_VAL( nlvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_ODN_layer
#ENDIF

DEVICE MN(nch_lvt_dnw) n1lvgate n1lvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_lvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1lvgate, tndiff ) + perimeter_inside(n1lvgate, tndiff)) / 2
   L = area(n1lvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_dnw" 
n1lvgate_in_edge = n1lvgate INSIDE EDGE tndiff
n1lvgate_coin_edge = n1lvgate COIN EDGE tndiff
n1lvgate_WL = DFM PROPERTY n1lvgate n1lvgate_in_edge n1lvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1lvgate_in_edge) + length(n1lvgate_coin_edge))/2 ]
       [ drawn_l = area(n1lvgate)/property_ref(drawn_w) ]
nch_lvt_dnw_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_dnw" ANNOTATE OD_p n1lvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_dnw"
       drawn_w = DFM_NUM_VAL( n1lvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1lvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_dnw_ODN_layer
#ENDIF

DEVICE MN(nch_lvt_dnw) n1lvgate_mac n1lvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_lvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(n1lvgate_mac, tndiff ) + perimeter_inside(n1lvgate_mac, tndiff)) / 2
   L = area(n1lvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_dnw_mac" 
n1lvgate_mac_in_edge = n1lvgate_mac INSIDE EDGE tndiff
n1lvgate_mac_coin_edge = n1lvgate_mac COIN EDGE tndiff
n1lvgate_mac_WL = DFM PROPERTY n1lvgate_mac n1lvgate_mac_in_edge n1lvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(n1lvgate_mac_in_edge) + length(n1lvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(n1lvgate_mac)/property_ref(drawn_w) ]
nch_lvt_dnw_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_dnw_mac" ANNOTATE OD_p n1lvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_dnw"
       drawn_w = DFM_NUM_VAL( n1lvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( n1lvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvt) nlvgate_mac nlvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_lvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nlvgate_mac, tndiff ) + perimeter_inside(nlvgate_mac, tndiff)) / 2
   L = area(nlvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_mac" 
nlvgate_mac_in_edge = nlvgate_mac INSIDE EDGE tndiff
nlvgate_mac_coin_edge = nlvgate_mac COIN EDGE tndiff
nlvgate_mac_WL = DFM PROPERTY nlvgate_mac nlvgate_mac_in_edge nlvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlvgate_mac_in_edge) + length(nlvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlvgate_mac)/property_ref(drawn_w) ]
nch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_mac" ANNOTATE OD_p nlvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt"
       drawn_w = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch) ngate_mac ngate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = NMOS_TOP_EXT
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_mac, tndiff ) + perimeter_inside(ngate_mac, tndiff)) / 2
   L = area(ngate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_mac" 
ngate_mac_in_edge = ngate_mac INSIDE EDGE tndiff
ngate_mac_coin_edge = ngate_mac COIN EDGE tndiff
ngate_mac_WL = DFM PROPERTY ngate_mac ngate_mac_in_edge ngate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_mac_in_edge) + length(ngate_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_mac)/property_ref(drawn_w) ]
nch_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_mac" ANNOTATE OD_p ngate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch"
       drawn_w = DFM_NUM_VAL( ngate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na) nlgate nlgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(nlgate, tndiff ) + perimeter_inside(nlgate, tndiff)) / 2
   L = area(nlgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na" 
nlgate_in_edge = nlgate INSIDE EDGE tndiff
nlgate_coin_edge = nlgate COIN EDGE tndiff
nlgate_WL = DFM PROPERTY nlgate nlgate_in_edge nlgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlgate_in_edge) + length(nlgate_coin_edge))/2 ]
       [ drawn_l = area(nlgate)/property_ref(drawn_w) ]
nch_na_ODN_layer = DEVICE LAYER TEMPLATE "nch_na" ANNOTATE OD_p nlgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na"
       drawn_w = DFM_NUM_VAL( nlgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na_ODN_layer
#ENDIF

DEVICE MN(nch_na18) ngate_18na ngate_18na(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na18 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18na, tndiff ) + perimeter_inside(ngate_18na, tndiff)) / 2
   L = area(ngate_18na) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na18" 
ngate_18na_in_edge = ngate_18na INSIDE EDGE tndiff
ngate_18na_coin_edge = ngate_18na COIN EDGE tndiff
ngate_18na_WL = DFM PROPERTY ngate_18na ngate_18na_in_edge ngate_18na_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18na_in_edge) + length(ngate_18na_coin_edge))/2 ]
       [ drawn_l = area(ngate_18na)/property_ref(drawn_w) ]
nch_na18_ODN_layer = DEVICE LAYER TEMPLATE "nch_na18" ANNOTATE OD_p ngate_18na_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na18"
       drawn_w = DFM_NUM_VAL( ngate_18na_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18na_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na18_ODN_layer
#ENDIF

DEVICE MN(nch_na18) ngate_18na_mac ngate_18na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2
   L = area(ngate_18na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na18_mac" 
ngate_18na_mac_in_edge = ngate_18na_mac INSIDE EDGE tndiff
ngate_18na_mac_coin_edge = ngate_18na_mac COIN EDGE tndiff
ngate_18na_mac_WL = DFM PROPERTY ngate_18na_mac ngate_18na_mac_in_edge ngate_18na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18na_mac_in_edge) + length(ngate_18na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18na_mac)/property_ref(drawn_w) ]
nch_na18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na18_mac" ANNOTATE OD_p ngate_18na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na18"
       drawn_w = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25) ngate_25na ngate_25na(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25na, tndiff ) + perimeter_inside(ngate_25na, tndiff)) / 2
   L = area(ngate_25na) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25" 
ngate_25na_in_edge = ngate_25na INSIDE EDGE tndiff
ngate_25na_coin_edge = ngate_25na COIN EDGE tndiff
ngate_25na_WL = DFM PROPERTY ngate_25na ngate_25na_in_edge ngate_25na_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25na_in_edge) + length(ngate_25na_coin_edge))/2 ]
       [ drawn_l = area(ngate_25na)/property_ref(drawn_w) ]
nch_na25_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25" ANNOTATE OD_p ngate_25na_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25"
       drawn_w = DFM_NUM_VAL( ngate_25na_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25na_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25_ODN_layer
#ENDIF

DEVICE MN(nch_na25) ngate_25na_mac ngate_25na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2
   L = area(ngate_25na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25_mac" 
ngate_25na_mac_in_edge = ngate_25na_mac INSIDE EDGE tndiff
ngate_25na_mac_coin_edge = ngate_25na_mac COIN EDGE tndiff
ngate_25na_mac_WL = DFM PROPERTY ngate_25na_mac ngate_25na_mac_in_edge ngate_25na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25na_mac_in_edge) + length(ngate_25na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25na_mac)/property_ref(drawn_w) ]
nch_na25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25_mac" ANNOTATE OD_p ngate_25na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25"
       drawn_w = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25od33) ngate_25naod ngate_25naod(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25od33 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25naod, tndiff ) + perimeter_inside(ngate_25naod, tndiff)) / 2
   L = area(ngate_25naod) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25od33" 
ngate_25naod_in_edge = ngate_25naod INSIDE EDGE tndiff
ngate_25naod_coin_edge = ngate_25naod COIN EDGE tndiff
ngate_25naod_WL = DFM PROPERTY ngate_25naod ngate_25naod_in_edge ngate_25naod_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naod_in_edge) + length(ngate_25naod_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naod)/property_ref(drawn_w) ]
nch_na25od33_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25od33" ANNOTATE OD_p ngate_25naod_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25od33"
       drawn_w = DFM_NUM_VAL( ngate_25naod_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naod_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25od33_ODN_layer
#ENDIF

DEVICE MN(nch_na25od33) ngate_25naod_mac ngate_25naod_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25od33_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2
   L = area(ngate_25naod_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25od33_mac" 
ngate_25naod_mac_in_edge = ngate_25naod_mac INSIDE EDGE tndiff
ngate_25naod_mac_coin_edge = ngate_25naod_mac COIN EDGE tndiff
ngate_25naod_mac_WL = DFM PROPERTY ngate_25naod_mac ngate_25naod_mac_in_edge ngate_25naod_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naod_mac_in_edge) + length(ngate_25naod_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naod_mac)/property_ref(drawn_w) ]
nch_na25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25od33_mac" ANNOTATE OD_p ngate_25naod_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25od33"
       drawn_w = DFM_NUM_VAL( ngate_25naod_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naod_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25od33_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25ud18) ngate_25naud ngate_25naud(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25ud18 [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25naud, tndiff ) + perimeter_inside(ngate_25naud, tndiff)) / 2
   L = area(ngate_25naud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25ud18" 
ngate_25naud_in_edge = ngate_25naud INSIDE EDGE tndiff
ngate_25naud_coin_edge = ngate_25naud COIN EDGE tndiff
ngate_25naud_WL = DFM PROPERTY ngate_25naud ngate_25naud_in_edge ngate_25naud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naud_in_edge) + length(ngate_25naud_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naud)/property_ref(drawn_w) ]
nch_na25ud18_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25ud18" ANNOTATE OD_p ngate_25naud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25naud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25ud18_ODN_layer
#ENDIF

DEVICE MN(nch_na25ud18) ngate_25naud_mac ngate_25naud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na25ud18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2
   L = area(ngate_25naud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25ud18_mac" 
ngate_25naud_mac_in_edge = ngate_25naud_mac INSIDE EDGE tndiff
ngate_25naud_mac_coin_edge = ngate_25naud_mac COIN EDGE tndiff
ngate_25naud_mac_WL = DFM PROPERTY ngate_25naud_mac ngate_25naud_mac_in_edge ngate_25naud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25naud_mac_in_edge) + length(ngate_25naud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25naud_mac)/property_ref(drawn_w) ]
nch_na25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25ud18_mac" ANNOTATE OD_p ngate_25naud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25ud18"
       drawn_w = DFM_NUM_VAL( ngate_25naud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25naud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25ud18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na) nlgate_mac nlgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_na_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W = (perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2
   L = area(nlgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na_mac" 
nlgate_mac_in_edge = nlgate_mac INSIDE EDGE tndiff
nlgate_mac_coin_edge = nlgate_mac COIN EDGE tndiff
nlgate_mac_WL = DFM PROPERTY nlgate_mac nlgate_mac_in_edge nlgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlgate_mac_in_edge) + length(nlgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlgate_mac)/property_ref(drawn_w) ]
nch_na_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na_mac" ANNOTATE OD_p nlgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na"
       drawn_w = DFM_NUM_VAL( nlgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na_mac_ODN_layer
#ENDIF

DEVICE MN(nch_naavt) nlavgate nlavgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_naavt [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(nlavgate, tndiff ) + perimeter_inside(nlavgate, tndiff)) / 2
   L = area(nlavgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_naavt" 
nlavgate_in_edge = nlavgate INSIDE EDGE tndiff
nlavgate_coin_edge = nlavgate COIN EDGE tndiff
nlavgate_WL = DFM PROPERTY nlavgate nlavgate_in_edge nlavgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlavgate_in_edge) + length(nlavgate_coin_edge))/2 ]
       [ drawn_l = area(nlavgate)/property_ref(drawn_w) ]
nch_naavt_ODN_layer = DEVICE LAYER TEMPLATE "nch_naavt" ANNOTATE OD_p nlavgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_naavt"
       drawn_w = DFM_NUM_VAL( nlavgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlavgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_naavt_ODN_layer
#ENDIF

DEVICE MN(nch_naavt) nlavgate_mac nlavgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> netlist model nch_naavt_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   SCALE = PRESCALE
   W = (perimeter_coincide(nlavgate_mac, tndiff ) + perimeter_inside(nlavgate_mac, tndiff)) / 2
   L = area(nlavgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_naavt_mac" 
nlavgate_mac_in_edge = nlavgate_mac INSIDE EDGE tndiff
nlavgate_mac_coin_edge = nlavgate_mac COIN EDGE tndiff
nlavgate_mac_WL = DFM PROPERTY nlavgate_mac nlavgate_mac_in_edge nlavgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlavgate_mac_in_edge) + length(nlavgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlavgate_mac)/property_ref(drawn_w) ]
nch_naavt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_naavt_mac" ANNOTATE OD_p nlavgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_naavt"
       drawn_w = DFM_NUM_VAL( nlavgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlavgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_naavt_mac_ODN_layer
#ENDIF

DEVICE MN(nchpd_dpncisr) ngate_sdpncipd ngate_sdpncipd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_dpncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sdpncipd, tndiff ) + perimeter_inside(ngate_sdpncipd, tndiff)) / 2
   L = area(ngate_sdpncipd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ncisr) ngate_sncipd ngate_sncipd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sncipd, tndiff ) + perimeter_inside(ngate_sncipd, tndiff)) / 2
   L = area(ngate_sncipd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_sr) ngate_spd ngate_spd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2
   L = area(ngate_spd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ull10ttprpsr) ngate_spd_ull10ttprp ngate_spd_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ull10ttprpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spd_ull10ttprp, tndiff ) + perimeter_inside(ngate_spd_ull10ttprp, tndiff)) / 2
   L = area(ngate_spd_ull10ttprp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ull10ttpsr) ngate_spd_ull10ttp ngate_spd_ull10ttp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ull10ttpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spd_ull10ttp, tndiff ) + perimeter_inside(ngate_spd_ull10ttp, tndiff)) / 2
   L = area(ngate_spd_ull10ttp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ullhcsr) ngate_sullhcpd ngate_sullhcpd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ullhcsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sullhcpd, tndiff ) + perimeter_inside(ngate_sullhcpd, tndiff)) / 2
   L = area(ngate_sullhcpd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ullsr) ngate_spd_ull ngate_spd_ull(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spd_ull, tndiff ) + perimeter_inside(ngate_spd_ull, tndiff)) / 2
   L = area(ngate_spd_ull) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_dpncisr) ngate_sdpncipg ngate_sdpncipg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_dpncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sdpncipg, tndiff ) + perimeter_inside(ngate_sdpncipg, tndiff)) / 2
   L = area(ngate_sdpncipg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ncisr) ngate_sncipg ngate_sncipg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sncipg, tndiff ) + perimeter_inside(ngate_sncipg, tndiff)) / 2
   L = area(ngate_sncipg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_sr) ngate_spg ngate_spg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2
   L = area(ngate_spg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ull10ttprpsr) ngate_spg_ull10ttprp ngate_spg_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ull10ttprpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spg_ull10ttprp, tndiff ) + perimeter_inside(ngate_spg_ull10ttprp, tndiff)) / 2
   L = area(ngate_spg_ull10ttprp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ull10ttpsr) ngate_spg_ull10ttp ngate_spg_ull10ttp(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ull10ttpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spg_ull10ttp, tndiff ) + perimeter_inside(ngate_spg_ull10ttp, tndiff)) / 2
   L = area(ngate_spg_ull10ttp) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ullhcsr) ngate_sullhcpg ngate_sullhcpg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ullhcsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sullhcpg, tndiff ) + perimeter_inside(ngate_sullhcpg, tndiff)) / 2
   L = area(ngate_sullhcpg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ullsr) ngate_spg_ull ngate_spg_ull(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spg_ull, tndiff ) + perimeter_inside(ngate_spg_ull, tndiff)) / 2
   L = area(ngate_spg_ull) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pch) pgate pgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate, tpdiff ) + perimeter_inside(pgate, tpdiff)) / 2
   L = area(pgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch" 
pgate_in_edge = pgate INSIDE EDGE tpdiff
pgate_coin_edge = pgate COIN EDGE tpdiff
pgate_WL = DFM PROPERTY pgate pgate_in_edge pgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_in_edge) + length(pgate_coin_edge))/2 ]
       [ drawn_l = area(pgate)/property_ref(drawn_w) ]
pch_ODN_layer = DEVICE LAYER TEMPLATE "pch" ANNOTATE OD_p pgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch"
       drawn_w = DFM_NUM_VAL( pgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ODN_layer
#ENDIF

DEVICE MP(pch_18) pgate_18 pgate_18(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18, tpdiff ) + perimeter_inside(pgate_18, tpdiff)) / 2
   L = area(pgate_18) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18" 
pgate_18_in_edge = pgate_18 INSIDE EDGE tpdiff
pgate_18_coin_edge = pgate_18 COIN EDGE tpdiff
pgate_18_WL = DFM PROPERTY pgate_18 pgate_18_in_edge pgate_18_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18_in_edge) + length(pgate_18_coin_edge))/2 ]
       [ drawn_l = area(pgate_18)/property_ref(drawn_w) ]
pch_18_ODN_layer = DEVICE LAYER TEMPLATE "pch_18" ANNOTATE OD_p pgate_18_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18"
       drawn_w = DFM_NUM_VAL( pgate_18_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18_ODN_layer
#ENDIF

DEVICE MP(pch_18) pgate_18_mac pgate_18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2
   L = area(pgate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18_mac" 
pgate_18_mac_in_edge = pgate_18_mac INSIDE EDGE tpdiff
pgate_18_mac_coin_edge = pgate_18_mac COIN EDGE tpdiff
pgate_18_mac_WL = DFM PROPERTY pgate_18_mac pgate_18_mac_in_edge pgate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18_mac_in_edge) + length(pgate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18_mac)/property_ref(drawn_w) ]
pch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18_mac" ANNOTATE OD_p pgate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18"
       drawn_w = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_18ud15) pgate_18ud pgate_18ud(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_18ud15 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18ud, tpdiff ) + perimeter_inside(pgate_18ud, tpdiff)) / 2
   L = area(pgate_18ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud15" 
pgate_18ud_in_edge = pgate_18ud INSIDE EDGE tpdiff
pgate_18ud_coin_edge = pgate_18ud COIN EDGE tpdiff
pgate_18ud_WL = DFM PROPERTY pgate_18ud pgate_18ud_in_edge pgate_18ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud_in_edge) + length(pgate_18ud_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud)/property_ref(drawn_w) ]
pch_18ud15_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud15" ANNOTATE OD_p pgate_18ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud15"
       drawn_w = DFM_NUM_VAL( pgate_18ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud15_ODN_layer
#ENDIF

DEVICE MP(pch_18ud15) pgate_18ud_mac pgate_18ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18ud_mac, tpdiff ) + perimeter_inside(pgate_18ud_mac, tpdiff)) / 2
   L = area(pgate_18ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud15_mac" 
pgate_18ud_mac_in_edge = pgate_18ud_mac INSIDE EDGE tpdiff
pgate_18ud_mac_coin_edge = pgate_18ud_mac COIN EDGE tpdiff
pgate_18ud_mac_WL = DFM PROPERTY pgate_18ud_mac pgate_18ud_mac_in_edge pgate_18ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud_mac_in_edge) + length(pgate_18ud_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud_mac)/property_ref(drawn_w) ]
pch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud15_mac" ANNOTATE OD_p pgate_18ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud15"
       drawn_w = DFM_NUM_VAL( pgate_18ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25) pgate_25 pgate_25(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_25 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25, tpdiff ) + perimeter_inside(pgate_25, tpdiff)) / 2
   L = area(pgate_25) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25" 
pgate_25_in_edge = pgate_25 INSIDE EDGE tpdiff
pgate_25_coin_edge = pgate_25 COIN EDGE tpdiff
pgate_25_WL = DFM PROPERTY pgate_25 pgate_25_in_edge pgate_25_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25_in_edge) + length(pgate_25_coin_edge))/2 ]
       [ drawn_l = area(pgate_25)/property_ref(drawn_w) ]
pch_25_ODN_layer = DEVICE LAYER TEMPLATE "pch_25" ANNOTATE OD_p pgate_25_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25"
       drawn_w = DFM_NUM_VAL( pgate_25_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25_ODN_layer
#ENDIF

DEVICE MP(pch_25) pgate_25_mac pgate_25_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2
   L = area(pgate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25_mac" 
pgate_25_mac_in_edge = pgate_25_mac INSIDE EDGE tpdiff
pgate_25_mac_coin_edge = pgate_25_mac COIN EDGE tpdiff
pgate_25_mac_WL = DFM PROPERTY pgate_25_mac pgate_25_mac_in_edge pgate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25_mac_in_edge) + length(pgate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25_mac)/property_ref(drawn_w) ]
pch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25_mac" ANNOTATE OD_p pgate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25"
       drawn_w = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25od33) pgate_25od pgate_25od(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_25od33 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25od, tpdiff ) + perimeter_inside(pgate_25od, tpdiff)) / 2
   L = area(pgate_25od) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25od33" 
pgate_25od_in_edge = pgate_25od INSIDE EDGE tpdiff
pgate_25od_coin_edge = pgate_25od COIN EDGE tpdiff
pgate_25od_WL = DFM PROPERTY pgate_25od pgate_25od_in_edge pgate_25od_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25od_in_edge) + length(pgate_25od_coin_edge))/2 ]
       [ drawn_l = area(pgate_25od)/property_ref(drawn_w) ]
pch_25od33_ODN_layer = DEVICE LAYER TEMPLATE "pch_25od33" ANNOTATE OD_p pgate_25od_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25od33"
       drawn_w = DFM_NUM_VAL( pgate_25od_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25od_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25od33_ODN_layer
#ENDIF

DEVICE MP(pch_25od33) pgate_25od_mac pgate_25od_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2
   L = area(pgate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25od33_mac" 
pgate_25od_mac_in_edge = pgate_25od_mac INSIDE EDGE tpdiff
pgate_25od_mac_coin_edge = pgate_25od_mac COIN EDGE tpdiff
pgate_25od_mac_WL = DFM PROPERTY pgate_25od_mac pgate_25od_mac_in_edge pgate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25od_mac_in_edge) + length(pgate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25od_mac)/property_ref(drawn_w) ]
pch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25od33_mac" ANNOTATE OD_p pgate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25od33"
       drawn_w = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25od33_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25ud18) pgate_25ud pgate_25ud(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_25ud18 [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25ud, tpdiff ) + perimeter_inside(pgate_25ud, tpdiff)) / 2
   L = area(pgate_25ud) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25ud18" 
pgate_25ud_in_edge = pgate_25ud INSIDE EDGE tpdiff
pgate_25ud_coin_edge = pgate_25ud COIN EDGE tpdiff
pgate_25ud_WL = DFM PROPERTY pgate_25ud pgate_25ud_in_edge pgate_25ud_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25ud_in_edge) + length(pgate_25ud_coin_edge))/2 ]
       [ drawn_l = area(pgate_25ud)/property_ref(drawn_w) ]
pch_25ud18_ODN_layer = DEVICE LAYER TEMPLATE "pch_25ud18" ANNOTATE OD_p pgate_25ud_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25ud18"
       drawn_w = DFM_NUM_VAL( pgate_25ud_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25ud_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25ud18_ODN_layer
#ENDIF

DEVICE MP(pch_25ud18) pgate_25ud_mac pgate_25ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2
   L = area(pgate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25ud18_mac" 
pgate_25ud_mac_in_edge = pgate_25ud_mac INSIDE EDGE tpdiff
pgate_25ud_mac_coin_edge = pgate_25ud_mac COIN EDGE tpdiff
pgate_25ud_mac_WL = DFM PROPERTY pgate_25ud_mac pgate_25ud_mac_in_edge pgate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25ud_mac_in_edge) + length(pgate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25ud_mac)/property_ref(drawn_w) ]
pch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25ud18_mac" ANNOTATE OD_p pgate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25ud18"
       drawn_w = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_avt) pgate_avt pgate_avt(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_avt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_avt, tpdiff ) + perimeter_inside(pgate_avt, tpdiff)) / 2
   L = area(pgate_avt) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_avt" 
pgate_avt_in_edge = pgate_avt INSIDE EDGE tpdiff
pgate_avt_coin_edge = pgate_avt COIN EDGE tpdiff
pgate_avt_WL = DFM PROPERTY pgate_avt pgate_avt_in_edge pgate_avt_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_avt_in_edge) + length(pgate_avt_coin_edge))/2 ]
       [ drawn_l = area(pgate_avt)/property_ref(drawn_w) ]
pch_avt_ODN_layer = DEVICE LAYER TEMPLATE "pch_avt" ANNOTATE OD_p pgate_avt_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_avt"
       drawn_w = DFM_NUM_VAL( pgate_avt_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_avt_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_avt_ODN_layer
#ENDIF

DEVICE MP(pch_avt) pgate_avt_mac pgate_avt_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_avt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_avt_mac, tpdiff ) + perimeter_inside(pgate_avt_mac, tpdiff)) / 2
   L = area(pgate_avt_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_avt_mac" 
pgate_avt_mac_in_edge = pgate_avt_mac INSIDE EDGE tpdiff
pgate_avt_mac_coin_edge = pgate_avt_mac COIN EDGE tpdiff
pgate_avt_mac_WL = DFM PROPERTY pgate_avt_mac pgate_avt_mac_in_edge pgate_avt_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_avt_mac_in_edge) + length(pgate_avt_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_avt_mac)/property_ref(drawn_w) ]
pch_avt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_avt_mac" ANNOTATE OD_p pgate_avt_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_avt"
       drawn_w = DFM_NUM_VAL( pgate_avt_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_avt_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_avt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_ehvt) pehvgate pehvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_ehvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pehvgate, tpdiff ) + perimeter_inside(pehvgate, tpdiff)) / 2
   L = area(pehvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ehvt" 
pehvgate_in_edge = pehvgate INSIDE EDGE tpdiff
pehvgate_coin_edge = pehvgate COIN EDGE tpdiff
pehvgate_WL = DFM PROPERTY pehvgate pehvgate_in_edge pehvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pehvgate_in_edge) + length(pehvgate_coin_edge))/2 ]
       [ drawn_l = area(pehvgate)/property_ref(drawn_w) ]
pch_ehvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_ehvt" ANNOTATE OD_p pehvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ehvt"
       drawn_w = DFM_NUM_VAL( pehvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pehvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ehvt_ODN_layer
#ENDIF

DEVICE MP(pch_ehvt) pehvgate_mac pehvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_ehvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pehvgate_mac, tpdiff ) + perimeter_inside(pehvgate_mac, tpdiff)) / 2
   L = area(pehvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ehvt_mac" 
pehvgate_mac_in_edge = pehvgate_mac INSIDE EDGE tpdiff
pehvgate_mac_coin_edge = pehvgate_mac COIN EDGE tpdiff
pehvgate_mac_WL = DFM PROPERTY pehvgate_mac pehvgate_mac_in_edge pehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pehvgate_mac_in_edge) + length(pehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pehvgate_mac)/property_ref(drawn_w) ]
pch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_ehvt_mac" ANNOTATE OD_p pehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ehvt"
       drawn_w = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ehvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_elvt) pelvgate pelvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_elvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pelvgate, tpdiff ) + perimeter_inside(pelvgate, tpdiff)) / 2
   L = area(pelvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_elvt" 
pelvgate_in_edge = pelvgate INSIDE EDGE tpdiff
pelvgate_coin_edge = pelvgate COIN EDGE tpdiff
pelvgate_WL = DFM PROPERTY pelvgate pelvgate_in_edge pelvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pelvgate_in_edge) + length(pelvgate_coin_edge))/2 ]
       [ drawn_l = area(pelvgate)/property_ref(drawn_w) ]
pch_elvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_elvt" ANNOTATE OD_p pelvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_elvt"
       drawn_w = DFM_NUM_VAL( pelvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pelvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_elvt_ODN_layer
#ENDIF

DEVICE MP(pch_elvt) pelvgate_mac pelvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_elvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pelvgate_mac, tpdiff ) + perimeter_inside(pelvgate_mac, tpdiff)) / 2
   L = area(pelvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_elvt_mac" 
pelvgate_mac_in_edge = pelvgate_mac INSIDE EDGE tpdiff
pelvgate_mac_coin_edge = pelvgate_mac COIN EDGE tpdiff
pelvgate_mac_WL = DFM PROPERTY pelvgate_mac pelvgate_mac_in_edge pelvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pelvgate_mac_in_edge) + length(pelvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pelvgate_mac)/property_ref(drawn_w) ]
pch_elvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_elvt_mac" ANNOTATE OD_p pelvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_elvt"
       drawn_w = DFM_NUM_VAL( pelvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pelvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_elvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_hvt) phvgate phvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_hvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(phvgate, tpdiff ) + perimeter_inside(phvgate, tpdiff)) / 2
   L = area(phvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hvt" 
phvgate_in_edge = phvgate INSIDE EDGE tpdiff
phvgate_coin_edge = phvgate COIN EDGE tpdiff
phvgate_WL = DFM PROPERTY phvgate phvgate_in_edge phvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(phvgate_in_edge) + length(phvgate_coin_edge))/2 ]
       [ drawn_l = area(phvgate)/property_ref(drawn_w) ]
pch_hvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_hvt" ANNOTATE OD_p phvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hvt"
       drawn_w = DFM_NUM_VAL( phvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( phvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hvt_ODN_layer
#ENDIF

DEVICE MP(pch_hvt) phvgate_mac phvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_hvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(phvgate_mac, tpdiff ) + perimeter_inside(phvgate_mac, tpdiff)) / 2
   L = area(phvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hvt_mac" 
phvgate_mac_in_edge = phvgate_mac INSIDE EDGE tpdiff
phvgate_mac_coin_edge = phvgate_mac COIN EDGE tpdiff
phvgate_mac_WL = DFM PROPERTY phvgate_mac phvgate_mac_in_edge phvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(phvgate_mac_in_edge) + length(phvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(phvgate_mac)/property_ref(drawn_w) ]
pch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_hvt_mac" ANNOTATE OD_p phvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hvt"
       drawn_w = DFM_NUM_VAL( phvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( phvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_lvt) plvgate plvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_lvt [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(plvgate, tpdiff ) + perimeter_inside(plvgate, tpdiff)) / 2
   L = area(plvgate) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_lvt" 
plvgate_in_edge = plvgate INSIDE EDGE tpdiff
plvgate_coin_edge = plvgate COIN EDGE tpdiff
plvgate_WL = DFM PROPERTY plvgate plvgate_in_edge plvgate_coin_edge MULTI OVERLAP
       [ drawn_w = (length(plvgate_in_edge) + length(plvgate_coin_edge))/2 ]
       [ drawn_l = area(plvgate)/property_ref(drawn_w) ]
pch_lvt_ODN_layer = DEVICE LAYER TEMPLATE "pch_lvt" ANNOTATE OD_p plvgate_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt"
       drawn_w = DFM_NUM_VAL( plvgate_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( plvgate_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_lvt_ODN_layer
#ENDIF

DEVICE MP(pch_lvt) plvgate_mac plvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_lvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(plvgate_mac, tpdiff ) + perimeter_inside(plvgate_mac, tpdiff)) / 2
   L = area(plvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_lvt_mac" 
plvgate_mac_in_edge = plvgate_mac INSIDE EDGE tpdiff
plvgate_mac_coin_edge = plvgate_mac COIN EDGE tpdiff
plvgate_mac_WL = DFM PROPERTY plvgate_mac plvgate_mac_in_edge plvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(plvgate_mac_in_edge) + length(plvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(plvgate_mac)/property_ref(drawn_w) ]
pch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_lvt_mac" ANNOTATE OD_p plvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt"
       drawn_w = DFM_NUM_VAL( plvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( plvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_lvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch) pgate_mac pgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = PMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_mac, tpdiff ) + perimeter_inside(pgate_mac, tpdiff)) / 2
   L = area(pgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_mac" 
pgate_mac_in_edge = pgate_mac INSIDE EDGE tpdiff
pgate_mac_coin_edge = pgate_mac COIN EDGE tpdiff
pgate_mac_WL = DFM PROPERTY pgate_mac pgate_mac_in_edge pgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_mac_in_edge) + length(pgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_mac)/property_ref(drawn_w) ]
pch_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_mac" ANNOTATE OD_p pgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch"
       drawn_w = DFM_NUM_VAL( pgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_mac_ODN_layer
#ENDIF

DEVICE MP(pchpu_dpncisr) pgate_sdpnci pgate_sdpnci(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_dpncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_sdpnci, tpdiff ) + perimeter_inside(pgate_sdpnci, tpdiff)) / 2
   L = area(pgate_sdpnci) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ncisr) pgate_snci pgate_snci(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ncisr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_snci, tpdiff ) + perimeter_inside(pgate_snci, tpdiff)) / 2
   L = area(pgate_snci) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_sr) pgate_s pgate_s(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2
   L = area(pgate_s) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ull10ttpsr) pgate_s_ull10ttp pgate_s_ull10ttp(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ull10ttpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_s_ull10ttp, tpdiff ) + perimeter_inside(pgate_s_ull10ttp, tpdiff)) / 2
   L = area(pgate_s_ull10ttp) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ullhcsr) pgate_sullhc pgate_sullhc(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ullhcsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_sullhc, tpdiff ) + perimeter_inside(pgate_sullhc, tpdiff)) / 2
   L = area(pgate_sullhc) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ullsr) pgate_s_ull pgate_s_ull(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_s_ull, tpdiff ) + perimeter_inside(pgate_s_ull, tpdiff)) / 2
   L = area(pgate_s_ull) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]


#ENDIF
#ELSE

#IFDEF extract_as_ad
DEVICE LDDP(pch_hv25_spw)  pgate_hv25 d_tpdiff_hv(D) pgate_hv25(G) s_tpdiff_hv(S) nxwell(B) <pthin> [
   property W,L,AS,AD
   W  = (perimeter_coincide(pgate_hv25, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25, d_tpdiff_hv)) / 2
   L  = area(pgate_hv25) / W
   AS = area(S) * W /perimeter_inside(S,pthin)
   AD = area(D) * W /perimeter_inside(D,pthin)
]
DEVICE LDDP(pch_hv25_spw)  pgate_hv25_mac d_tpdiff_hv(D) pgate_hv25_mac(G) s_tpdiff_hv(S) nxwell(B) <pthin> [
   property W,L,AS,AD
   W  = (perimeter_coincide(pgate_hv25_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25_mac, d_tpdiff_hv)) / 2
   L  = area(pgate_hv25_mac) / W
   AS = area(S) * W /perimeter_inside(S,pthin)
   AD = area(D) * W /perimeter_inside(D,pthin)
]
DEVICE LDDN(nch_hv25_snw)  ngate_hv25 d_tndiff_hv(D) ngate_hv25(G) s_tndiff_hv(S) psub(B) <nthin1> [
   property W,L,AS,AD
   W  = (perimeter_coincide(ngate_hv25, s_tndiff_hv ) + perimeter_coincide(ngate_hv25, d_tndiff_hv)) / 2
   L  = area(ngate_hv25) / W
   AS = area(S) * W /perimeter_inside(S,nthin1)
   AD = area(D) * W /perimeter_inside(D,nthin1)
]
DEVICE LDDN(nch_hv25_snw)  ngate_hv25_mac d_tndiff_hv(D) ngate_hv25_mac(G) s_tndiff_hv(S) psub(B) <nthin1> [
   property W,L,AS,AD
   W  = (perimeter_coincide(ngate_hv25_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv25_mac, d_tndiff_hv)) / 2
   L  = area(ngate_hv25_mac) / W
   AS = area(S) * W /perimeter_inside(S,nthin1)
   AD = area(D) * W /perimeter_inside(D,nthin1)
]
DEVICE MN(nch) ngate ngate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate, tndiff ) + perimeter_inside(ngate, tndiff)) / 2
   L=area(ngate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18) ngate_18 ngate_18(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18, tndiff ) + perimeter_inside(ngate_18, tndiff)) / 2
   L=area(ngate_18) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18_dnw) dngate_18 dngate_18(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_18, tndiff ) + perimeter_inside(dngate_18, tndiff)) / 2
   L=area(dngate_18) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18_dnw) dngate_18_mac dngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_18_mac, tndiff ) + perimeter_inside(dngate_18_mac, tndiff)) / 2
   L=area(dngate_18_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18) ngate_18_mac ngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2
   L=area(ngate_18_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18ud15) ngate_18ud ngate_18ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18ud, tndiff ) + perimeter_inside(ngate_18ud, tndiff)) / 2
   L=area(ngate_18ud) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18ud15_dnw) dngate_18ud dngate_18ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_18ud, tndiff ) + perimeter_inside(dngate_18ud, tndiff)) / 2
   L=area(dngate_18ud) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18ud15_dnw) dngate_18ud_mac dngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_18ud_mac, tndiff ) + perimeter_inside(dngate_18ud_mac, tndiff)) / 2
   L=area(dngate_18ud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18ud15) ngate_18ud_mac ngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18ud_mac, tndiff ) + perimeter_inside(ngate_18ud_mac, tndiff)) / 2
   L=area(ngate_18ud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25) ngate_25 ngate_25(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25, tndiff ) + perimeter_inside(ngate_25, tndiff)) / 2
   L=area(ngate_25) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25_dnw) dngate_25 dngate_25(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25, tndiff ) + perimeter_inside(dngate_25, tndiff)) / 2
   L=area(dngate_25) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25_dnw) dngate_25_mac dngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25_mac, tndiff ) + perimeter_inside(dngate_25_mac, tndiff)) / 2
   L=area(dngate_25_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25_fgd_dnw_mac) dngate_25_fgd_mac dngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25_fgd_mac, tndiff ) + perimeter_inside(dngate_25_fgd_mac, tndiff)) / 2
   L=area(dngate_25_fgd_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25_fgd_mac) ngate_25_fgd_mac ngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25_fgd_mac, tndiff ) + perimeter_inside(ngate_25_fgd_mac, tndiff)) / 2
   L=area(ngate_25_fgd_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25) ngate_25_mac ngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2
   L=area(ngate_25_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25_ngd_dnw_mac) dngate_25_ngd_mac dngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25_ngd_mac, tndiff ) + perimeter_inside(dngate_25_ngd_mac, tndiff)) / 2
   L=area(dngate_25_ngd_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25_ngd_mac) ngate_25_ngd_mac ngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25_ngd_mac, tndiff ) + perimeter_inside(ngate_25_ngd_mac, tndiff)) / 2
   L=area(ngate_25_ngd_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25od33) ngate_25od ngate_25od(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25od, tndiff ) + perimeter_inside(ngate_25od, tndiff)) / 2
   L=area(ngate_25od) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25od33_dnw) dngate_25od dngate_25od(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25od, tndiff ) + perimeter_inside(dngate_25od, tndiff)) / 2
   L=area(dngate_25od) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25od33_dnw) dngate_25od_mac dngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25od_mac, tndiff ) + perimeter_inside(dngate_25od_mac, tndiff)) / 2
   L=area(dngate_25od_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25od33) ngate_25od_mac ngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2
   L=area(ngate_25od_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25ud18) ngate_25ud ngate_25ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25ud, tndiff ) + perimeter_inside(ngate_25ud, tndiff)) / 2
   L=area(ngate_25ud) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25ud18_dnw) dngate_25ud dngate_25ud(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25ud, tndiff ) + perimeter_inside(dngate_25ud, tndiff)) / 2
   L=area(dngate_25ud) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25ud18_dnw) dngate_25ud_mac dngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_25ud_mac, tndiff ) + perimeter_inside(dngate_25ud_mac, tndiff)) / 2
   L=area(dngate_25ud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25ud18) ngate_25ud_mac ngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2
   L=area(ngate_25ud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ana25_dnw_mac) dngate_ana25_mac dngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(dngate_ana25_mac, tndiff ) + perimeter_inside(dngate_ana25_mac, tndiff)) / 2
   L=area(dngate_ana25_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_ana25_mac) ngate_ana25_mac ngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_ana25_mac, tndiff ) + perimeter_inside(ngate_ana25_mac, tndiff)) / 2
   L=area(ngate_ana25_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_avt) ngate_avt ngate_avt(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_avt, tndiff ) + perimeter_inside(ngate_avt, tndiff)) / 2
   L=area(ngate_avt) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_avt_dnw) nrgate_avt nrgate_avt(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nrgate_avt, tndiff ) + perimeter_inside(nrgate_avt, tndiff)) / 2
   L=area(nrgate_avt) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_avt_dnw) nrgate_avt_mac nrgate_avt_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nrgate_avt_mac, tndiff ) + perimeter_inside(nrgate_avt_mac, tndiff)) / 2
   L=area(nrgate_avt_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_avt) ngate_avt_mac ngate_avt_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_avt_mac, tndiff ) + perimeter_inside(ngate_avt_mac, tndiff)) / 2
   L=area(ngate_avt_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_dnw) nrgate nrgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nrgate, tndiff ) + perimeter_inside(nrgate, tndiff)) / 2
   L=area(nrgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_dnw) nrgate_mac nrgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nrgate_mac, tndiff ) + perimeter_inside(nrgate_mac, tndiff)) / 2
   L=area(nrgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ehvt) nehvgate nehvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nehvgate, tndiff ) + perimeter_inside(nehvgate, tndiff)) / 2
   L=area(nehvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ehvt_dnw) n1ehvgate n1ehvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1ehvgate, tndiff ) + perimeter_inside(n1ehvgate, tndiff)) / 2
   L=area(n1ehvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ehvt_dnw) n1ehvgate_mac n1ehvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1ehvgate_mac, tndiff ) + perimeter_inside(n1ehvgate_mac, tndiff)) / 2
   L=area(n1ehvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ehvt) nehvgate_mac nehvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nehvgate_mac, tndiff ) + perimeter_inside(nehvgate_mac, tndiff)) / 2
   L=area(nehvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_elvt) nelvgate nelvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nelvgate, tndiff ) + perimeter_inside(nelvgate, tndiff)) / 2
   L=area(nelvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_elvt_dnw) n1elvgate n1elvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1elvgate, tndiff ) + perimeter_inside(n1elvgate, tndiff)) / 2
   L=area(n1elvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_elvt_dnw) n1elvgate_mac n1elvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1elvgate_mac, tndiff ) + perimeter_inside(n1elvgate_mac, tndiff)) / 2
   L=area(n1elvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_elvt) nelvgate_mac nelvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nelvgate_mac, tndiff ) + perimeter_inside(nelvgate_mac, tndiff)) / 2
   L=area(nelvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvt) nhvgate nhvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nhvgate, tndiff ) + perimeter_inside(nhvgate, tndiff)) / 2
   L=area(nhvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvt_dnw) n1hvgate n1hvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1hvgate, tndiff ) + perimeter_inside(n1hvgate, tndiff)) / 2
   L=area(n1hvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvt_dnw) n1hvgate_mac n1hvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1hvgate_mac, tndiff ) + perimeter_inside(n1hvgate_mac, tndiff)) / 2
   L=area(n1hvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvt) nhvgate_mac nhvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nhvgate_mac, tndiff ) + perimeter_inside(nhvgate_mac, tndiff)) / 2
   L=area(nhvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvt) nlvgate nlvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlvgate, tndiff ) + perimeter_inside(nlvgate, tndiff)) / 2
   L=area(nlvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvt_dnw) n1lvgate n1lvgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1lvgate, tndiff ) + perimeter_inside(n1lvgate, tndiff)) / 2
   L=area(n1lvgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvt_dnw) n1lvgate_mac n1lvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(n1lvgate_mac, tndiff ) + perimeter_inside(n1lvgate_mac, tndiff)) / 2
   L=area(n1lvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvt) nlvgate_mac nlvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlvgate_mac, tndiff ) + perimeter_inside(nlvgate_mac, tndiff)) / 2
   L=area(nlvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch) ngate_mac ngate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_mac, tndiff ) + perimeter_inside(ngate_mac, tndiff)) / 2
   L=area(ngate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na) nlgate nlgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlgate, tndiff ) + perimeter_inside(nlgate, tndiff)) / 2
   L=area(nlgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na18) ngate_18na ngate_18na(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18na, tndiff ) + perimeter_inside(ngate_18na, tndiff)) / 2
   L=area(ngate_18na) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na18) ngate_18na_mac ngate_18na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2
   L=area(ngate_18na_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25) ngate_25na ngate_25na(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25na, tndiff ) + perimeter_inside(ngate_25na, tndiff)) / 2
   L=area(ngate_25na) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25) ngate_25na_mac ngate_25na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2
   L=area(ngate_25na_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25od33) ngate_25naod ngate_25naod(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25naod, tndiff ) + perimeter_inside(ngate_25naod, tndiff)) / 2
   L=area(ngate_25naod) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25od33) ngate_25naod_mac ngate_25naod_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2
   L=area(ngate_25naod_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25ud18) ngate_25naud ngate_25naud(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25naud, tndiff ) + perimeter_inside(ngate_25naud, tndiff)) / 2
   L=area(ngate_25naud) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25ud18) ngate_25naud_mac ngate_25naud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2
   L=area(ngate_25naud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na) nlgate_mac nlgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2
   L=area(nlgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_naavt) nlavgate nlavgate(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlavgate, tndiff ) + perimeter_inside(nlavgate, tndiff)) / 2
   L=area(nlavgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_naavt) nlavgate_mac nlavgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlavgate_mac, tndiff ) + perimeter_inside(nlavgate_mac, tndiff)) / 2
   L=area(nlavgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_dpncisr) ngate_sdpncipd ngate_sdpncipd(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sdpncipd, tndiff ) + perimeter_inside(ngate_sdpncipd, tndiff)) / 2
   L=area(ngate_sdpncipd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ncisr) ngate_sncipd ngate_sncipd(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sncipd, tndiff ) + perimeter_inside(ngate_sncipd, tndiff)) / 2
   L=area(ngate_sncipd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_sr) ngate_spd ngate_spd(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2
   L=area(ngate_spd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ull10ttprpsr) ngate_spd_ull10ttprp ngate_spd_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spd_ull10ttprp, tndiff ) + perimeter_inside(ngate_spd_ull10ttprp, tndiff)) / 2
   L=area(ngate_spd_ull10ttprp) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ull10ttpsr) ngate_spd_ull10ttp ngate_spd_ull10ttp(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spd_ull10ttp, tndiff ) + perimeter_inside(ngate_spd_ull10ttp, tndiff)) / 2
   L=area(ngate_spd_ull10ttp) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ullhcsr) ngate_sullhcpd ngate_sullhcpd(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sullhcpd, tndiff ) + perimeter_inside(ngate_sullhcpd, tndiff)) / 2
   L=area(ngate_sullhcpd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ullsr) ngate_spd_ull ngate_spd_ull(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spd_ull, tndiff ) + perimeter_inside(ngate_spd_ull, tndiff)) / 2
   L=area(ngate_spd_ull) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_dpncisr) ngate_sdpncipg ngate_sdpncipg(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sdpncipg, tndiff ) + perimeter_inside(ngate_sdpncipg, tndiff)) / 2
   L=area(ngate_sdpncipg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ncisr) ngate_sncipg ngate_sncipg(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sncipg, tndiff ) + perimeter_inside(ngate_sncipg, tndiff)) / 2
   L=area(ngate_sncipg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_sr) ngate_spg ngate_spg(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2
   L=area(ngate_spg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ull10ttprpsr) ngate_spg_ull10ttprp ngate_spg_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spg_ull10ttprp, tndiff ) + perimeter_inside(ngate_spg_ull10ttprp, tndiff)) / 2
   L=area(ngate_spg_ull10ttprp) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ull10ttpsr) ngate_spg_ull10ttp ngate_spg_ull10ttp(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spg_ull10ttp, tndiff ) + perimeter_inside(ngate_spg_ull10ttp, tndiff)) / 2
   L=area(ngate_spg_ull10ttp) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ullhcsr) ngate_sullhcpg ngate_sullhcpg(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sullhcpg, tndiff ) + perimeter_inside(ngate_sullhcpg, tndiff)) / 2
   L=area(ngate_sullhcpg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ullsr) ngate_spg_ull ngate_spg_ull(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spg_ull, tndiff ) + perimeter_inside(ngate_spg_ull, tndiff)) / 2
   L=area(ngate_spg_ull) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MP(pch) pgate pgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate, tpdiff ) + perimeter_inside(pgate, tpdiff)) / 2 
   L=area(pgate) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18) pgate_18 pgate_18(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18, tpdiff ) + perimeter_inside(pgate_18, tpdiff)) / 2 
   L=area(pgate_18) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18) pgate_18_mac pgate_18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2 
   L=area(pgate_18_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18ud15) pgate_18ud pgate_18ud(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18ud, tpdiff ) + perimeter_inside(pgate_18ud, tpdiff)) / 2 
   L=area(pgate_18ud) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18ud15) pgate_18ud_mac pgate_18ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18ud_mac, tpdiff ) + perimeter_inside(pgate_18ud_mac, tpdiff)) / 2 
   L=area(pgate_18ud_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25) pgate_25 pgate_25(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25, tpdiff ) + perimeter_inside(pgate_25, tpdiff)) / 2 
   L=area(pgate_25) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25) pgate_25_mac pgate_25_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2 
   L=area(pgate_25_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25od33) pgate_25od pgate_25od(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25od, tpdiff ) + perimeter_inside(pgate_25od, tpdiff)) / 2 
   L=area(pgate_25od) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25od33) pgate_25od_mac pgate_25od_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2 
   L=area(pgate_25od_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25ud18) pgate_25ud pgate_25ud(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25ud, tpdiff ) + perimeter_inside(pgate_25ud, tpdiff)) / 2 
   L=area(pgate_25ud) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25ud18) pgate_25ud_mac pgate_25ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2 
   L=area(pgate_25ud_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_avt) pgate_avt pgate_avt(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_avt, tpdiff ) + perimeter_inside(pgate_avt, tpdiff)) / 2 
   L=area(pgate_avt) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_avt) pgate_avt_mac pgate_avt_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_avt_mac, tpdiff ) + perimeter_inside(pgate_avt_mac, tpdiff)) / 2 
   L=area(pgate_avt_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_ehvt) pehvgate pehvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pehvgate, tpdiff ) + perimeter_inside(pehvgate, tpdiff)) / 2 
   L=area(pehvgate) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_ehvt) pehvgate_mac pehvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pehvgate_mac, tpdiff ) + perimeter_inside(pehvgate_mac, tpdiff)) / 2 
   L=area(pehvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_elvt) pelvgate pelvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pelvgate, tpdiff ) + perimeter_inside(pelvgate, tpdiff)) / 2 
   L=area(pelvgate) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_elvt) pelvgate_mac pelvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pelvgate_mac, tpdiff ) + perimeter_inside(pelvgate_mac, tpdiff)) / 2 
   L=area(pelvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_hvt) phvgate phvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(phvgate, tpdiff ) + perimeter_inside(phvgate, tpdiff)) / 2 
   L=area(phvgate) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_hvt) phvgate_mac phvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(phvgate_mac, tpdiff ) + perimeter_inside(phvgate_mac, tpdiff)) / 2 
   L=area(phvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_lvt) plvgate plvgate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(plvgate, tpdiff ) + perimeter_inside(plvgate, tpdiff)) / 2 
   L=area(plvgate) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_lvt) plvgate_mac plvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(plvgate_mac, tpdiff ) + perimeter_inside(plvgate_mac, tpdiff)) / 2 
   L=area(plvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch) pgate_mac pgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_mac, tpdiff ) + perimeter_inside(pgate_mac, tpdiff)) / 2 
   L=area(pgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_dpncisr) pgate_sdpnci pgate_sdpnci(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_sdpnci, tpdiff ) + perimeter_inside(pgate_sdpnci, tpdiff)) / 2 
   L=area(pgate_sdpnci) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_ncisr) pgate_snci pgate_snci(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_snci, tpdiff ) + perimeter_inside(pgate_snci, tpdiff)) / 2 
   L=area(pgate_snci) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_sr) pgate_s pgate_s(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2 
   L=area(pgate_s) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_ull10ttpsr) pgate_s_ull10ttp pgate_s_ull10ttp(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_s_ull10ttp, tpdiff ) + perimeter_inside(pgate_s_ull10ttp, tpdiff)) / 2 
   L=area(pgate_s_ull10ttp) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_ullhcsr) pgate_sullhc pgate_sullhc(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_sullhc, tpdiff ) + perimeter_inside(pgate_sullhc, tpdiff)) / 2 
   L=area(pgate_sullhc) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_ullsr) pgate_s_ull pgate_s_ull(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_s_ull, tpdiff ) + perimeter_inside(pgate_s_ull, tpdiff)) / 2 
   L=area(pgate_s_ull) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]


#ELSE
DEVICE LDDP(pch_hv25_spw)  pgate_hv25 d_tpdiff_hv(D) pgate_hv25(G) s_tpdiff_hv(S) nxwell(B) [
   property W,L
   W = (perimeter_coincide(pgate_hv25, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25, d_tpdiff_hv)) / 2
   L = area(pgate_hv25) / W
]
DEVICE LDDP(pch_hv25_spw)  pgate_hv25_mac d_tpdiff_hv(D) pgate_hv25_mac(G) s_tpdiff_hv(S) nxwell(B) [
   property W,L
   W = (perimeter_coincide(pgate_hv25_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv25_mac, d_tpdiff_hv)) / 2
   L = area(pgate_hv25_mac) / W
]
DEVICE LDDN(nch_hv25_snw)  ngate_hv25 d_tndiff_hv(D) ngate_hv25(G) s_tndiff_hv(S) psub(B) [
   property W,L
   W = (perimeter_coincide(ngate_hv25, s_tndiff_hv ) + perimeter_coincide(ngate_hv25, d_tndiff_hv)) / 2
   L = area(ngate_hv25) / W
]
DEVICE LDDN(nch_hv25_snw)  ngate_hv25_mac d_tndiff_hv(D) ngate_hv25_mac(G) s_tndiff_hv(S) psub(B) [
   property W,L
   W = (perimeter_coincide(ngate_hv25_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv25_mac, d_tndiff_hv)) / 2
   L = area(ngate_hv25_mac) / W
]
DEVICE MN(nch) ngate ngate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate, tndiff ) + perimeter_inside(ngate, tndiff)) / 2 
   L=area(ngate) / W
]
DEVICE MN(nch_18) ngate_18 ngate_18(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_18, tndiff ) + perimeter_inside(ngate_18, tndiff)) / 2 
   L=area(ngate_18) / W
]
DEVICE MN(nch_18_dnw) dngate_18 dngate_18(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_18, tndiff ) + perimeter_inside(dngate_18, tndiff)) / 2 
   L=area(dngate_18) / W
]
DEVICE MN(nch_18_dnw) dngate_18_mac dngate_18_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_18_mac, tndiff ) + perimeter_inside(dngate_18_mac, tndiff)) / 2 
   L=area(dngate_18_mac) / W
]
DEVICE MN(nch_18) ngate_18_mac ngate_18_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2 
   L=area(ngate_18_mac) / W
]
DEVICE MN(nch_18ud15) ngate_18ud ngate_18ud(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_18ud, tndiff ) + perimeter_inside(ngate_18ud, tndiff)) / 2 
   L=area(ngate_18ud) / W
]
DEVICE MN(nch_18ud15_dnw) dngate_18ud dngate_18ud(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_18ud, tndiff ) + perimeter_inside(dngate_18ud, tndiff)) / 2 
   L=area(dngate_18ud) / W
]
DEVICE MN(nch_18ud15_dnw) dngate_18ud_mac dngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_18ud_mac, tndiff ) + perimeter_inside(dngate_18ud_mac, tndiff)) / 2 
   L=area(dngate_18ud_mac) / W
]
DEVICE MN(nch_18ud15) ngate_18ud_mac ngate_18ud_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_18ud_mac, tndiff ) + perimeter_inside(ngate_18ud_mac, tndiff)) / 2 
   L=area(ngate_18ud_mac) / W
]
DEVICE MN(nch_25) ngate_25 ngate_25(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25, tndiff ) + perimeter_inside(ngate_25, tndiff)) / 2 
   L=area(ngate_25) / W
]
DEVICE MN(nch_25_dnw) dngate_25 dngate_25(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25, tndiff ) + perimeter_inside(dngate_25, tndiff)) / 2 
   L=area(dngate_25) / W
]
DEVICE MN(nch_25_dnw) dngate_25_mac dngate_25_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25_mac, tndiff ) + perimeter_inside(dngate_25_mac, tndiff)) / 2 
   L=area(dngate_25_mac) / W
]
DEVICE MN(nch_25_fgd_dnw_mac) dngate_25_fgd_mac dngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25_fgd_mac, tndiff ) + perimeter_inside(dngate_25_fgd_mac, tndiff)) / 2 
   L=area(dngate_25_fgd_mac) / W
]
DEVICE MN(nch_25_fgd_mac) ngate_25_fgd_mac ngate_25_fgd_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25_fgd_mac, tndiff ) + perimeter_inside(ngate_25_fgd_mac, tndiff)) / 2 
   L=area(ngate_25_fgd_mac) / W
]
DEVICE MN(nch_25) ngate_25_mac ngate_25_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2 
   L=area(ngate_25_mac) / W
]
DEVICE MN(nch_25_ngd_dnw_mac) dngate_25_ngd_mac dngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25_ngd_mac, tndiff ) + perimeter_inside(dngate_25_ngd_mac, tndiff)) / 2 
   L=area(dngate_25_ngd_mac) / W
]
DEVICE MN(nch_25_ngd_mac) ngate_25_ngd_mac ngate_25_ngd_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25_ngd_mac, tndiff ) + perimeter_inside(ngate_25_ngd_mac, tndiff)) / 2 
   L=area(ngate_25_ngd_mac) / W
]
DEVICE MN(nch_25od33) ngate_25od ngate_25od(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25od, tndiff ) + perimeter_inside(ngate_25od, tndiff)) / 2 
   L=area(ngate_25od) / W
]
DEVICE MN(nch_25od33_dnw) dngate_25od dngate_25od(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25od, tndiff ) + perimeter_inside(dngate_25od, tndiff)) / 2 
   L=area(dngate_25od) / W
]
DEVICE MN(nch_25od33_dnw) dngate_25od_mac dngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25od_mac, tndiff ) + perimeter_inside(dngate_25od_mac, tndiff)) / 2 
   L=area(dngate_25od_mac) / W
]
DEVICE MN(nch_25od33) ngate_25od_mac ngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2 
   L=area(ngate_25od_mac) / W
]
DEVICE MN(nch_25ud18) ngate_25ud ngate_25ud(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25ud, tndiff ) + perimeter_inside(ngate_25ud, tndiff)) / 2 
   L=area(ngate_25ud) / W
]
DEVICE MN(nch_25ud18_dnw) dngate_25ud dngate_25ud(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25ud, tndiff ) + perimeter_inside(dngate_25ud, tndiff)) / 2 
   L=area(dngate_25ud) / W
]
DEVICE MN(nch_25ud18_dnw) dngate_25ud_mac dngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_25ud_mac, tndiff ) + perimeter_inside(dngate_25ud_mac, tndiff)) / 2 
   L=area(dngate_25ud_mac) / W
]
DEVICE MN(nch_25ud18) ngate_25ud_mac ngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2 
   L=area(ngate_25ud_mac) / W
]
DEVICE MN(nch_ana25_dnw_mac) dngate_ana25_mac dngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(dngate_ana25_mac, tndiff ) + perimeter_inside(dngate_ana25_mac, tndiff)) / 2 
   L=area(dngate_ana25_mac) / W
]
DEVICE MN(nch_ana25_mac) ngate_ana25_mac ngate_ana25_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_ana25_mac, tndiff ) + perimeter_inside(ngate_ana25_mac, tndiff)) / 2 
   L=area(ngate_ana25_mac) / W
]
DEVICE MN(nch_avt) ngate_avt ngate_avt(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_avt, tndiff ) + perimeter_inside(ngate_avt, tndiff)) / 2 
   L=area(ngate_avt) / W
]
DEVICE MN(nch_avt_dnw) nrgate_avt nrgate_avt(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nrgate_avt, tndiff ) + perimeter_inside(nrgate_avt, tndiff)) / 2 
   L=area(nrgate_avt) / W
]
DEVICE MN(nch_avt_dnw) nrgate_avt_mac nrgate_avt_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nrgate_avt_mac, tndiff ) + perimeter_inside(nrgate_avt_mac, tndiff)) / 2 
   L=area(nrgate_avt_mac) / W
]
DEVICE MN(nch_avt) ngate_avt_mac ngate_avt_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_avt_mac, tndiff ) + perimeter_inside(ngate_avt_mac, tndiff)) / 2 
   L=area(ngate_avt_mac) / W
]
DEVICE MN(nch_dnw) nrgate nrgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nrgate, tndiff ) + perimeter_inside(nrgate, tndiff)) / 2 
   L=area(nrgate) / W
]
DEVICE MN(nch_dnw) nrgate_mac nrgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nrgate_mac, tndiff ) + perimeter_inside(nrgate_mac, tndiff)) / 2 
   L=area(nrgate_mac) / W
]
DEVICE MN(nch_ehvt) nehvgate nehvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nehvgate, tndiff ) + perimeter_inside(nehvgate, tndiff)) / 2 
   L=area(nehvgate) / W
]
DEVICE MN(nch_ehvt_dnw) n1ehvgate n1ehvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1ehvgate, tndiff ) + perimeter_inside(n1ehvgate, tndiff)) / 2 
   L=area(n1ehvgate) / W
]
DEVICE MN(nch_ehvt_dnw) n1ehvgate_mac n1ehvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1ehvgate_mac, tndiff ) + perimeter_inside(n1ehvgate_mac, tndiff)) / 2 
   L=area(n1ehvgate_mac) / W
]
DEVICE MN(nch_ehvt) nehvgate_mac nehvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nehvgate_mac, tndiff ) + perimeter_inside(nehvgate_mac, tndiff)) / 2 
   L=area(nehvgate_mac) / W
]
DEVICE MN(nch_elvt) nelvgate nelvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nelvgate, tndiff ) + perimeter_inside(nelvgate, tndiff)) / 2 
   L=area(nelvgate) / W
]
DEVICE MN(nch_elvt_dnw) n1elvgate n1elvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1elvgate, tndiff ) + perimeter_inside(n1elvgate, tndiff)) / 2 
   L=area(n1elvgate) / W
]
DEVICE MN(nch_elvt_dnw) n1elvgate_mac n1elvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1elvgate_mac, tndiff ) + perimeter_inside(n1elvgate_mac, tndiff)) / 2 
   L=area(n1elvgate_mac) / W
]
DEVICE MN(nch_elvt) nelvgate_mac nelvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nelvgate_mac, tndiff ) + perimeter_inside(nelvgate_mac, tndiff)) / 2 
   L=area(nelvgate_mac) / W
]
DEVICE MN(nch_hvt) nhvgate nhvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nhvgate, tndiff ) + perimeter_inside(nhvgate, tndiff)) / 2 
   L=area(nhvgate) / W
]
DEVICE MN(nch_hvt_dnw) n1hvgate n1hvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1hvgate, tndiff ) + perimeter_inside(n1hvgate, tndiff)) / 2 
   L=area(n1hvgate) / W
]
DEVICE MN(nch_hvt_dnw) n1hvgate_mac n1hvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1hvgate_mac, tndiff ) + perimeter_inside(n1hvgate_mac, tndiff)) / 2 
   L=area(n1hvgate_mac) / W
]
DEVICE MN(nch_hvt) nhvgate_mac nhvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nhvgate_mac, tndiff ) + perimeter_inside(nhvgate_mac, tndiff)) / 2 
   L=area(nhvgate_mac) / W
]
DEVICE MN(nch_lvt) nlvgate nlvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nlvgate, tndiff ) + perimeter_inside(nlvgate, tndiff)) / 2 
   L=area(nlvgate) / W
]
DEVICE MN(nch_lvt_dnw) n1lvgate n1lvgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1lvgate, tndiff ) + perimeter_inside(n1lvgate, tndiff)) / 2 
   L=area(n1lvgate) / W
]
DEVICE MN(nch_lvt_dnw) n1lvgate_mac n1lvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(n1lvgate_mac, tndiff ) + perimeter_inside(n1lvgate_mac, tndiff)) / 2 
   L=area(n1lvgate_mac) / W
]
DEVICE MN(nch_lvt) nlvgate_mac nlvgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nlvgate_mac, tndiff ) + perimeter_inside(nlvgate_mac, tndiff)) / 2 
   L=area(nlvgate_mac) / W
]
DEVICE MN(nch) ngate_mac ngate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_mac, tndiff ) + perimeter_inside(ngate_mac, tndiff)) / 2 
   L=area(ngate_mac) / W
]
DEVICE MN(nch_na) nlgate nlgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nlgate, tndiff ) + perimeter_inside(nlgate, tndiff)) / 2 
   L=area(nlgate) / W
]
DEVICE MN(nch_na18) ngate_18na ngate_18na(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_18na, tndiff ) + perimeter_inside(ngate_18na, tndiff)) / 2 
   L=area(ngate_18na) / W
]
DEVICE MN(nch_na18) ngate_18na_mac ngate_18na_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2 
   L=area(ngate_18na_mac) / W
]
DEVICE MN(nch_na25) ngate_25na ngate_25na(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25na, tndiff ) + perimeter_inside(ngate_25na, tndiff)) / 2 
   L=area(ngate_25na) / W
]
DEVICE MN(nch_na25) ngate_25na_mac ngate_25na_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2 
   L=area(ngate_25na_mac) / W
]
DEVICE MN(nch_na25od33) ngate_25naod ngate_25naod(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25naod, tndiff ) + perimeter_inside(ngate_25naod, tndiff)) / 2 
   L=area(ngate_25naod) / W
]
DEVICE MN(nch_na25od33) ngate_25naod_mac ngate_25naod_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2 
   L=area(ngate_25naod_mac) / W
]
DEVICE MN(nch_na25ud18) ngate_25naud ngate_25naud(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25naud, tndiff ) + perimeter_inside(ngate_25naud, tndiff)) / 2 
   L=area(ngate_25naud) / W
]
DEVICE MN(nch_na25ud18) ngate_25naud_mac ngate_25naud_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2 
   L=area(ngate_25naud_mac) / W
]
DEVICE MN(nch_na) nlgate_mac nlgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2 
   L=area(nlgate_mac) / W
]
DEVICE MN(nch_naavt) nlavgate nlavgate(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nlavgate, tndiff ) + perimeter_inside(nlavgate, tndiff)) / 2 
   L=area(nlavgate) / W
]
DEVICE MN(nch_naavt) nlavgate_mac nlavgate_mac(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(nlavgate_mac, tndiff ) + perimeter_inside(nlavgate_mac, tndiff)) / 2 
   L=area(nlavgate_mac) / W
]
DEVICE MN(nchpd_dpncisr) ngate_sdpncipd ngate_sdpncipd(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_sdpncipd, tndiff ) + perimeter_inside(ngate_sdpncipd, tndiff)) / 2 
   L=area(ngate_sdpncipd) / W
]
DEVICE MN(nchpd_ncisr) ngate_sncipd ngate_sncipd(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_sncipd, tndiff ) + perimeter_inside(ngate_sncipd, tndiff)) / 2 
   L=area(ngate_sncipd) / W
]
DEVICE MN(nchpd_sr) ngate_spd ngate_spd(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2 
   L=area(ngate_spd) / W
]
DEVICE MN(nchpd_ull10ttprpsr) ngate_spd_ull10ttprp ngate_spd_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spd_ull10ttprp, tndiff ) + perimeter_inside(ngate_spd_ull10ttprp, tndiff)) / 2 
   L=area(ngate_spd_ull10ttprp) / W
]
DEVICE MN(nchpd_ull10ttpsr) ngate_spd_ull10ttp ngate_spd_ull10ttp(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spd_ull10ttp, tndiff ) + perimeter_inside(ngate_spd_ull10ttp, tndiff)) / 2 
   L=area(ngate_spd_ull10ttp) / W
]
DEVICE MN(nchpd_ullhcsr) ngate_sullhcpd ngate_sullhcpd(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_sullhcpd, tndiff ) + perimeter_inside(ngate_sullhcpd, tndiff)) / 2 
   L=area(ngate_sullhcpd) / W
]
DEVICE MN(nchpd_ullsr) ngate_spd_ull ngate_spd_ull(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spd_ull, tndiff ) + perimeter_inside(ngate_spd_ull, tndiff)) / 2 
   L=area(ngate_spd_ull) / W
]
DEVICE MN(nchpg_dpncisr) ngate_sdpncipg ngate_sdpncipg(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_sdpncipg, tndiff ) + perimeter_inside(ngate_sdpncipg, tndiff)) / 2 
   L=area(ngate_sdpncipg) / W
]
DEVICE MN(nchpg_ncisr) ngate_sncipg ngate_sncipg(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_sncipg, tndiff ) + perimeter_inside(ngate_sncipg, tndiff)) / 2 
   L=area(ngate_sncipg) / W
]
DEVICE MN(nchpg_sr) ngate_spg ngate_spg(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2 
   L=area(ngate_spg) / W
]
DEVICE MN(nchpg_ull10ttprpsr) ngate_spg_ull10ttprp ngate_spg_ull10ttprp(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spg_ull10ttprp, tndiff ) + perimeter_inside(ngate_spg_ull10ttprp, tndiff)) / 2 
   L=area(ngate_spg_ull10ttprp) / W
]
DEVICE MN(nchpg_ull10ttpsr) ngate_spg_ull10ttp ngate_spg_ull10ttp(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spg_ull10ttp, tndiff ) + perimeter_inside(ngate_spg_ull10ttp, tndiff)) / 2 
   L=area(ngate_spg_ull10ttp) / W
]
DEVICE MN(nchpg_ullhcsr) ngate_sullhcpg ngate_sullhcpg(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_sullhcpg, tndiff ) + perimeter_inside(ngate_sullhcpg, tndiff)) / 2 
   L=area(ngate_sullhcpg) / W
]
DEVICE MN(nchpg_ullsr) ngate_spg_ull ngate_spg_ull(G) tndiff(S) tndiff(D) psub(B) [
   property W,L
   W=(perimeter_coincide(ngate_spg_ull, tndiff ) + perimeter_inside(ngate_spg_ull, tndiff)) / 2 
   L=area(ngate_spg_ull) / W
]
DEVICE MP(pch) pgate pgate(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate, tpdiff ) + perimeter_inside(pgate, tpdiff)) / 2 
   L=area(pgate) / W
]
DEVICE MP(pch_18) pgate_18 pgate_18(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_18, tpdiff ) + perimeter_inside(pgate_18, tpdiff)) / 2 
   L=area(pgate_18) / W
]
DEVICE MP(pch_18) pgate_18_mac pgate_18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2 
   L=area(pgate_18_mac) / W
]
DEVICE MP(pch_18ud15) pgate_18ud pgate_18ud(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_18ud, tpdiff ) + perimeter_inside(pgate_18ud, tpdiff)) / 2 
   L=area(pgate_18ud) / W
]
DEVICE MP(pch_18ud15) pgate_18ud_mac pgate_18ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_18ud_mac, tpdiff ) + perimeter_inside(pgate_18ud_mac, tpdiff)) / 2 
   L=area(pgate_18ud_mac) / W
]
DEVICE MP(pch_25) pgate_25 pgate_25(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_25, tpdiff ) + perimeter_inside(pgate_25, tpdiff)) / 2 
   L=area(pgate_25) / W
]
DEVICE MP(pch_25) pgate_25_mac pgate_25_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2 
   L=area(pgate_25_mac) / W
]
DEVICE MP(pch_25od33) pgate_25od pgate_25od(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_25od, tpdiff ) + perimeter_inside(pgate_25od, tpdiff)) / 2 
   L=area(pgate_25od) / W
]
DEVICE MP(pch_25od33) pgate_25od_mac pgate_25od_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2 
   L=area(pgate_25od_mac) / W
]
DEVICE MP(pch_25ud18) pgate_25ud pgate_25ud(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_25ud, tpdiff ) + perimeter_inside(pgate_25ud, tpdiff)) / 2 
   L=area(pgate_25ud) / W
]
DEVICE MP(pch_25ud18) pgate_25ud_mac pgate_25ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2 
   L=area(pgate_25ud_mac) / W
]
DEVICE MP(pch_avt) pgate_avt pgate_avt(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_avt, tpdiff ) + perimeter_inside(pgate_avt, tpdiff)) / 2 
   L=area(pgate_avt) / W
]
DEVICE MP(pch_avt) pgate_avt_mac pgate_avt_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_avt_mac, tpdiff ) + perimeter_inside(pgate_avt_mac, tpdiff)) / 2 
   L=area(pgate_avt_mac) / W
]
DEVICE MP(pch_ehvt) pehvgate pehvgate(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pehvgate, tpdiff ) + perimeter_inside(pehvgate, tpdiff)) / 2 
   L=area(pehvgate) / W
]
DEVICE MP(pch_ehvt) pehvgate_mac pehvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pehvgate_mac, tpdiff ) + perimeter_inside(pehvgate_mac, tpdiff)) / 2 
   L=area(pehvgate_mac) / W
]
DEVICE MP(pch_elvt) pelvgate pelvgate(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pelvgate, tpdiff ) + perimeter_inside(pelvgate, tpdiff)) / 2 
   L=area(pelvgate) / W
]
DEVICE MP(pch_elvt) pelvgate_mac pelvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pelvgate_mac, tpdiff ) + perimeter_inside(pelvgate_mac, tpdiff)) / 2 
   L=area(pelvgate_mac) / W
]
DEVICE MP(pch_hvt) phvgate phvgate(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(phvgate, tpdiff ) + perimeter_inside(phvgate, tpdiff)) / 2 
   L=area(phvgate) / W
]
DEVICE MP(pch_hvt) phvgate_mac phvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(phvgate_mac, tpdiff ) + perimeter_inside(phvgate_mac, tpdiff)) / 2 
   L=area(phvgate_mac) / W
]
DEVICE MP(pch_lvt) plvgate plvgate(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(plvgate, tpdiff ) + perimeter_inside(plvgate, tpdiff)) / 2 
   L=area(plvgate) / W
]
DEVICE MP(pch_lvt) plvgate_mac plvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(plvgate_mac, tpdiff ) + perimeter_inside(plvgate_mac, tpdiff)) / 2 
   L=area(plvgate_mac) / W
]
DEVICE MP(pch) pgate_mac pgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_mac, tpdiff ) + perimeter_inside(pgate_mac, tpdiff)) / 2 
   L=area(pgate_mac) / W
]
DEVICE MP(pchpu_dpncisr) pgate_sdpnci pgate_sdpnci(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_sdpnci, tpdiff ) + perimeter_inside(pgate_sdpnci, tpdiff)) / 2 
   L=area(pgate_sdpnci) / W
]
DEVICE MP(pchpu_ncisr) pgate_snci pgate_snci(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_snci, tpdiff ) + perimeter_inside(pgate_snci, tpdiff)) / 2 
   L=area(pgate_snci) / W
]
DEVICE MP(pchpu_sr) pgate_s pgate_s(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2 
   L=area(pgate_s) / W
]
DEVICE MP(pchpu_ull10ttpsr) pgate_s_ull10ttp pgate_s_ull10ttp(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_s_ull10ttp, tpdiff ) + perimeter_inside(pgate_s_ull10ttp, tpdiff)) / 2 
   L=area(pgate_s_ull10ttp) / W
]
DEVICE MP(pchpu_ullhcsr) pgate_sullhc pgate_sullhc(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_sullhc, tpdiff ) + perimeter_inside(pgate_sullhc, tpdiff)) / 2 
   L=area(pgate_sullhc) / W
]
DEVICE MP(pchpu_ullsr) pgate_s_ull pgate_s_ull(G) tpdiff(S) tpdiff(D) nxwell(B) [
   property W,L
   W=(perimeter_coincide(pgate_s_ull, tpdiff ) + perimeter_inside(pgate_s_ull, tpdiff)) / 2 
   L=area(pgate_s_ull) / W
]


#ENDIF

#ENDIF


#IFNDEF RC_DECK
TRACE PROPERTY LDDP(pch_hv25_spw) L L MOS_Lerr
TRACE PROPERTY LDDP(pch_hv25_spw) W W MOS_Werr
TRACE PROPERTY LDDN(nch_hv25_snw) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_hv25_snw) W W MOS_Werr
TRACE PROPERTY MN(nch) L L MOS_Lerr
TRACE PROPERTY MN(nch) W W MOS_Werr
TRACE PROPERTY MN(nch_18) L L MOS_Lerr
TRACE PROPERTY MN(nch_18) W W MOS_Werr
TRACE PROPERTY MN(nch_18_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_18_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_18ud15) L L MOS_Lerr
TRACE PROPERTY MN(nch_18ud15) W W MOS_Werr
TRACE PROPERTY MN(nch_18ud15_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_18ud15_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_25) L L MOS_Lerr
TRACE PROPERTY MN(nch_25) W W MOS_Werr
TRACE PROPERTY MN(nch_25_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_25_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_25_fgd_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_25_fgd_dnw_mac) W W MOS_Werr
TRACE PROPERTY MN(nch_25_fgd_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_25_fgd_mac) W W MOS_Werr
TRACE PROPERTY MN(nch_25_ngd_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_25_ngd_dnw_mac) W W MOS_Werr
TRACE PROPERTY MN(nch_25_ngd_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_25_ngd_mac) W W MOS_Werr
TRACE PROPERTY MN(nch_25od33) L L MOS_Lerr
TRACE PROPERTY MN(nch_25od33) W W MOS_Werr
TRACE PROPERTY MN(nch_25od33_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_25od33_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_25ud18) L L MOS_Lerr
TRACE PROPERTY MN(nch_25ud18) W W MOS_Werr
TRACE PROPERTY MN(nch_25ud18_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_25ud18_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_ana25_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ana25_dnw_mac) W W MOS_Werr
TRACE PROPERTY MN(nch_ana25_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ana25_mac) W W MOS_Werr
TRACE PROPERTY MN(nch_avt) L L MOS_Lerr
TRACE PROPERTY MN(nch_avt) W W MOS_Werr
TRACE PROPERTY MN(nch_avt_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_avt_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_ehvt) L L MOS_Lerr
TRACE PROPERTY MN(nch_ehvt) W W MOS_Werr
TRACE PROPERTY MN(nch_ehvt_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_ehvt_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_elvt) L L MOS_Lerr
TRACE PROPERTY MN(nch_elvt) W W MOS_Werr
TRACE PROPERTY MN(nch_elvt_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_elvt_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_hvt) L L MOS_Lerr
TRACE PROPERTY MN(nch_hvt) W W MOS_Werr
TRACE PROPERTY MN(nch_hvt_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_hvt_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_lvt) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvt) W W MOS_Werr
TRACE PROPERTY MN(nch_lvt_dnw) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvt_dnw) W W MOS_Werr
TRACE PROPERTY MN(nch_na) L L MOS_Lerr
TRACE PROPERTY MN(nch_na) W W MOS_Werr
TRACE PROPERTY MN(nch_na18) L L MOS_Lerr
TRACE PROPERTY MN(nch_na18) W W MOS_Werr
TRACE PROPERTY MN(nch_na25) L L MOS_Lerr
TRACE PROPERTY MN(nch_na25) W W MOS_Werr
TRACE PROPERTY MN(nch_na25od33) L L MOS_Lerr
TRACE PROPERTY MN(nch_na25od33) W W MOS_Werr
TRACE PROPERTY MN(nch_na25ud18) L L MOS_Lerr
TRACE PROPERTY MN(nch_na25ud18) W W MOS_Werr
TRACE PROPERTY MN(nch_naavt) L L MOS_Lerr
TRACE PROPERTY MN(nch_naavt) W W MOS_Werr
TRACE PROPERTY MN(nchpd_dpncisr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_dpncisr) W W MOS_Werr
TRACE PROPERTY MN(nchpd_ncisr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ncisr) W W MOS_Werr
TRACE PROPERTY MN(nchpd_sr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_sr) W W MOS_Werr
TRACE PROPERTY MN(nchpd_ull10ttprpsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ull10ttprpsr) W W MOS_Werr
TRACE PROPERTY MN(nchpd_ull10ttpsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ull10ttpsr) W W MOS_Werr
TRACE PROPERTY MN(nchpd_ullhcsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ullhcsr) W W MOS_Werr
TRACE PROPERTY MN(nchpd_ullsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ullsr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_dpncisr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_dpncisr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_ncisr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ncisr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_sr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_sr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_ull10ttprpsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ull10ttprpsr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_ull10ttpsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ull10ttpsr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_ullhcsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ullhcsr) W W MOS_Werr
TRACE PROPERTY MN(nchpg_ullsr) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ullsr) W W MOS_Werr
TRACE PROPERTY MP(pch) L L MOS_Lerr
TRACE PROPERTY MP(pch) W W MOS_Werr
TRACE PROPERTY MP(pch_18) L L MOS_Lerr
TRACE PROPERTY MP(pch_18) W W MOS_Werr
TRACE PROPERTY MP(pch_18ud15) L L MOS_Lerr
TRACE PROPERTY MP(pch_18ud15) W W MOS_Werr
TRACE PROPERTY MP(pch_25) L L MOS_Lerr
TRACE PROPERTY MP(pch_25) W W MOS_Werr
TRACE PROPERTY MP(pch_25od33) L L MOS_Lerr
TRACE PROPERTY MP(pch_25od33) W W MOS_Werr
TRACE PROPERTY MP(pch_25ud18) L L MOS_Lerr
TRACE PROPERTY MP(pch_25ud18) W W MOS_Werr
TRACE PROPERTY MP(pch_avt) L L MOS_Lerr
TRACE PROPERTY MP(pch_avt) W W MOS_Werr
TRACE PROPERTY MP(pch_ehvt) L L MOS_Lerr
TRACE PROPERTY MP(pch_ehvt) W W MOS_Werr
TRACE PROPERTY MP(pch_elvt) L L MOS_Lerr
TRACE PROPERTY MP(pch_elvt) W W MOS_Werr
TRACE PROPERTY MP(pch_hvt) L L MOS_Lerr
TRACE PROPERTY MP(pch_hvt) W W MOS_Werr
TRACE PROPERTY MP(pch_lvt) L L MOS_Lerr
TRACE PROPERTY MP(pch_lvt) W W MOS_Werr
TRACE PROPERTY MP(pchpu_dpncisr) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_dpncisr) W W MOS_Werr
TRACE PROPERTY MP(pchpu_ncisr) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ncisr) W W MOS_Werr
TRACE PROPERTY MP(pchpu_sr) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_sr) W W MOS_Werr
TRACE PROPERTY MP(pchpu_ull10ttpsr) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ull10ttpsr) W W MOS_Werr
TRACE PROPERTY MP(pchpu_ullhcsr) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ullhcsr) W W MOS_Werr
TRACE PROPERTY MP(pchpu_ullsr) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ullsr) W W MOS_Werr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(npn10) cnemit10 ncoll1 cpbase1 cnemit1 netlist model npn10
#ELSE
  DEVICE Q(npn10) cnemit10 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFNDEF RC_DECK
  TRACE PROPERTY Q(npn10) A A BJT_Aerr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(npn10) cnemit10_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn10_mis
#ELSE
  DEVICE Q(npn10) cnemit10_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF
#IFDEF RC_DECK
DEVICE Q(npn2) cnemit2 ncoll1 cpbase1 cnemit1 netlist model npn2
#ELSE
  DEVICE Q(npn2) cnemit2 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFNDEF RC_DECK
  TRACE PROPERTY Q(npn2) A A BJT_Aerr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(npn2) cnemit2_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn2_mis
#ELSE
  DEVICE Q(npn2) cnemit2_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF
#IFDEF RC_DECK
DEVICE Q(npn5) cnemit5 ncoll1 cpbase1 cnemit1 netlist model npn5
#ELSE
  DEVICE Q(npn5) cnemit5 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFNDEF RC_DECK
  TRACE PROPERTY Q(npn5) A A BJT_Aerr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(npn5) cnemit5_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn5_mis
#ELSE
  DEVICE Q(npn5) cnemit5_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF
#IFDEF RC_DECK
DEVICE Q(pnp10) cemit10 coll1 cnbase1 cemit1 netlist model pnp10
#ELSE
  DEVICE Q(pnp10) cemit10 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFNDEF RC_DECK
  TRACE PROPERTY Q(pnp10) A A BJT_Aerr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(pnp10) cemit10_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp10_mis
#ELSE
  DEVICE Q(pnp10) cemit10_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF
#IFDEF RC_DECK
DEVICE Q(pnp2) cemit2 coll1 cnbase1 cemit1 netlist model pnp2
#ELSE
  DEVICE Q(pnp2) cemit2 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFNDEF RC_DECK
  TRACE PROPERTY Q(pnp2) A A BJT_Aerr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(pnp2) cemit2_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp2_mis
#ELSE
  DEVICE Q(pnp2) cemit2_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF
#IFDEF RC_DECK
DEVICE Q(pnp5) cemit5 coll1 cnbase1 cemit1 netlist model pnp5
#ELSE
  DEVICE Q(pnp5) cemit5 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFNDEF RC_DECK
  TRACE PROPERTY Q(pnp5) A A BJT_Aerr
#ENDIF

#IFDEF RC_DECK
DEVICE Q(pnp5) cemit5_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp5_mis
#ELSE
  DEVICE Q(pnp5) cemit5_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF
DEVICE D(ndio) cndio psub tndiff netlist model ndio
  TRACE PROPERTY D(ndio) A A DIO_Aerr
DEVICE D(ndio_18) indio_18 psub tndiff netlist model ndio_18
  TRACE PROPERTY D(ndio_18) A A DIO_Aerr
DEVICE D(ndio_18ud15) indio_18ud psub tndiff netlist model ndio_18ud15
  TRACE PROPERTY D(ndio_18ud15) A A DIO_Aerr
DEVICE D(ndio_25) indio_25 psub tndiff netlist model ndio_25
  TRACE PROPERTY D(ndio_25) A A DIO_Aerr
DEVICE D(ndio_25od33) indio_25od psub tndiff netlist model ndio_25od33
  TRACE PROPERTY D(ndio_25od33) A A DIO_Aerr
DEVICE D(ndio_25ud18) indio_25ud psub tndiff netlist model ndio_25ud18
  TRACE PROPERTY D(ndio_25ud18) A A DIO_Aerr
DEVICE D(ndio_avt) ndioavt psub tndiff netlist model ndio_avt
  TRACE PROPERTY D(ndio_avt) A A DIO_Aerr
DEVICE D(ndio_ehvt) ndioehv psub tndiff netlist model ndio_ehvt
  TRACE PROPERTY D(ndio_ehvt) A A DIO_Aerr
DEVICE D(ndio_elvt) ndioelv psub tndiff netlist model ndio_elvt
  TRACE PROPERTY D(ndio_elvt) A A DIO_Aerr
DEVICE D(ndio_esd) ydio psub ydio_t netlist model ndio_esd
  TRACE PROPERTY D(ndio_esd) A A DIO_Aerr
DEVICE D(ndio_hvt) ndioh psub tndiff netlist model ndio_hvt
  TRACE PROPERTY D(ndio_hvt) A A DIO_Aerr
DEVICE D(ndio_lvt) ndiol psub tndiff netlist model ndio_lvt
  TRACE PROPERTY D(ndio_lvt) A A DIO_Aerr
DEVICE D(ndio_na) cndion psub tndiff netlist model ndio_na
  TRACE PROPERTY D(ndio_na) A A DIO_Aerr
DEVICE D(ndio_na18) ndio_18na psub tndiff netlist model ndio_na18
  TRACE PROPERTY D(ndio_na18) A A DIO_Aerr
DEVICE D(ndio_na25) ndio_25na psub tndiff netlist model ndio_na25
  TRACE PROPERTY D(ndio_na25) A A DIO_Aerr
DEVICE D(ndio_na25od33) ndio_25od33na psub tndiff netlist model ndio_na25od33
  TRACE PROPERTY D(ndio_na25od33) A A DIO_Aerr
DEVICE D(ndio_na25ud18) ndio_25ud18na psub tndiff netlist model ndio_na25ud18
  TRACE PROPERTY D(ndio_na25ud18) A A DIO_Aerr
DEVICE D(ndio_naavt) cndion_av psub tndiff netlist model ndio_naavt
  TRACE PROPERTY D(ndio_naavt) A A DIO_Aerr
DEVICE D(nwdio) cnwdio psub nxwell netlist model nwdio
  TRACE PROPERTY D(nwdio) A A DIO_Aerr
DEVICE D(pdio) cpdio tpdiff nxwell netlist model pdio
  TRACE PROPERTY D(pdio) A A DIO_Aerr
DEVICE D(pdio_18) ipdio_18 tpdiff nxwell netlist model pdio_18
  TRACE PROPERTY D(pdio_18) A A DIO_Aerr
DEVICE D(pdio_18ud15) ipdio_18ud tpdiff nxwell netlist model pdio_18ud15
  TRACE PROPERTY D(pdio_18ud15) A A DIO_Aerr
DEVICE D(pdio_25) ipdio_25 tpdiff nxwell netlist model pdio_25
  TRACE PROPERTY D(pdio_25) A A DIO_Aerr
DEVICE D(pdio_25od33) ipdio_25od tpdiff nxwell netlist model pdio_25od33
  TRACE PROPERTY D(pdio_25od33) A A DIO_Aerr
DEVICE D(pdio_25ud18) ipdio_25ud tpdiff nxwell netlist model pdio_25ud18
  TRACE PROPERTY D(pdio_25ud18) A A DIO_Aerr
DEVICE D(pdio_avt) pdioavt tpdiff nxwell netlist model pdio_avt
  TRACE PROPERTY D(pdio_avt) A A DIO_Aerr
DEVICE D(pdio_ehvt) pdioehv tpdiff nxwell netlist model pdio_ehvt
  TRACE PROPERTY D(pdio_ehvt) A A DIO_Aerr
DEVICE D(pdio_elvt) pdioelv tpdiff nxwell netlist model pdio_elvt
  TRACE PROPERTY D(pdio_elvt) A A DIO_Aerr
DEVICE D(pdio_hvt) pdioh tpdiff nxwell netlist model pdio_hvt
  TRACE PROPERTY D(pdio_hvt) A A DIO_Aerr
DEVICE D(pdio_lvt) pdiol tpdiff nxwell netlist model pdio_lvt
  TRACE PROPERTY D(pdio_lvt) A A DIO_Aerr

// User define devices 
//
#IFDEF RC_DECK
DEVICE M(CG) cgate CG(G) comso(S) cg_drain(D) psub(B) <nthin1> [
  property W,L,AS,AD,PD,PS,NRD,NRS
   W=(perimeter_coincide(cgate, comso ) + perimeter_coincide(cgate, cg_drain)) / 2
   L=area(cgate) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD /2
    AS = AD
    PD = perimeter(D) * W /PI_D_OD /2
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD /2
    AD = AS
    PS = perimeter(S) * W /PI_S_OD /2
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#ELSE
#IFDEF extract_as_ad
DEVICE M(CG) cgate CG(G) comso(S) cg_drain(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(cgate, comso ) + perimeter_coincide(cgate, cg_drain)) / 2
   L=area(cgate) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD/2
    AS = AD }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD/2
    AD = AS }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
#ELSE
DEVICE M(CG) cgate CG(G) comso(S) cg_drain(D) psub(B) [
   property W,L
   W=(perimeter_coincide(cgate, comso ) + perimeter_coincide(cgate, cg_drain)) / 2 
   L=area(cgate) / W
]
#ENDIF
#ENDIF

#IFNDEF RC_DECK
TRACE PROPERTY M(CG) L L MOS_Lerr
TRACE PROPERTY M(CG) W W MOS_Werr
#ENDIF

DEVICE C(EG) eg_r eg(POS) comso(NEG) [0.001]

//
#IFDEF RC_DECK
DEVICE M(WL) wlgate wlgate(G) cg_drain(S) cg_drain(D) psub(B) <nthin1> [
  property W,L,AS,AD,PD,PS,NRD,NRS
   W=(perimeter_coincide(wlgate, cg_drain ) + perimeter_inside(wlgate, cg_drain)) / 2  
   L=area(wlgate) / W + 1e-9
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD /2
    AS = AD
    PD = perimeter(D) * W /PI_D_OD /2

    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD /2
    AD = AS
    PS = perimeter(S) * W /PI_S_OD /2
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]
#ELSE
#IFDEF extract_as_ad
DEVICE M(WL) wlgate poly(G) cg_drain(S) cg_drain(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(wlgate, cg_drain ) + perimeter_inside(wlgate, cg_drain)) / 2  
   L=area(wlgate) / W + 1e-9
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD/2
    AS = AD }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD/2
    AD = AS }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
#ELSE
DEVICE M(WL) wlgate poly(G) cg_drain(S) cg_drain(D) psub(B) [
   property W,L
   W=(perimeter_coincide(wlgate, cg_drain ) + perimeter_inside(wlgate, cg_drain)) / 2 
   L=area(wlgate) / W + 1e-9
]
#ENDIF
#ENDIF

#IFNDEF RC_DECK
TRACE PROPERTY M(WL) L L MOS_Lerr
TRACE PROPERTY M(WL) W W MOS_Werr
#ENDIF








FM_edge1 = M1 NOT MOM_field1
FM_len1_pre = MOM_field1 TOUCH EDGE FM_edge1
FM_len1 = FM_edge1 TOUCH EDGE FM_len1_pre

FM_tip1_pre = EXT MOM_field1 FM_len1 < MIN_MOM_LR OPPOSITE REGION
FM_tip1 =  FM_tip1_pre AND MOMDMY1
MOM_tip1a = M1i OR FM_tip1
MOM_tip1  = MOM_tip1a INTERACT MOMDMY_all
MOM_hole1_1 = MOMDMY1 NOT MOM_tip1
MOM_hole1 = MOM_hole1_1 INTERACT MOM_field1 == 2


FM_edge2 = M2 NOT MOM_field2
FM_len2_pre = MOM_field2 TOUCH EDGE FM_edge2
FM_len2 = FM_edge2 TOUCH EDGE FM_len2_pre

FM_tip2_pre = EXT MOM_field2 FM_len2 < MIN_MOM_LR OPPOSITE REGION
FM_tip2 =  FM_tip2_pre AND MOMDMY2
MOM_tip2a = M2i OR FM_tip2
MOM_tip2  = MOM_tip2a INTERACT MOMDMY_all
MOM_hole2_1 = MOMDMY2 NOT MOM_tip2
MOM_hole2 = MOM_hole2_1 INTERACT MOM_field2 == 2


FM_edge3 = M3 NOT MOM_field3
FM_len3_pre = MOM_field3 TOUCH EDGE FM_edge3
FM_len3 = FM_edge3 TOUCH EDGE FM_len3_pre

FM_tip3_pre = EXT MOM_field3 FM_len3 < MIN_MOM_LR OPPOSITE REGION
FM_tip3 =  FM_tip3_pre AND MOMDMY3
MOM_tip3a = M3i OR FM_tip3
MOM_tip3  = MOM_tip3a INTERACT MOMDMY_all
MOM_hole3_1 = MOMDMY3 NOT MOM_tip3
MOM_hole3 = MOM_hole3_1 INTERACT MOM_field3 == 2


FM_edge4 = M4 NOT MOM_field4
FM_len4_pre = MOM_field4 TOUCH EDGE FM_edge4
FM_len4 = FM_edge4 TOUCH EDGE FM_len4_pre

FM_tip4_pre = EXT MOM_field4 FM_len4 < MIN_MOM_LR OPPOSITE REGION
FM_tip4 =  FM_tip4_pre AND MOMDMY4
MOM_tip4a = M4i OR FM_tip4
MOM_tip4  = MOM_tip4a INTERACT MOMDMY_all
MOM_hole4_1 = MOMDMY4 NOT MOM_tip4
MOM_hole4 = MOM_hole4_1 INTERACT MOM_field4 == 2


FM_edge5 = M5 NOT MOM_field5
FM_len5_pre = MOM_field5 TOUCH EDGE FM_edge5
FM_len5 = FM_edge5 TOUCH EDGE FM_len5_pre

FM_tip5_pre = EXT MOM_field5 FM_len5 < MIN_MOM_LR OPPOSITE REGION
FM_tip5 =  FM_tip5_pre AND MOMDMY5
MOM_tip5a = M5i OR FM_tip5
MOM_tip5  = MOM_tip5a INTERACT MOMDMY_all
MOM_hole5_1 = MOMDMY5 NOT MOM_tip5
MOM_hole5 = MOM_hole5_1 INTERACT MOM_field5 == 2












mom13_idt = MOM_field3 NOT MOM_field2




fmom13_reg1           = mom13_Left5 NOT INTERACT MOMDMY22
fmom13_reg2           = fmom13_reg1 NOT INTERACT mom13_idt    // No cross finger
fmom13_reg3           = fmom13_reg2 INTERACT MOMDMY100
fmom13_reg4           = fmom13_reg3 NOT INTERACT RFDMY
fmom13_reg5           = fmom13_reg4 NOT INTERACT MOMDMY_2T


fmom13_reg6           = fmom13_reg5 NOT INTERACT MOMDMY31
fmom13_reg7           = fmom13_reg6 NOT INTERACT MOMDMY32
fmom13_reg8           = fmom13_reg7 NOT INTERACT MOMDMY33
fmom13_reg9           = fmom13_reg8 INTERACT poly
fmom13_reg            = fmom13_reg9 NOT INTERACT MOM_dmetal1_0        // FMOM 3T wi N+poly shield wo DM
fmom13_reg_npo        = fmom13_reg3 NOT INTERACT MOMDMY0
fmom13_reg_npo_wo     = fmom13_reg_npo INTERACT RPO
fmom13_reg_npo_2t     = fmom13_reg_npo INTERACT MOMDMY_2T

fmom13_reg_2t1        = fmom13_reg_npo_2t NOT INTERACT MOMDMY31
fmom13_reg_2t2        = fmom13_reg_2t1 NOT INTERACT MOMDMY32
fmom13_reg_2t         = fmom13_reg_2t2 NOT INTERACT MOMDMY33	      // FMOM 2T
                              
fmom13_reg_nw1        = fmom13_reg_npo_wo INTERACT MOMDMY31
fmom13_reg_nw2        = fmom13_reg_nw1 INTERACT fmom13_reg5
fmom13_reg_nw3        = fmom13_reg_nw2 INTERACT nxwell
fmom13_reg_nw         = fmom13_reg_nw3 NOT INTERACT MOM_dmetal1_0	// FMOM 3T wi NW shield wo DM
                              
fmom13_reg_pw1        = fmom13_reg_npo_wo INTERACT MOMDMY32
fmom13_reg_pw2        = fmom13_reg_pw1 INTERACT fmom13_reg6
fmom13_reg_pw3        = fmom13_reg_pw2 INTERACT psub

fmom13_reg_pw        = fmom13_reg_pw3 NOT INTERACT MOM_dmetal1_0	// FMOM 3T wi PSUB shield wo DM
fmom13_reg_ntn1       = fmom13_reg_npo_wo INTERACT MOMDMY33
fmom13_reg_ntn2       = fmom13_reg_ntn1 INTERACT fmom13_reg7
fmom13_reg_ntn3       = fmom13_reg_ntn2 INTERACT NT_N

fmom13_reg_ntn4       = fmom13_reg_ntn3 NOT INTERACT MOMDMY28

fmom13_reg_ntn        = fmom13_reg_ntn4 NOT INTERACT MOM_dmetal1_0   // FMOM 3T wi NTN shield wo DM
fmom13_reg_ntn_wo_pring1    = fmom13_reg_ntn3 INTERACT MOMDMY28

fmom13_reg_ntn_wo_pring     = fmom13_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM

fmom13_mx_reg1        = MOMDMY22 INTERACT mom13_Left5
fmom13_mx_reg2        = fmom13_mx_reg1 NOT INTERACT mom13_idt
fmom13_mx_reg3        = fmom13_mx_reg2 INTERACT MOMDMY100
fmom13_mx_reg4        = fmom13_mx_reg3 NOT INTERACT MOMDMY_2T
fmom13_mx_reg5        = fmom13_mx_reg4 NOT INTERACT MOMDMY31
fmom13_mx_reg6        = fmom13_mx_reg5 NOT INTERACT MOMDMY32
fmom13_mx_reg7        = fmom13_mx_reg6 NOT INTERACT MOMDMY33
                              
fmom13_mx_reg8        = fmom13_mx_reg7 INTERACT poly
fmom13_mx_reg         = fmom13_mx_reg8 NOT INTERACT MOM_dmetal1_0	// FMOM MX 5T wi poly shield wo DM
fmom13_mx_reg_npo1    = fmom13_mx_reg3 NOT INTERACT MOMDMY0
fmom13_mx_reg_npo_wo  = fmom13_mx_reg_npo1 INTERACT RPO
fmom13_mx_reg_npo_4t  = fmom13_mx_reg_npo1 INTERACT MOMDMY_2T

fmom13_mx_reg_4t1     = fmom13_mx_reg_npo_4t NOT INTERACT MOMDMY31
fmom13_mx_reg_4t2     = fmom13_mx_reg_4t1 NOT INTERACT MOMDMY32
fmom13_mx_reg_4t      = fmom13_mx_reg_4t2 NOT INTERACT MOMDMY33           // FMOM MX 4T

fmom13_mx_reg_nw1     = fmom13_mx_reg_npo_wo INTERACT MOMDMY31
fmom13_mx_reg_nw2     = fmom13_mx_reg_nw1 INTERACT fmom13_mx_reg4
fmom13_mx_reg_nw3     = fmom13_mx_reg_nw2 INTERACT nxwell
fmom13_mx_reg_nw      = fmom13_mx_reg_nw3 NOT INTERACT MOM_dmetal1_0 // FMOM 5T wi NW shield wo DM

fmom13_mx_reg_pw1     = fmom13_mx_reg_npo_wo INTERACT MOMDMY32
fmom13_mx_reg_pw2     = fmom13_mx_reg_pw1 INTERACT fmom13_mx_reg5
fmom13_mx_reg_pw3     = fmom13_mx_reg_pw2 INTERACT psub

fmom13_mx_reg_pw      = fmom13_mx_reg_pw3 NOT INTERACT MOM_dmetal1_0 // FMOM 5T wi PSUB shield wo DM
fmom13_mx_reg_ntn1    = fmom13_mx_reg_npo_wo INTERACT MOMDMY33
fmom13_mx_reg_ntn2    = fmom13_mx_reg_ntn1 INTERACT fmom13_mx_reg6
fmom13_mx_reg_ntn3    = fmom13_mx_reg_ntn2 INTERACT NT_N

fmom13_mx_reg_ntn     = fmom13_mx_reg_ntn3 NOT INTERACT MOM_dmetal1_0	// FMOM 5T wi NTN shield wo DM
fmom13_reg_rf1        = mom13_Left5 INTERACT RFDMY
fmom13_reg_rf2        = fmom13_reg_rf1 NOT INTERACT mom13_idt    // No cross finger
fmom13_reg_rf3        = fmom13_reg_rf2 INTERACT MOMDMY100
fmom13_reg_rf4        = fmom13_reg_rf3 NOT INTERACT MOMDMY22
fmom13_reg_rf5        = fmom13_reg_rf4 NOT INTERACT MOMDMY_2T
fmom13_reg_rf6        = fmom13_reg_rf5 NOT INTERACT MOMDMY31
fmom13_reg_rf7        = fmom13_reg_rf6 NOT INTERACT MOMDMY32
fmom13_reg_rf8        = fmom13_reg_rf7 NOT INTERACT MOMDMY33
                              
fmom13_reg_rf9        = fmom13_reg_rf8 INTERACT poly
fmom13_reg_rf10       = fmom13_reg_rf9 NOT RFDMY67G
fmom13_reg_rf         = fmom13_reg_rf10 NOT INTERACT MOM_dmetal1_0   // RF FMOM 3T wi poly shield wo DM
fmom13_reg_rf_67g     = fmom13_reg_rf9 AND RFDMY67G

fmom13_reg_rf_npo1    = fmom13_reg_rf4 NOT INTERACT MOMDMY0
fmom13_reg_rf_npo_wo  = fmom13_reg_rf_npo1 INTERACT RPO
fmom13_reg_rf_npo_2t  = fmom13_reg_rf_npo1 INTERACT MOMDMY_2T
                              
fmom13_reg_rf_2t1     = fmom13_reg_rf_npo_2t NOT INTERACT MOMDMY31
fmom13_reg_rf_2t2     = fmom13_reg_rf_2t1 NOT INTERACT MOMDMY32
fmom13_reg_rf_2t      = fmom13_reg_rf_2t2 NOT INTERACT MOMDMY33	    // RF FMOM 2T
                              
fmom13_reg_rf_nw1     = fmom13_reg_rf_npo_wo INTERACT MOMDMY31
fmom13_reg_rf_nw2     = fmom13_reg_rf_nw1 INTERACT fmom13_reg_rf5
fmom13_reg_rf_nw3     = fmom13_reg_rf_nw2 INTERACT nxwell
fmom13_reg_rf_nw      = fmom13_reg_rf_nw3 NOT INTERACT MOM_dmetal1_0 // RF FMOM 3T wi NW shield wo DM
fmom13_reg_rf_pw1     = fmom13_reg_rf_npo_wo INTERACT MOMDMY32
fmom13_reg_rf_pw2     = fmom13_reg_rf_pw1 INTERACT fmom13_reg_rf6
fmom13_reg_rf_pw3     = fmom13_reg_rf_pw2 INTERACT psub

fmom13_reg_rf_pw      = fmom13_reg_rf_pw3 NOT INTERACT MOM_dmetal1_0 // RF FMOM 3T wi PSUB shield wo DM
fmom13_reg_rf_ntn1    = fmom13_reg_rf_npo_wo INTERACT MOMDMY33
fmom13_reg_rf_ntn2    = fmom13_reg_rf_ntn1 INTERACT fmom13_reg_rf7
fmom13_reg_rf_ntn3    = fmom13_reg_rf_ntn2 INTERACT NT_N

fmom13_reg_rf_ntn     = fmom13_reg_rf_ntn3 NOT INTERACT MOM_dmetal1_0	// RF FMOM 3T wi NTN shield wo DM



mom13_extc   = FM_tip3 NOT INTERACT MOM_field3 > 2



DEVICE cfmom fmom13_reg metal3(PLUS) metal3(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    dmflag = 0
]

DEVICE cfmom_2t fmom13_reg_2t metal3(PLUS) metal3(MINUS) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_2t)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
]

DEVICE cfmom_rf fmom13_reg_rf metal3(PLUS) metal3(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_rf)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_rf) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    dmflag = 0
]


DEVICE cfmom_wo fmom13_reg_nw metal3(PLUS) metal3(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_nw)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom13_reg_pw metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_pw)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom13_reg_ntn metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_ntn)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 3
    dmflag = 0
]

DEVICE cfmom_wo fmom13_reg_ntn_wo_pring metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_ntn_wo_pring)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 4
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom13_reg_rf_nw metal3(PLUS) metal3(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_rf_nw)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_rf_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom13_reg_rf_pw metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_rf_pw)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_rf_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom13_reg_rf_ntn metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_rf_ntn)/ nr
    ftip = AREA(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_rf_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 3
    dmflag = 0
]


DEVICE cfmom_mx fmom13_mx_reg mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) poly_mom(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_mx_aux> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nr*mf1)
    ftip = AREA(mom13_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 3
    dmflag = 0
]
DEVICE cfmom_mx_4t fmom13_mx_reg_4t mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_mx_aux> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nr*mf1)
    ftip = AREA(mom13_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 3
]
DEVICE cfmom_wo_mx fmom13_mx_reg_nw mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_mx_aux> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nr*mf1)
    ftip = AREA(mom13_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 3
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom13_mx_reg_pw mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_mx_aux> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nr*mf1)
    ftip = AREA(mom13_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 3
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom13_mx_reg_ntn mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom13_mx_aux> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nr*mf1)
    ftip = AREA(mom13_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 3
    shield = 3
    dmflag = 0
]










mom14_idt = MOM_field4 NOT MOM_field3




fmom14_reg1           = mom14_Left5 NOT INTERACT MOMDMY22
fmom14_reg2           = fmom14_reg1 NOT INTERACT mom14_idt    // No cross finger
fmom14_reg3           = fmom14_reg2 INTERACT MOMDMY100
fmom14_reg4           = fmom14_reg3 NOT INTERACT RFDMY
fmom14_reg5           = fmom14_reg4 NOT INTERACT MOMDMY_2T


fmom14_reg6           = fmom14_reg5 NOT INTERACT MOMDMY31
fmom14_reg7           = fmom14_reg6 NOT INTERACT MOMDMY32
fmom14_reg8           = fmom14_reg7 NOT INTERACT MOMDMY33
fmom14_reg9           = fmom14_reg8 INTERACT poly
fmom14_reg            = fmom14_reg9 NOT INTERACT MOM_dmetal1_0        // FMOM 3T wi N+poly shield wo DM
fmom14_reg_npo        = fmom14_reg3 NOT INTERACT MOMDMY0
fmom14_reg_npo_wo     = fmom14_reg_npo INTERACT RPO
fmom14_reg_npo_2t     = fmom14_reg_npo INTERACT MOMDMY_2T

fmom14_reg_2t1        = fmom14_reg_npo_2t NOT INTERACT MOMDMY31
fmom14_reg_2t2        = fmom14_reg_2t1 NOT INTERACT MOMDMY32
fmom14_reg_2t         = fmom14_reg_2t2 NOT INTERACT MOMDMY33	      // FMOM 2T
                              
fmom14_reg_nw1        = fmom14_reg_npo_wo INTERACT MOMDMY31
fmom14_reg_nw2        = fmom14_reg_nw1 INTERACT fmom14_reg5
fmom14_reg_nw3        = fmom14_reg_nw2 INTERACT nxwell
fmom14_reg_nw         = fmom14_reg_nw3 NOT INTERACT MOM_dmetal1_0	// FMOM 3T wi NW shield wo DM
                              
fmom14_reg_pw1        = fmom14_reg_npo_wo INTERACT MOMDMY32
fmom14_reg_pw2        = fmom14_reg_pw1 INTERACT fmom14_reg6
fmom14_reg_pw3        = fmom14_reg_pw2 INTERACT psub

fmom14_reg_pw        = fmom14_reg_pw3 NOT INTERACT MOM_dmetal1_0	// FMOM 3T wi PSUB shield wo DM
fmom14_reg_ntn1       = fmom14_reg_npo_wo INTERACT MOMDMY33
fmom14_reg_ntn2       = fmom14_reg_ntn1 INTERACT fmom14_reg7
fmom14_reg_ntn3       = fmom14_reg_ntn2 INTERACT NT_N

fmom14_reg_ntn4       = fmom14_reg_ntn3 NOT INTERACT MOMDMY28

fmom14_reg_ntn        = fmom14_reg_ntn4 NOT INTERACT MOM_dmetal1_0   // FMOM 3T wi NTN shield wo DM
fmom14_reg_ntn_wo_pring1    = fmom14_reg_ntn3 INTERACT MOMDMY28

fmom14_reg_ntn_wo_pring     = fmom14_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM

fmom14_mx_reg1        = MOMDMY22 INTERACT mom14_Left5
fmom14_mx_reg2        = fmom14_mx_reg1 NOT INTERACT mom14_idt
fmom14_mx_reg3        = fmom14_mx_reg2 INTERACT MOMDMY100
fmom14_mx_reg4        = fmom14_mx_reg3 NOT INTERACT MOMDMY_2T
fmom14_mx_reg5        = fmom14_mx_reg4 NOT INTERACT MOMDMY31
fmom14_mx_reg6        = fmom14_mx_reg5 NOT INTERACT MOMDMY32
fmom14_mx_reg7        = fmom14_mx_reg6 NOT INTERACT MOMDMY33
                              
fmom14_mx_reg8        = fmom14_mx_reg7 INTERACT poly
fmom14_mx_reg         = fmom14_mx_reg8 NOT INTERACT MOM_dmetal1_0	// FMOM MX 5T wi poly shield wo DM
fmom14_mx_reg_npo1    = fmom14_mx_reg3 NOT INTERACT MOMDMY0
fmom14_mx_reg_npo_wo  = fmom14_mx_reg_npo1 INTERACT RPO
fmom14_mx_reg_npo_4t  = fmom14_mx_reg_npo1 INTERACT MOMDMY_2T

fmom14_mx_reg_4t1     = fmom14_mx_reg_npo_4t NOT INTERACT MOMDMY31
fmom14_mx_reg_4t2     = fmom14_mx_reg_4t1 NOT INTERACT MOMDMY32
fmom14_mx_reg_4t      = fmom14_mx_reg_4t2 NOT INTERACT MOMDMY33           // FMOM MX 4T

fmom14_mx_reg_nw1     = fmom14_mx_reg_npo_wo INTERACT MOMDMY31
fmom14_mx_reg_nw2     = fmom14_mx_reg_nw1 INTERACT fmom14_mx_reg4
fmom14_mx_reg_nw3     = fmom14_mx_reg_nw2 INTERACT nxwell
fmom14_mx_reg_nw      = fmom14_mx_reg_nw3 NOT INTERACT MOM_dmetal1_0 // FMOM 5T wi NW shield wo DM

fmom14_mx_reg_pw1     = fmom14_mx_reg_npo_wo INTERACT MOMDMY32
fmom14_mx_reg_pw2     = fmom14_mx_reg_pw1 INTERACT fmom14_mx_reg5
fmom14_mx_reg_pw3     = fmom14_mx_reg_pw2 INTERACT psub

fmom14_mx_reg_pw      = fmom14_mx_reg_pw3 NOT INTERACT MOM_dmetal1_0 // FMOM 5T wi PSUB shield wo DM
fmom14_mx_reg_ntn1    = fmom14_mx_reg_npo_wo INTERACT MOMDMY33
fmom14_mx_reg_ntn2    = fmom14_mx_reg_ntn1 INTERACT fmom14_mx_reg6
fmom14_mx_reg_ntn3    = fmom14_mx_reg_ntn2 INTERACT NT_N

fmom14_mx_reg_ntn     = fmom14_mx_reg_ntn3 NOT INTERACT MOM_dmetal1_0	// FMOM 5T wi NTN shield wo DM
fmom14_reg_rf1        = mom14_Left5 INTERACT RFDMY
fmom14_reg_rf2        = fmom14_reg_rf1 NOT INTERACT mom14_idt    // No cross finger
fmom14_reg_rf3        = fmom14_reg_rf2 INTERACT MOMDMY100
fmom14_reg_rf4        = fmom14_reg_rf3 NOT INTERACT MOMDMY22
fmom14_reg_rf5        = fmom14_reg_rf4 NOT INTERACT MOMDMY_2T
fmom14_reg_rf6        = fmom14_reg_rf5 NOT INTERACT MOMDMY31
fmom14_reg_rf7        = fmom14_reg_rf6 NOT INTERACT MOMDMY32
fmom14_reg_rf8        = fmom14_reg_rf7 NOT INTERACT MOMDMY33
                              
fmom14_reg_rf9        = fmom14_reg_rf8 INTERACT poly
fmom14_reg_rf10       = fmom14_reg_rf9 NOT RFDMY67G
fmom14_reg_rf         = fmom14_reg_rf10 NOT INTERACT MOM_dmetal1_0   // RF FMOM 3T wi poly shield wo DM
fmom14_reg_rf_67g     = fmom14_reg_rf9 AND RFDMY67G

fmom14_reg_rf_npo1    = fmom14_reg_rf4 NOT INTERACT MOMDMY0
fmom14_reg_rf_npo_wo  = fmom14_reg_rf_npo1 INTERACT RPO
fmom14_reg_rf_npo_2t  = fmom14_reg_rf_npo1 INTERACT MOMDMY_2T
                              
fmom14_reg_rf_2t1     = fmom14_reg_rf_npo_2t NOT INTERACT MOMDMY31
fmom14_reg_rf_2t2     = fmom14_reg_rf_2t1 NOT INTERACT MOMDMY32
fmom14_reg_rf_2t      = fmom14_reg_rf_2t2 NOT INTERACT MOMDMY33	    // RF FMOM 2T
                              
fmom14_reg_rf_nw1     = fmom14_reg_rf_npo_wo INTERACT MOMDMY31
fmom14_reg_rf_nw2     = fmom14_reg_rf_nw1 INTERACT fmom14_reg_rf5
fmom14_reg_rf_nw3     = fmom14_reg_rf_nw2 INTERACT nxwell
fmom14_reg_rf_nw      = fmom14_reg_rf_nw3 NOT INTERACT MOM_dmetal1_0 // RF FMOM 3T wi NW shield wo DM
fmom14_reg_rf_pw1     = fmom14_reg_rf_npo_wo INTERACT MOMDMY32
fmom14_reg_rf_pw2     = fmom14_reg_rf_pw1 INTERACT fmom14_reg_rf6
fmom14_reg_rf_pw3     = fmom14_reg_rf_pw2 INTERACT psub

fmom14_reg_rf_pw      = fmom14_reg_rf_pw3 NOT INTERACT MOM_dmetal1_0 // RF FMOM 3T wi PSUB shield wo DM
fmom14_reg_rf_ntn1    = fmom14_reg_rf_npo_wo INTERACT MOMDMY33
fmom14_reg_rf_ntn2    = fmom14_reg_rf_ntn1 INTERACT fmom14_reg_rf7
fmom14_reg_rf_ntn3    = fmom14_reg_rf_ntn2 INTERACT NT_N

fmom14_reg_rf_ntn     = fmom14_reg_rf_ntn3 NOT INTERACT MOM_dmetal1_0	// RF FMOM 3T wi NTN shield wo DM



mom14_extc   = FM_tip4 NOT INTERACT MOM_field4 > 2



DEVICE cfmom fmom14_reg metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    dmflag = 0
]

DEVICE cfmom_2t fmom14_reg_2t metal4(PLUS) metal4(MINUS) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_2t)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
]

DEVICE cfmom_rf fmom14_reg_rf metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_rf)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_rf) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    dmflag = 0
]


DEVICE cfmom_wo fmom14_reg_nw metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_nw)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom14_reg_pw metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_pw)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom14_reg_ntn metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_ntn)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 3
    dmflag = 0
]

DEVICE cfmom_wo fmom14_reg_ntn_wo_pring metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_ntn_wo_pring)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 4
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom14_reg_rf_nw metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_rf_nw)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_rf_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom14_reg_rf_pw metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_rf_pw)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_rf_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom14_reg_rf_ntn metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_rf_ntn)/ nr
    ftip = AREA(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_rf_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 3
    dmflag = 0
]


DEVICE cfmom_mx fmom14_mx_reg mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) poly_mom(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_mx_aux> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nr*mf1)
    ftip = AREA(mom14_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 4
    dmflag = 0
]
DEVICE cfmom_mx_4t fmom14_mx_reg_4t mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_mx_aux> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nr*mf1)
    ftip = AREA(mom14_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 4
]
DEVICE cfmom_wo_mx fmom14_mx_reg_nw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_mx_aux> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nr*mf1)
    ftip = AREA(mom14_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom14_mx_reg_pw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_mx_aux> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nr*mf1)
    ftip = AREA(mom14_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom14_mx_reg_ntn mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom14_mx_aux> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nr*mf1)
    ftip = AREA(mom14_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 4
    shield = 3
    dmflag = 0
]











mom15_idt = MOM_field5 NOT MOM_field4




fmom15_reg1           = mom15_5 NOT INTERACT MOMDMY22
fmom15_reg2           = fmom15_reg1 NOT INTERACT mom15_idt    // No cross finger
fmom15_reg3           = fmom15_reg2 INTERACT MOMDMY100
fmom15_reg4           = fmom15_reg3 NOT INTERACT RFDMY
fmom15_reg5           = fmom15_reg4 NOT INTERACT MOMDMY_2T


fmom15_reg6           = fmom15_reg5 NOT INTERACT MOMDMY31
fmom15_reg7           = fmom15_reg6 NOT INTERACT MOMDMY32
fmom15_reg8           = fmom15_reg7 NOT INTERACT MOMDMY33
fmom15_reg9           = fmom15_reg8 INTERACT poly
fmom15_reg            = fmom15_reg9 NOT INTERACT MOM_dmetal1_0        // FMOM 3T wi N+poly shield wo DM
fmom15_reg_npo        = fmom15_reg3 NOT INTERACT MOMDMY0
fmom15_reg_npo_wo     = fmom15_reg_npo INTERACT RPO
fmom15_reg_npo_2t     = fmom15_reg_npo INTERACT MOMDMY_2T

fmom15_reg_2t1        = fmom15_reg_npo_2t NOT INTERACT MOMDMY31
fmom15_reg_2t2        = fmom15_reg_2t1 NOT INTERACT MOMDMY32
fmom15_reg_2t         = fmom15_reg_2t2 NOT INTERACT MOMDMY33	      // FMOM 2T
                              
fmom15_reg_nw1        = fmom15_reg_npo_wo INTERACT MOMDMY31
fmom15_reg_nw2        = fmom15_reg_nw1 INTERACT fmom15_reg5
fmom15_reg_nw3        = fmom15_reg_nw2 INTERACT nxwell
fmom15_reg_nw         = fmom15_reg_nw3 NOT INTERACT MOM_dmetal1_0	// FMOM 3T wi NW shield wo DM
                              
fmom15_reg_pw1        = fmom15_reg_npo_wo INTERACT MOMDMY32
fmom15_reg_pw2        = fmom15_reg_pw1 INTERACT fmom15_reg6
fmom15_reg_pw3        = fmom15_reg_pw2 INTERACT psub

fmom15_reg_pw        = fmom15_reg_pw3 NOT INTERACT MOM_dmetal1_0	// FMOM 3T wi PSUB shield wo DM
fmom15_reg_ntn1       = fmom15_reg_npo_wo INTERACT MOMDMY33
fmom15_reg_ntn2       = fmom15_reg_ntn1 INTERACT fmom15_reg7
fmom15_reg_ntn3       = fmom15_reg_ntn2 INTERACT NT_N

fmom15_reg_ntn4       = fmom15_reg_ntn3 NOT INTERACT MOMDMY28

fmom15_reg_ntn        = fmom15_reg_ntn4 NOT INTERACT MOM_dmetal1_0   // FMOM 3T wi NTN shield wo DM
fmom15_reg_ntn_wo_pring1    = fmom15_reg_ntn3 INTERACT MOMDMY28

fmom15_reg_ntn_wo_pring     = fmom15_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM

fmom15_mx_reg1        = MOMDMY22 INTERACT mom15_5
fmom15_mx_reg2        = fmom15_mx_reg1 NOT INTERACT mom15_idt
fmom15_mx_reg3        = fmom15_mx_reg2 INTERACT MOMDMY100
fmom15_mx_reg4        = fmom15_mx_reg3 NOT INTERACT MOMDMY_2T
fmom15_mx_reg5        = fmom15_mx_reg4 NOT INTERACT MOMDMY31
fmom15_mx_reg6        = fmom15_mx_reg5 NOT INTERACT MOMDMY32
fmom15_mx_reg7        = fmom15_mx_reg6 NOT INTERACT MOMDMY33
                              
fmom15_mx_reg8        = fmom15_mx_reg7 INTERACT poly
fmom15_mx_reg         = fmom15_mx_reg8 NOT INTERACT MOM_dmetal1_0	// FMOM MX 5T wi poly shield wo DM
fmom15_mx_reg_npo1    = fmom15_mx_reg3 NOT INTERACT MOMDMY0
fmom15_mx_reg_npo_wo  = fmom15_mx_reg_npo1 INTERACT RPO
fmom15_mx_reg_npo_4t  = fmom15_mx_reg_npo1 INTERACT MOMDMY_2T

fmom15_mx_reg_4t1     = fmom15_mx_reg_npo_4t NOT INTERACT MOMDMY31
fmom15_mx_reg_4t2     = fmom15_mx_reg_4t1 NOT INTERACT MOMDMY32
fmom15_mx_reg_4t      = fmom15_mx_reg_4t2 NOT INTERACT MOMDMY33           // FMOM MX 4T

fmom15_mx_reg_nw1     = fmom15_mx_reg_npo_wo INTERACT MOMDMY31
fmom15_mx_reg_nw2     = fmom15_mx_reg_nw1 INTERACT fmom15_mx_reg4
fmom15_mx_reg_nw3     = fmom15_mx_reg_nw2 INTERACT nxwell
fmom15_mx_reg_nw      = fmom15_mx_reg_nw3 NOT INTERACT MOM_dmetal1_0 // FMOM 5T wi NW shield wo DM

fmom15_mx_reg_pw1     = fmom15_mx_reg_npo_wo INTERACT MOMDMY32
fmom15_mx_reg_pw2     = fmom15_mx_reg_pw1 INTERACT fmom15_mx_reg5
fmom15_mx_reg_pw3     = fmom15_mx_reg_pw2 INTERACT psub

fmom15_mx_reg_pw      = fmom15_mx_reg_pw3 NOT INTERACT MOM_dmetal1_0 // FMOM 5T wi PSUB shield wo DM
fmom15_mx_reg_ntn1    = fmom15_mx_reg_npo_wo INTERACT MOMDMY33
fmom15_mx_reg_ntn2    = fmom15_mx_reg_ntn1 INTERACT fmom15_mx_reg6
fmom15_mx_reg_ntn3    = fmom15_mx_reg_ntn2 INTERACT NT_N

fmom15_mx_reg_ntn     = fmom15_mx_reg_ntn3 NOT INTERACT MOM_dmetal1_0	// FMOM 5T wi NTN shield wo DM
fmom15_reg_rf1        = mom15_5 INTERACT RFDMY
fmom15_reg_rf2        = fmom15_reg_rf1 NOT INTERACT mom15_idt    // No cross finger
fmom15_reg_rf3        = fmom15_reg_rf2 INTERACT MOMDMY100
fmom15_reg_rf4        = fmom15_reg_rf3 NOT INTERACT MOMDMY22
fmom15_reg_rf5        = fmom15_reg_rf4 NOT INTERACT MOMDMY_2T
fmom15_reg_rf6        = fmom15_reg_rf5 NOT INTERACT MOMDMY31
fmom15_reg_rf7        = fmom15_reg_rf6 NOT INTERACT MOMDMY32
fmom15_reg_rf8        = fmom15_reg_rf7 NOT INTERACT MOMDMY33
                              
fmom15_reg_rf9        = fmom15_reg_rf8 INTERACT poly
fmom15_reg_rf10       = fmom15_reg_rf9 NOT RFDMY67G
fmom15_reg_rf         = fmom15_reg_rf10 NOT INTERACT MOM_dmetal1_0   // RF FMOM 3T wi poly shield wo DM
fmom15_reg_rf_67g     = fmom15_reg_rf9 AND RFDMY67G

fmom15_reg_rf_npo1    = fmom15_reg_rf4 NOT INTERACT MOMDMY0
fmom15_reg_rf_npo_wo  = fmom15_reg_rf_npo1 INTERACT RPO
fmom15_reg_rf_npo_2t  = fmom15_reg_rf_npo1 INTERACT MOMDMY_2T
                              
fmom15_reg_rf_2t1     = fmom15_reg_rf_npo_2t NOT INTERACT MOMDMY31
fmom15_reg_rf_2t2     = fmom15_reg_rf_2t1 NOT INTERACT MOMDMY32
fmom15_reg_rf_2t      = fmom15_reg_rf_2t2 NOT INTERACT MOMDMY33	    // RF FMOM 2T
                              
fmom15_reg_rf_nw1     = fmom15_reg_rf_npo_wo INTERACT MOMDMY31
fmom15_reg_rf_nw2     = fmom15_reg_rf_nw1 INTERACT fmom15_reg_rf5
fmom15_reg_rf_nw3     = fmom15_reg_rf_nw2 INTERACT nxwell
fmom15_reg_rf_nw      = fmom15_reg_rf_nw3 NOT INTERACT MOM_dmetal1_0 // RF FMOM 3T wi NW shield wo DM
fmom15_reg_rf_pw1     = fmom15_reg_rf_npo_wo INTERACT MOMDMY32
fmom15_reg_rf_pw2     = fmom15_reg_rf_pw1 INTERACT fmom15_reg_rf6
fmom15_reg_rf_pw3     = fmom15_reg_rf_pw2 INTERACT psub

fmom15_reg_rf_pw      = fmom15_reg_rf_pw3 NOT INTERACT MOM_dmetal1_0 // RF FMOM 3T wi PSUB shield wo DM
fmom15_reg_rf_ntn1    = fmom15_reg_rf_npo_wo INTERACT MOMDMY33
fmom15_reg_rf_ntn2    = fmom15_reg_rf_ntn1 INTERACT fmom15_reg_rf7
fmom15_reg_rf_ntn3    = fmom15_reg_rf_ntn2 INTERACT NT_N

fmom15_reg_rf_ntn     = fmom15_reg_rf_ntn3 NOT INTERACT MOM_dmetal1_0	// RF FMOM 3T wi NTN shield wo DM



mom15_extc   = FM_tip5 NOT INTERACT MOM_field5 > 2



DEVICE cfmom fmom15_reg metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    dmflag = 0
]

DEVICE cfmom_2t fmom15_reg_2t metal5(PLUS) metal5(MINUS) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_2t)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
]

DEVICE cfmom_rf fmom15_reg_rf metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_rf)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_rf) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    dmflag = 0
]


DEVICE cfmom_wo fmom15_reg_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_nw)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom15_reg_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_pw)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom15_reg_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_ntn)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 3
    dmflag = 0
]

DEVICE cfmom_wo fmom15_reg_ntn_wo_pring metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_ntn_wo_pring)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 4
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom15_reg_rf_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_rf_nw)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_rf_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom15_reg_rf_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_rf_pw)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_rf_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom15_reg_rf_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_rf_ntn)/ nr
    ftip = AREA(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_rf_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 3
    dmflag = 0
]


DEVICE cfmom_mx fmom15_mx_reg mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_mx_aux> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nr*mf1)
    ftip = AREA(mom15_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 5
    dmflag = 0
]
DEVICE cfmom_mx_4t fmom15_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_mx_aux> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nr*mf1)
    ftip = AREA(mom15_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 5
]
DEVICE cfmom_wo_mx fmom15_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_mx_aux> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nr*mf1)
    ftip = AREA(mom15_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom15_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_mx_aux> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nr*mf1)
    ftip = AREA(mom15_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom15_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <MOM_hole1> <mom15_mx_aux> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nr*mf1)
    ftip = AREA(mom15_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 1
    spm = 5
    shield = 3
    dmflag = 0
]











mom24_idt = MOM_field4 NOT MOM_field3




fmom24_reg1           = mom24_Left5 NOT INTERACT MOMDMY22
fmom24_reg2           = fmom24_reg1 NOT INTERACT mom24_idt    // No cross finger
fmom24_reg3           = fmom24_reg2 INTERACT MOMDMY100
fmom24_reg4           = fmom24_reg3 NOT INTERACT RFDMY
fmom24_reg5           = fmom24_reg4 NOT INTERACT MOMDMY_2T


fmom24_reg6           = fmom24_reg5 NOT INTERACT MOMDMY31
fmom24_reg7           = fmom24_reg6 NOT INTERACT MOMDMY32
fmom24_reg8           = fmom24_reg7 NOT INTERACT MOMDMY33
fmom24_reg9           = fmom24_reg8 INTERACT poly
fmom24_reg            = fmom24_reg9 NOT INTERACT MOM_dmetal1_1        // FMOM 3T wi N+poly shield wo DM
fmom24_reg_dm         = fmom24_reg9 INTERACT MOM_dmetal1_1			// FMOM 3T wi N+poly shield wi DM
fmom24_reg_npo        = fmom24_reg3 NOT INTERACT MOMDMY0
fmom24_reg_npo_wo     = fmom24_reg_npo INTERACT RPO
fmom24_reg_npo_2t     = fmom24_reg_npo INTERACT MOMDMY_2T

fmom24_reg_2t1        = fmom24_reg_npo_2t NOT INTERACT MOMDMY31
fmom24_reg_2t2        = fmom24_reg_2t1 NOT INTERACT MOMDMY32
fmom24_reg_2t         = fmom24_reg_2t2 NOT INTERACT MOMDMY33	      // FMOM 2T
                              
fmom24_reg_nw1        = fmom24_reg_npo_wo INTERACT MOMDMY31
fmom24_reg_nw2        = fmom24_reg_nw1 INTERACT fmom24_reg5
fmom24_reg_nw3        = fmom24_reg_nw2 INTERACT nxwell
fmom24_reg_nw         = fmom24_reg_nw3 NOT INTERACT MOM_dmetal1_1	// FMOM 3T wi NW shield wo DM
fmom24_reg_nw_dm      = fmom24_reg_nw3 INTERACT MOM_dmetal1_1		// FMOM 3T wi NW shield wi DM
                              
fmom24_reg_pw1        = fmom24_reg_npo_wo INTERACT MOMDMY32
fmom24_reg_pw2        = fmom24_reg_pw1 INTERACT fmom24_reg6
fmom24_reg_pw3        = fmom24_reg_pw2 INTERACT psub

fmom24_reg_pw        = fmom24_reg_pw3 NOT INTERACT MOM_dmetal1_1	// FMOM 3T wi PSUB shield wo DM
fmom24_reg_pw_dm      = fmom24_reg_pw3 INTERACT MOM_dmetal1_1		// FMOM 3T wi PSUB shield wi DM

fmom24_reg_ntn1       = fmom24_reg_npo_wo INTERACT MOMDMY33
fmom24_reg_ntn2       = fmom24_reg_ntn1 INTERACT fmom24_reg7
fmom24_reg_ntn3       = fmom24_reg_ntn2 INTERACT NT_N

fmom24_reg_ntn4       = fmom24_reg_ntn3 NOT INTERACT MOMDMY28

fmom24_reg_ntn        = fmom24_reg_ntn4 NOT INTERACT MOM_dmetal1_1   // FMOM 3T wi NTN shield wo DM
fmom24_reg_ntn_dm     = fmom24_reg_ntn4 INTERACT MOM_dmetal1_1		// FMOM 3T wi NTN shield wi DM

fmom24_reg_ntn_wo_pring1    = fmom24_reg_ntn3 INTERACT MOMDMY28

fmom24_reg_ntn_wo_pring     = fmom24_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom24_reg_ntn_wo_pring_dm     = fmom24_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM


fmom24_mx_reg1        = MOMDMY22 INTERACT mom24_Left5
fmom24_mx_reg2        = fmom24_mx_reg1 NOT INTERACT mom24_idt
fmom24_mx_reg3        = fmom24_mx_reg2 INTERACT MOMDMY100
fmom24_mx_reg4        = fmom24_mx_reg3 NOT INTERACT MOMDMY_2T
fmom24_mx_reg5        = fmom24_mx_reg4 NOT INTERACT MOMDMY31
fmom24_mx_reg6        = fmom24_mx_reg5 NOT INTERACT MOMDMY32
fmom24_mx_reg7        = fmom24_mx_reg6 NOT INTERACT MOMDMY33
                              
fmom24_mx_reg8        = fmom24_mx_reg7 INTERACT poly
fmom24_mx_reg         = fmom24_mx_reg8 NOT INTERACT MOM_dmetal1_1	// FMOM MX 5T wi poly shield wo DM
fmom24_mx_reg_dm      = fmom24_mx_reg8 INTERACT MOM_dmetal1_1		// FMOM MX 5T wi poly shield wi DM
fmom24_mx_reg_npo1    = fmom24_mx_reg3 NOT INTERACT MOMDMY0
fmom24_mx_reg_npo_wo  = fmom24_mx_reg_npo1 INTERACT RPO
fmom24_mx_reg_npo_4t  = fmom24_mx_reg_npo1 INTERACT MOMDMY_2T

fmom24_mx_reg_4t1     = fmom24_mx_reg_npo_4t NOT INTERACT MOMDMY31
fmom24_mx_reg_4t2     = fmom24_mx_reg_4t1 NOT INTERACT MOMDMY32
fmom24_mx_reg_4t      = fmom24_mx_reg_4t2 NOT INTERACT MOMDMY33           // FMOM MX 4T

fmom24_mx_reg_nw1     = fmom24_mx_reg_npo_wo INTERACT MOMDMY31
fmom24_mx_reg_nw2     = fmom24_mx_reg_nw1 INTERACT fmom24_mx_reg4
fmom24_mx_reg_nw3     = fmom24_mx_reg_nw2 INTERACT nxwell
fmom24_mx_reg_nw      = fmom24_mx_reg_nw3 NOT INTERACT MOM_dmetal1_1 // FMOM 5T wi NW shield wo DM
fmom24_mx_reg_nw_dm   = fmom24_mx_reg_nw3 INTERACT MOM_dmetal1_1		// FMOM 5T wi NW shield wi DM

fmom24_mx_reg_pw1     = fmom24_mx_reg_npo_wo INTERACT MOMDMY32
fmom24_mx_reg_pw2     = fmom24_mx_reg_pw1 INTERACT fmom24_mx_reg5
fmom24_mx_reg_pw3     = fmom24_mx_reg_pw2 INTERACT psub

fmom24_mx_reg_pw      = fmom24_mx_reg_pw3 NOT INTERACT MOM_dmetal1_1 // FMOM 5T wi PSUB shield wo DM
fmom24_mx_reg_pw_dm       = fmom24_mx_reg_pw3 INTERACT MOM_dmetal1_1		// FMOM 5T wi PSUB shield wi DM

fmom24_mx_reg_ntn1    = fmom24_mx_reg_npo_wo INTERACT MOMDMY33
fmom24_mx_reg_ntn2    = fmom24_mx_reg_ntn1 INTERACT fmom24_mx_reg6
fmom24_mx_reg_ntn3    = fmom24_mx_reg_ntn2 INTERACT NT_N

fmom24_mx_reg_ntn     = fmom24_mx_reg_ntn3 NOT INTERACT MOM_dmetal1_1	// FMOM 5T wi NTN shield wo DM
fmom24_mx_reg_ntn_dm      = fmom24_mx_reg_ntn3 INTERACT MOM_dmetal1_1		// FMOM 5T wi NTN shield wi DM

fmom24_reg_rf1        = mom24_Left5 INTERACT RFDMY
fmom24_reg_rf2        = fmom24_reg_rf1 NOT INTERACT mom24_idt    // No cross finger
fmom24_reg_rf3        = fmom24_reg_rf2 INTERACT MOMDMY100
fmom24_reg_rf4        = fmom24_reg_rf3 NOT INTERACT MOMDMY22
fmom24_reg_rf5        = fmom24_reg_rf4 NOT INTERACT MOMDMY_2T
fmom24_reg_rf6        = fmom24_reg_rf5 NOT INTERACT MOMDMY31
fmom24_reg_rf7        = fmom24_reg_rf6 NOT INTERACT MOMDMY32
fmom24_reg_rf8        = fmom24_reg_rf7 NOT INTERACT MOMDMY33
                              
fmom24_reg_rf9        = fmom24_reg_rf8 INTERACT poly
fmom24_reg_rf10       = fmom24_reg_rf9 NOT RFDMY67G
fmom24_reg_rf         = fmom24_reg_rf10 NOT INTERACT MOM_dmetal1_1   // RF FMOM 3T wi poly shield wo DM
fmom24_reg_rf_dm      = fmom24_reg_rf10 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi poly shield wi DM
fmom24_reg_rf_67g     = fmom24_reg_rf9 AND RFDMY67G

fmom24_reg_rf_npo1    = fmom24_reg_rf4 NOT INTERACT MOMDMY0
fmom24_reg_rf_npo_wo  = fmom24_reg_rf_npo1 INTERACT RPO
fmom24_reg_rf_npo_2t  = fmom24_reg_rf_npo1 INTERACT MOMDMY_2T
                              
fmom24_reg_rf_2t1     = fmom24_reg_rf_npo_2t NOT INTERACT MOMDMY31
fmom24_reg_rf_2t2     = fmom24_reg_rf_2t1 NOT INTERACT MOMDMY32
fmom24_reg_rf_2t      = fmom24_reg_rf_2t2 NOT INTERACT MOMDMY33	    // RF FMOM 2T
                              
fmom24_reg_rf_nw1     = fmom24_reg_rf_npo_wo INTERACT MOMDMY31
fmom24_reg_rf_nw2     = fmom24_reg_rf_nw1 INTERACT fmom24_reg_rf5
fmom24_reg_rf_nw3     = fmom24_reg_rf_nw2 INTERACT nxwell
fmom24_reg_rf_nw      = fmom24_reg_rf_nw3 NOT INTERACT MOM_dmetal1_1 // RF FMOM 3T wi NW shield wo DM
fmom24_reg_rf_nw_dm   = fmom24_reg_rf_nw3 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi NW shield wi DM
fmom24_reg_rf_pw1     = fmom24_reg_rf_npo_wo INTERACT MOMDMY32
fmom24_reg_rf_pw2     = fmom24_reg_rf_pw1 INTERACT fmom24_reg_rf6
fmom24_reg_rf_pw3     = fmom24_reg_rf_pw2 INTERACT psub

fmom24_reg_rf_pw      = fmom24_reg_rf_pw3 NOT INTERACT MOM_dmetal1_1 // RF FMOM 3T wi PSUB shield wo DM
fmom24_reg_rf_pw_dm       = fmom24_reg_rf_pw3 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi PSUB shield wi DM

fmom24_reg_rf_ntn1    = fmom24_reg_rf_npo_wo INTERACT MOMDMY33
fmom24_reg_rf_ntn2    = fmom24_reg_rf_ntn1 INTERACT fmom24_reg_rf7
fmom24_reg_rf_ntn3    = fmom24_reg_rf_ntn2 INTERACT NT_N

fmom24_reg_rf_ntn     = fmom24_reg_rf_ntn3 NOT INTERACT MOM_dmetal1_1	// RF FMOM 3T wi NTN shield wo DM
fmom24_reg_rf_ntn_dm      = fmom24_reg_rf_ntn3 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi NTN shield wi DM




mom24_extc   = FM_tip4 NOT INTERACT MOM_field4 > 2



DEVICE cfmom fmom24_reg metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    dmflag = 0
]
DEVICE cfmom fmom24_reg_dm metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom24_reg_2t metal4(PLUS) metal4(MINUS) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_2t)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
]

DEVICE cfmom_rf fmom24_reg_rf metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    dmflag = 0
]
DEVICE cfmom_rf fmom24_reg_rf_dm metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_rf_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_wo fmom24_reg_nw metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_nw)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_nw_dm metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_nw_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom24_reg_pw metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_pw)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_pw_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_pw_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom24_reg_ntn metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_ntn)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_ntn_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_ntn_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom24_reg_ntn_wo_pring metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_ntn_wo_pring)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_ntn_wo_pring_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_ntn_wo_pring_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 4
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_wo_rf fmom24_reg_rf_nw metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_nw)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom24_reg_rf_nw_dm metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_nw_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_rf_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom24_reg_rf_pw metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_pw)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom24_reg_rf_pw_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_pw_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_rf_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom24_reg_rf_ntn metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_ntn)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom24_reg_rf_ntn_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom24_reg_rf_ntn_dm)/ nr
    ftip = AREA(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_rf_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_rf_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_mx fmom24_mx_reg mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    dmflag = 0
]
DEVICE cfmom_mx fmom24_mx_reg_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx_4t fmom24_mx_reg_4t mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
]
DEVICE cfmom_wo_mx fmom24_mx_reg_nw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom24_mx_reg_nw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    shield = 1
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom24_mx_reg_pw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom24_mx_reg_pw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    shield = 2
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom24_mx_reg_ntn mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom24_mx_reg_ntn_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom24_mx_aux> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = AREA(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 4
    shield = 3
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]











mom25_idt = MOM_field5 NOT MOM_field4




fmom25_reg1           = mom25_5 NOT INTERACT MOMDMY22
fmom25_reg2           = fmom25_reg1 NOT INTERACT mom25_idt    // No cross finger
fmom25_reg3           = fmom25_reg2 INTERACT MOMDMY100
fmom25_reg4           = fmom25_reg3 NOT INTERACT RFDMY
fmom25_reg5           = fmom25_reg4 NOT INTERACT MOMDMY_2T


fmom25_reg6           = fmom25_reg5 NOT INTERACT MOMDMY31
fmom25_reg7           = fmom25_reg6 NOT INTERACT MOMDMY32
fmom25_reg8           = fmom25_reg7 NOT INTERACT MOMDMY33
fmom25_reg9           = fmom25_reg8 INTERACT poly
fmom25_reg            = fmom25_reg9 NOT INTERACT MOM_dmetal1_1        // FMOM 3T wi N+poly shield wo DM
fmom25_reg_dm         = fmom25_reg9 INTERACT MOM_dmetal1_1			// FMOM 3T wi N+poly shield wi DM
fmom25_reg_npo        = fmom25_reg3 NOT INTERACT MOMDMY0
fmom25_reg_npo_wo     = fmom25_reg_npo INTERACT RPO
fmom25_reg_npo_2t     = fmom25_reg_npo INTERACT MOMDMY_2T

fmom25_reg_2t1        = fmom25_reg_npo_2t NOT INTERACT MOMDMY31
fmom25_reg_2t2        = fmom25_reg_2t1 NOT INTERACT MOMDMY32
fmom25_reg_2t         = fmom25_reg_2t2 NOT INTERACT MOMDMY33	      // FMOM 2T
                              
fmom25_reg_nw1        = fmom25_reg_npo_wo INTERACT MOMDMY31
fmom25_reg_nw2        = fmom25_reg_nw1 INTERACT fmom25_reg5
fmom25_reg_nw3        = fmom25_reg_nw2 INTERACT nxwell
fmom25_reg_nw         = fmom25_reg_nw3 NOT INTERACT MOM_dmetal1_1	// FMOM 3T wi NW shield wo DM
fmom25_reg_nw_dm      = fmom25_reg_nw3 INTERACT MOM_dmetal1_1		// FMOM 3T wi NW shield wi DM
                              
fmom25_reg_pw1        = fmom25_reg_npo_wo INTERACT MOMDMY32
fmom25_reg_pw2        = fmom25_reg_pw1 INTERACT fmom25_reg6
fmom25_reg_pw3        = fmom25_reg_pw2 INTERACT psub

fmom25_reg_pw        = fmom25_reg_pw3 NOT INTERACT MOM_dmetal1_1	// FMOM 3T wi PSUB shield wo DM
fmom25_reg_pw_dm      = fmom25_reg_pw3 INTERACT MOM_dmetal1_1		// FMOM 3T wi PSUB shield wi DM

fmom25_reg_ntn1       = fmom25_reg_npo_wo INTERACT MOMDMY33
fmom25_reg_ntn2       = fmom25_reg_ntn1 INTERACT fmom25_reg7
fmom25_reg_ntn3       = fmom25_reg_ntn2 INTERACT NT_N

fmom25_reg_ntn4       = fmom25_reg_ntn3 NOT INTERACT MOMDMY28

fmom25_reg_ntn        = fmom25_reg_ntn4 NOT INTERACT MOM_dmetal1_1   // FMOM 3T wi NTN shield wo DM
fmom25_reg_ntn_dm     = fmom25_reg_ntn4 INTERACT MOM_dmetal1_1		// FMOM 3T wi NTN shield wi DM

fmom25_reg_ntn_wo_pring1    = fmom25_reg_ntn3 INTERACT MOMDMY28

fmom25_reg_ntn_wo_pring     = fmom25_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom25_reg_ntn_wo_pring_dm     = fmom25_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM


fmom25_mx_reg1        = MOMDMY22 INTERACT mom25_5
fmom25_mx_reg2        = fmom25_mx_reg1 NOT INTERACT mom25_idt
fmom25_mx_reg3        = fmom25_mx_reg2 INTERACT MOMDMY100
fmom25_mx_reg4        = fmom25_mx_reg3 NOT INTERACT MOMDMY_2T
fmom25_mx_reg5        = fmom25_mx_reg4 NOT INTERACT MOMDMY31
fmom25_mx_reg6        = fmom25_mx_reg5 NOT INTERACT MOMDMY32
fmom25_mx_reg7        = fmom25_mx_reg6 NOT INTERACT MOMDMY33
                              
fmom25_mx_reg8        = fmom25_mx_reg7 INTERACT poly
fmom25_mx_reg         = fmom25_mx_reg8 NOT INTERACT MOM_dmetal1_1	// FMOM MX 5T wi poly shield wo DM
fmom25_mx_reg_dm      = fmom25_mx_reg8 INTERACT MOM_dmetal1_1		// FMOM MX 5T wi poly shield wi DM
fmom25_mx_reg_npo1    = fmom25_mx_reg3 NOT INTERACT MOMDMY0
fmom25_mx_reg_npo_wo  = fmom25_mx_reg_npo1 INTERACT RPO
fmom25_mx_reg_npo_4t  = fmom25_mx_reg_npo1 INTERACT MOMDMY_2T

fmom25_mx_reg_4t1     = fmom25_mx_reg_npo_4t NOT INTERACT MOMDMY31
fmom25_mx_reg_4t2     = fmom25_mx_reg_4t1 NOT INTERACT MOMDMY32
fmom25_mx_reg_4t      = fmom25_mx_reg_4t2 NOT INTERACT MOMDMY33           // FMOM MX 4T

fmom25_mx_reg_nw1     = fmom25_mx_reg_npo_wo INTERACT MOMDMY31
fmom25_mx_reg_nw2     = fmom25_mx_reg_nw1 INTERACT fmom25_mx_reg4
fmom25_mx_reg_nw3     = fmom25_mx_reg_nw2 INTERACT nxwell
fmom25_mx_reg_nw      = fmom25_mx_reg_nw3 NOT INTERACT MOM_dmetal1_1 // FMOM 5T wi NW shield wo DM
fmom25_mx_reg_nw_dm   = fmom25_mx_reg_nw3 INTERACT MOM_dmetal1_1		// FMOM 5T wi NW shield wi DM

fmom25_mx_reg_pw1     = fmom25_mx_reg_npo_wo INTERACT MOMDMY32
fmom25_mx_reg_pw2     = fmom25_mx_reg_pw1 INTERACT fmom25_mx_reg5
fmom25_mx_reg_pw3     = fmom25_mx_reg_pw2 INTERACT psub

fmom25_mx_reg_pw      = fmom25_mx_reg_pw3 NOT INTERACT MOM_dmetal1_1 // FMOM 5T wi PSUB shield wo DM
fmom25_mx_reg_pw_dm       = fmom25_mx_reg_pw3 INTERACT MOM_dmetal1_1		// FMOM 5T wi PSUB shield wi DM

fmom25_mx_reg_ntn1    = fmom25_mx_reg_npo_wo INTERACT MOMDMY33
fmom25_mx_reg_ntn2    = fmom25_mx_reg_ntn1 INTERACT fmom25_mx_reg6
fmom25_mx_reg_ntn3    = fmom25_mx_reg_ntn2 INTERACT NT_N

fmom25_mx_reg_ntn     = fmom25_mx_reg_ntn3 NOT INTERACT MOM_dmetal1_1	// FMOM 5T wi NTN shield wo DM
fmom25_mx_reg_ntn_dm      = fmom25_mx_reg_ntn3 INTERACT MOM_dmetal1_1		// FMOM 5T wi NTN shield wi DM

fmom25_reg_rf1        = mom25_5 INTERACT RFDMY
fmom25_reg_rf2        = fmom25_reg_rf1 NOT INTERACT mom25_idt    // No cross finger
fmom25_reg_rf3        = fmom25_reg_rf2 INTERACT MOMDMY100
fmom25_reg_rf4        = fmom25_reg_rf3 NOT INTERACT MOMDMY22
fmom25_reg_rf5        = fmom25_reg_rf4 NOT INTERACT MOMDMY_2T
fmom25_reg_rf6        = fmom25_reg_rf5 NOT INTERACT MOMDMY31
fmom25_reg_rf7        = fmom25_reg_rf6 NOT INTERACT MOMDMY32
fmom25_reg_rf8        = fmom25_reg_rf7 NOT INTERACT MOMDMY33
                              
fmom25_reg_rf9        = fmom25_reg_rf8 INTERACT poly
fmom25_reg_rf10       = fmom25_reg_rf9 NOT RFDMY67G
fmom25_reg_rf         = fmom25_reg_rf10 NOT INTERACT MOM_dmetal1_1   // RF FMOM 3T wi poly shield wo DM
fmom25_reg_rf_dm      = fmom25_reg_rf10 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi poly shield wi DM
fmom25_reg_rf_67g     = fmom25_reg_rf9 AND RFDMY67G

fmom25_reg_rf_npo1    = fmom25_reg_rf4 NOT INTERACT MOMDMY0
fmom25_reg_rf_npo_wo  = fmom25_reg_rf_npo1 INTERACT RPO
fmom25_reg_rf_npo_2t  = fmom25_reg_rf_npo1 INTERACT MOMDMY_2T
                              
fmom25_reg_rf_2t1     = fmom25_reg_rf_npo_2t NOT INTERACT MOMDMY31
fmom25_reg_rf_2t2     = fmom25_reg_rf_2t1 NOT INTERACT MOMDMY32
fmom25_reg_rf_2t      = fmom25_reg_rf_2t2 NOT INTERACT MOMDMY33	    // RF FMOM 2T
                              
fmom25_reg_rf_nw1     = fmom25_reg_rf_npo_wo INTERACT MOMDMY31
fmom25_reg_rf_nw2     = fmom25_reg_rf_nw1 INTERACT fmom25_reg_rf5
fmom25_reg_rf_nw3     = fmom25_reg_rf_nw2 INTERACT nxwell
fmom25_reg_rf_nw      = fmom25_reg_rf_nw3 NOT INTERACT MOM_dmetal1_1 // RF FMOM 3T wi NW shield wo DM
fmom25_reg_rf_nw_dm   = fmom25_reg_rf_nw3 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi NW shield wi DM
fmom25_reg_rf_pw1     = fmom25_reg_rf_npo_wo INTERACT MOMDMY32
fmom25_reg_rf_pw2     = fmom25_reg_rf_pw1 INTERACT fmom25_reg_rf6
fmom25_reg_rf_pw3     = fmom25_reg_rf_pw2 INTERACT psub

fmom25_reg_rf_pw      = fmom25_reg_rf_pw3 NOT INTERACT MOM_dmetal1_1 // RF FMOM 3T wi PSUB shield wo DM
fmom25_reg_rf_pw_dm       = fmom25_reg_rf_pw3 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi PSUB shield wi DM

fmom25_reg_rf_ntn1    = fmom25_reg_rf_npo_wo INTERACT MOMDMY33
fmom25_reg_rf_ntn2    = fmom25_reg_rf_ntn1 INTERACT fmom25_reg_rf7
fmom25_reg_rf_ntn3    = fmom25_reg_rf_ntn2 INTERACT NT_N

fmom25_reg_rf_ntn     = fmom25_reg_rf_ntn3 NOT INTERACT MOM_dmetal1_1	// RF FMOM 3T wi NTN shield wo DM
fmom25_reg_rf_ntn_dm      = fmom25_reg_rf_ntn3 INTERACT MOM_dmetal1_1		// RF FMOM 3T wi NTN shield wi DM




mom25_extc   = FM_tip5 NOT INTERACT MOM_field5 > 2



DEVICE cfmom fmom25_reg metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom25_reg_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom25_reg_2t metal5(PLUS) metal5(MINUS) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_2t)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
]

DEVICE cfmom_rf fmom25_reg_rf metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    dmflag = 0
]
DEVICE cfmom_rf fmom25_reg_rf_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_rf_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_wo fmom25_reg_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_nw)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_nw_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_nw_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom25_reg_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_pw)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_pw_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_pw_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom25_reg_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_ntn)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_ntn_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_ntn_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom25_reg_ntn_wo_pring metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_ntn_wo_pring)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_ntn_wo_pring_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_ntn_wo_pring_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 4
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_wo_rf fmom25_reg_rf_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_nw)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom25_reg_rf_nw_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_nw_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_rf_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom25_reg_rf_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_pw)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom25_reg_rf_pw_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_pw_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_rf_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom25_reg_rf_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_ntn)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom25_reg_rf_ntn_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom25_reg_rf_ntn_dm)/ nr
    ftip = AREA(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_rf_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_rf_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_mx fmom25_mx_reg mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    dmflag = 0
]
DEVICE cfmom_mx fmom25_mx_reg_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx_4t fmom25_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
]
DEVICE cfmom_wo_mx fmom25_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom25_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    shield = 1
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom25_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom25_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    shield = 2
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom25_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom25_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <MOM_hole2> <mom25_mx_aux> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = AREA(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 2
    spm = 5
    shield = 3
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]











mom35_idt = MOM_field5 NOT MOM_field4




fmom35_reg1           = mom35_5 NOT INTERACT MOMDMY22
fmom35_reg2           = fmom35_reg1 NOT INTERACT mom35_idt    // No cross finger
fmom35_reg3           = fmom35_reg2 INTERACT MOMDMY100
fmom35_reg4           = fmom35_reg3 NOT INTERACT RFDMY
fmom35_reg5           = fmom35_reg4 NOT INTERACT MOMDMY_2T


fmom35_reg6           = fmom35_reg5 NOT INTERACT MOMDMY31
fmom35_reg7           = fmom35_reg6 NOT INTERACT MOMDMY32
fmom35_reg8           = fmom35_reg7 NOT INTERACT MOMDMY33
fmom35_reg9           = fmom35_reg8 INTERACT poly
fmom35_reg            = fmom35_reg9 NOT INTERACT MOM_dmetal1_2        // FMOM 3T wi N+poly shield wo DM
fmom35_reg_dm         = fmom35_reg9 INTERACT MOM_dmetal1_2			// FMOM 3T wi N+poly shield wi DM
fmom35_reg_npo        = fmom35_reg3 NOT INTERACT MOMDMY0
fmom35_reg_npo_wo     = fmom35_reg_npo INTERACT RPO
fmom35_reg_npo_2t     = fmom35_reg_npo INTERACT MOMDMY_2T

fmom35_reg_2t1        = fmom35_reg_npo_2t NOT INTERACT MOMDMY31
fmom35_reg_2t2        = fmom35_reg_2t1 NOT INTERACT MOMDMY32
fmom35_reg_2t         = fmom35_reg_2t2 NOT INTERACT MOMDMY33	      // FMOM 2T
                              
fmom35_reg_nw1        = fmom35_reg_npo_wo INTERACT MOMDMY31
fmom35_reg_nw2        = fmom35_reg_nw1 INTERACT fmom35_reg5
fmom35_reg_nw3        = fmom35_reg_nw2 INTERACT nxwell
fmom35_reg_nw         = fmom35_reg_nw3 NOT INTERACT MOM_dmetal1_2	// FMOM 3T wi NW shield wo DM
fmom35_reg_nw_dm      = fmom35_reg_nw3 INTERACT MOM_dmetal1_2		// FMOM 3T wi NW shield wi DM
                              
fmom35_reg_pw1        = fmom35_reg_npo_wo INTERACT MOMDMY32
fmom35_reg_pw2        = fmom35_reg_pw1 INTERACT fmom35_reg6
fmom35_reg_pw3        = fmom35_reg_pw2 INTERACT psub

fmom35_reg_pw        = fmom35_reg_pw3 NOT INTERACT MOM_dmetal1_2	// FMOM 3T wi PSUB shield wo DM
fmom35_reg_pw_dm      = fmom35_reg_pw3 INTERACT MOM_dmetal1_2		// FMOM 3T wi PSUB shield wi DM

fmom35_reg_ntn1       = fmom35_reg_npo_wo INTERACT MOMDMY33
fmom35_reg_ntn2       = fmom35_reg_ntn1 INTERACT fmom35_reg7
fmom35_reg_ntn3       = fmom35_reg_ntn2 INTERACT NT_N

fmom35_reg_ntn4       = fmom35_reg_ntn3 NOT INTERACT MOMDMY28

fmom35_reg_ntn        = fmom35_reg_ntn4 NOT INTERACT MOM_dmetal1_2   // FMOM 3T wi NTN shield wo DM
fmom35_reg_ntn_dm     = fmom35_reg_ntn4 INTERACT MOM_dmetal1_2		// FMOM 3T wi NTN shield wi DM

fmom35_reg_ntn_wo_pring1    = fmom35_reg_ntn3 INTERACT MOMDMY28

fmom35_reg_ntn_wo_pring     = fmom35_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_2 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom35_reg_ntn_wo_pring_dm     = fmom35_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo ptap_ring wi DM


fmom35_mx_reg1        = MOMDMY22 INTERACT mom35_5
fmom35_mx_reg2        = fmom35_mx_reg1 NOT INTERACT mom35_idt
fmom35_mx_reg3        = fmom35_mx_reg2 INTERACT MOMDMY100
fmom35_mx_reg4        = fmom35_mx_reg3 NOT INTERACT MOMDMY_2T
fmom35_mx_reg5        = fmom35_mx_reg4 NOT INTERACT MOMDMY31
fmom35_mx_reg6        = fmom35_mx_reg5 NOT INTERACT MOMDMY32
fmom35_mx_reg7        = fmom35_mx_reg6 NOT INTERACT MOMDMY33
                              
fmom35_mx_reg8        = fmom35_mx_reg7 INTERACT poly
fmom35_mx_reg         = fmom35_mx_reg8 NOT INTERACT MOM_dmetal1_2	// FMOM MX 5T wi poly shield wo DM
fmom35_mx_reg_dm      = fmom35_mx_reg8 INTERACT MOM_dmetal1_2		// FMOM MX 5T wi poly shield wi DM
fmom35_mx_reg_npo1    = fmom35_mx_reg3 NOT INTERACT MOMDMY0
fmom35_mx_reg_npo_wo  = fmom35_mx_reg_npo1 INTERACT RPO
fmom35_mx_reg_npo_4t  = fmom35_mx_reg_npo1 INTERACT MOMDMY_2T

fmom35_mx_reg_4t1     = fmom35_mx_reg_npo_4t NOT INTERACT MOMDMY31
fmom35_mx_reg_4t2     = fmom35_mx_reg_4t1 NOT INTERACT MOMDMY32
fmom35_mx_reg_4t      = fmom35_mx_reg_4t2 NOT INTERACT MOMDMY33           // FMOM MX 4T

fmom35_mx_reg_nw1     = fmom35_mx_reg_npo_wo INTERACT MOMDMY31
fmom35_mx_reg_nw2     = fmom35_mx_reg_nw1 INTERACT fmom35_mx_reg4
fmom35_mx_reg_nw3     = fmom35_mx_reg_nw2 INTERACT nxwell
fmom35_mx_reg_nw      = fmom35_mx_reg_nw3 NOT INTERACT MOM_dmetal1_2 // FMOM 5T wi NW shield wo DM
fmom35_mx_reg_nw_dm   = fmom35_mx_reg_nw3 INTERACT MOM_dmetal1_2		// FMOM 5T wi NW shield wi DM

fmom35_mx_reg_pw1     = fmom35_mx_reg_npo_wo INTERACT MOMDMY32
fmom35_mx_reg_pw2     = fmom35_mx_reg_pw1 INTERACT fmom35_mx_reg5
fmom35_mx_reg_pw3     = fmom35_mx_reg_pw2 INTERACT psub

fmom35_mx_reg_pw      = fmom35_mx_reg_pw3 NOT INTERACT MOM_dmetal1_2 // FMOM 5T wi PSUB shield wo DM
fmom35_mx_reg_pw_dm       = fmom35_mx_reg_pw3 INTERACT MOM_dmetal1_2		// FMOM 5T wi PSUB shield wi DM

fmom35_mx_reg_ntn1    = fmom35_mx_reg_npo_wo INTERACT MOMDMY33
fmom35_mx_reg_ntn2    = fmom35_mx_reg_ntn1 INTERACT fmom35_mx_reg6
fmom35_mx_reg_ntn3    = fmom35_mx_reg_ntn2 INTERACT NT_N

fmom35_mx_reg_ntn     = fmom35_mx_reg_ntn3 NOT INTERACT MOM_dmetal1_2	// FMOM 5T wi NTN shield wo DM
fmom35_mx_reg_ntn_dm      = fmom35_mx_reg_ntn3 INTERACT MOM_dmetal1_2		// FMOM 5T wi NTN shield wi DM

fmom35_reg_rf1        = mom35_5 INTERACT RFDMY
fmom35_reg_rf2        = fmom35_reg_rf1 NOT INTERACT mom35_idt    // No cross finger
fmom35_reg_rf3        = fmom35_reg_rf2 INTERACT MOMDMY100
fmom35_reg_rf4        = fmom35_reg_rf3 NOT INTERACT MOMDMY22
fmom35_reg_rf5        = fmom35_reg_rf4 NOT INTERACT MOMDMY_2T
fmom35_reg_rf6        = fmom35_reg_rf5 NOT INTERACT MOMDMY31
fmom35_reg_rf7        = fmom35_reg_rf6 NOT INTERACT MOMDMY32
fmom35_reg_rf8        = fmom35_reg_rf7 NOT INTERACT MOMDMY33
                              
fmom35_reg_rf9        = fmom35_reg_rf8 INTERACT poly
fmom35_reg_rf10       = fmom35_reg_rf9 NOT RFDMY67G
fmom35_reg_rf         = fmom35_reg_rf10 NOT INTERACT MOM_dmetal1_2   // RF FMOM 3T wi poly shield wo DM
fmom35_reg_rf_dm      = fmom35_reg_rf10 INTERACT MOM_dmetal1_2		// RF FMOM 3T wi poly shield wi DM
fmom35_reg_rf_67g     = fmom35_reg_rf9 AND RFDMY67G

fmom35_reg_rf_npo1    = fmom35_reg_rf4 NOT INTERACT MOMDMY0
fmom35_reg_rf_npo_wo  = fmom35_reg_rf_npo1 INTERACT RPO
fmom35_reg_rf_npo_2t  = fmom35_reg_rf_npo1 INTERACT MOMDMY_2T
                              
fmom35_reg_rf_2t1     = fmom35_reg_rf_npo_2t NOT INTERACT MOMDMY31
fmom35_reg_rf_2t2     = fmom35_reg_rf_2t1 NOT INTERACT MOMDMY32
fmom35_reg_rf_2t      = fmom35_reg_rf_2t2 NOT INTERACT MOMDMY33	    // RF FMOM 2T
                              
fmom35_reg_rf_nw1     = fmom35_reg_rf_npo_wo INTERACT MOMDMY31
fmom35_reg_rf_nw2     = fmom35_reg_rf_nw1 INTERACT fmom35_reg_rf5
fmom35_reg_rf_nw3     = fmom35_reg_rf_nw2 INTERACT nxwell
fmom35_reg_rf_nw      = fmom35_reg_rf_nw3 NOT INTERACT MOM_dmetal1_2 // RF FMOM 3T wi NW shield wo DM
fmom35_reg_rf_nw_dm   = fmom35_reg_rf_nw3 INTERACT MOM_dmetal1_2		// RF FMOM 3T wi NW shield wi DM
fmom35_reg_rf_pw1     = fmom35_reg_rf_npo_wo INTERACT MOMDMY32
fmom35_reg_rf_pw2     = fmom35_reg_rf_pw1 INTERACT fmom35_reg_rf6
fmom35_reg_rf_pw3     = fmom35_reg_rf_pw2 INTERACT psub

fmom35_reg_rf_pw      = fmom35_reg_rf_pw3 NOT INTERACT MOM_dmetal1_2 // RF FMOM 3T wi PSUB shield wo DM
fmom35_reg_rf_pw_dm       = fmom35_reg_rf_pw3 INTERACT MOM_dmetal1_2		// RF FMOM 3T wi PSUB shield wi DM

fmom35_reg_rf_ntn1    = fmom35_reg_rf_npo_wo INTERACT MOMDMY33
fmom35_reg_rf_ntn2    = fmom35_reg_rf_ntn1 INTERACT fmom35_reg_rf7
fmom35_reg_rf_ntn3    = fmom35_reg_rf_ntn2 INTERACT NT_N

fmom35_reg_rf_ntn     = fmom35_reg_rf_ntn3 NOT INTERACT MOM_dmetal1_2	// RF FMOM 3T wi NTN shield wo DM
fmom35_reg_rf_ntn_dm      = fmom35_reg_rf_ntn3 INTERACT MOM_dmetal1_2		// RF FMOM 3T wi NTN shield wi DM




mom35_extc   = FM_tip5 NOT INTERACT MOM_field5 > 2



DEVICE cfmom fmom35_reg metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom35_reg_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom35_reg_2t metal5(PLUS) metal5(MINUS) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_2t)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
]

DEVICE cfmom_rf fmom35_reg_rf metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    dmflag = 0
]
DEVICE cfmom_rf fmom35_reg_rf_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_rf_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_wo fmom35_reg_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_nw)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_nw_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_nw_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom35_reg_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_pw)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_pw_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_pw_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom35_reg_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_ntn_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom35_reg_ntn_wo_pring metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn_wo_pring)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_ntn_wo_pring_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn_wo_pring_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 4
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_wo_rf fmom35_reg_rf_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_nw)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom35_reg_rf_nw_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_nw_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_rf_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom35_reg_rf_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_pw)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom35_reg_rf_pw_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_pw_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_rf_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom35_reg_rf_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,ftip,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_ntn)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom35_reg_rf_ntn_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,ftip,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_rf_ntn_dm)/ nr
    ftip = AREA(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_rf_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_rf_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE cfmom_mx fmom35_mx_reg mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    dmflag = 0
]
DEVICE cfmom_mx fmom35_mx_reg_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx_4t fmom35_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
]
DEVICE cfmom_wo_mx fmom35_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom35_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    shield = 1
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom35_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom35_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    shield = 2
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom35_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w)/mf1
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom35_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <MOM_hole3> <mom35_mx_aux> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nr*mf1)
    ftip = AREA(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip 
    stm = 3
    spm = 5
    shield = 3
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.725e-6)
    ylen = moml + (2*0.87e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






TRACE PROPERTY cfmom nr nr 0
TRACE PROPERTY cfmom s  s MOM_Serr
TRACE PROPERTY cfmom w  w MOM_Werr
TRACE PROPERTY cfmom lr  lr MOM_Lerr
TRACE PROPERTY cfmom stm stm 0
TRACE PROPERTY cfmom spm spm 0
TRACE PROPERTY cfmom ftip ftip 0
TRACE PROPERTY cfmom dmflag dmflag 0

TRACE PROPERTY cfmom_rf nr nr 0
TRACE PROPERTY cfmom_rf s  s MOM_Serr
TRACE PROPERTY cfmom_rf w  w MOM_Werr
TRACE PROPERTY cfmom_rf lr  lr MOM_Lerr
TRACE PROPERTY cfmom_rf stm stm 0
TRACE PROPERTY cfmom_rf spm spm 0
TRACE PROPERTY cfmom_rf ftip ftip 0
TRACE PROPERTY cfmom_rf dmflag dmflag 0

TRACE PROPERTY cfmom_2t nr nr 0
TRACE PROPERTY cfmom_2t s  s MOM_Serr
TRACE PROPERTY cfmom_2t w  w MOM_Werr
TRACE PROPERTY cfmom_2t lr  lr MOM_Lerr
TRACE PROPERTY cfmom_2t stm stm 0
TRACE PROPERTY cfmom_2t spm spm 0
TRACE PROPERTY cfmom_2t ftip ftip 0

TRACE PROPERTY cfmom_wo nr nr 0
TRACE PROPERTY cfmom_wo s  s MOM_Serr
TRACE PROPERTY cfmom_wo w  w MOM_Werr
TRACE PROPERTY cfmom_wo lr  lr MOM_Lerr
TRACE PROPERTY cfmom_wo stm stm 0
TRACE PROPERTY cfmom_wo spm spm 0
TRACE PROPERTY cfmom_wo ftip ftip 0
TRACE PROPERTY cfmom_wo shield shield 0
TRACE PROPERTY cfmom_wo dmflag dmflag 0

TRACE PROPERTY cfmom_wo_rf nr nr 0
TRACE PROPERTY cfmom_wo_rf s  s MOM_Serr
TRACE PROPERTY cfmom_wo_rf w  w MOM_Werr
TRACE PROPERTY cfmom_wo_rf lr  lr MOM_Lerr
TRACE PROPERTY cfmom_wo_rf stm stm 0
TRACE PROPERTY cfmom_wo_rf spm spm 0
TRACE PROPERTY cfmom_wo_rf ftip ftip 0
TRACE PROPERTY cfmom_wo_rf shield shield 0
TRACE PROPERTY cfmom_wo_rf dmflag dmflag 0

TRACE PROPERTY cfmom_mx nr nr 0
TRACE PROPERTY cfmom_mx s  s MOM_Serr
TRACE PROPERTY cfmom_mx w  w MOM_Werr
TRACE PROPERTY cfmom_mx lr  lr MOM_Lerr
TRACE PROPERTY cfmom_mx stm stm 0
TRACE PROPERTY cfmom_mx spm spm 0
TRACE PROPERTY cfmom_mx ftip ftip 0
TRACE PROPERTY cfmom_mx dmflag dmflag 0
TRACE PROPERTY cfmom_mx multi multi 0

TRACE PROPERTY cfmom_mx_4t nr nr 0
TRACE PROPERTY cfmom_mx_4t s  s MOM_Serr
TRACE PROPERTY cfmom_mx_4t w  w MOM_Werr
TRACE PROPERTY cfmom_mx_4t lr  lr MOM_Lerr
TRACE PROPERTY cfmom_mx_4t stm stm 0
TRACE PROPERTY cfmom_mx_4t spm spm 0
TRACE PROPERTY cfmom_mx_4t ftip ftip 0
TRACE PROPERTY cfmom_mx_4t multi multi 0

TRACE PROPERTY cfmom_wo_mx nr nr 0
TRACE PROPERTY cfmom_wo_mx s  s MOM_Serr
TRACE PROPERTY cfmom_wo_mx w  w MOM_Werr
TRACE PROPERTY cfmom_wo_mx lr  lr MOM_Lerr
TRACE PROPERTY cfmom_wo_mx stm stm 0
TRACE PROPERTY cfmom_wo_mx spm spm 0
TRACE PROPERTY cfmom_wo_mx ftip ftip 0
TRACE PROPERTY cfmom_wo_mx shield shield 0
TRACE PROPERTY cfmom_wo_mx dmflag dmflag 0
TRACE PROPERTY cfmom_wo_mx multi multi 0






//

//

//

//

//

//

//

dmetal1_a = ( M1 NOT INTERACT CO ) NOT INTERACT VIA1
dmetal1 = dmetal1_a INTERACT MOMDMY_all
dmetal2_a = ( M2 NOT INTERACT VIA1 ) NOT INTERACT VIA2
dmetal2 = dmetal2_a INTERACT MOMDMY_all
dmetal3_a = ( M3 NOT INTERACT VIA2 ) NOT INTERACT VIA3
dmetal3 = dmetal3_a INTERACT MOMDMY_all
dmetal4_a = ( M4 NOT INTERACT VIA3 ) NOT INTERACT VIA4
dmetal4 = dmetal4_a INTERACT MOMDMY_all
dmetal5_a = ( M5 NOT INTERACT VIA4 ) NOT INTERACT VIA5
dmetal5 = dmetal5_a INTERACT MOMDMY_all
dmetal6 = ( M6 NOT INTERACT VIA5 ) NOT INTERACT RV
MOM_dmetal1_0 = MOMDMY100 NOT ( SIZE MOMDMY100 BY 0.005 )


F_reg1a = EXT MOM_field1 < 0.19 OPPOSITE REGION
F_reg1b = ( F_reg1a AND MOMDMY1 ) NOT M1
F_reg1  = F_reg1b INTERACT MOM_field1 == 2
F_regn1 = ( MOMDMY1 NOT MOM_field1 ) NOT F_reg1

MOM_dmetal1   = M1 INTERACT MOMDMY_all 
MOM_dmetal1_1 = MOM_dmetal1_0 OR MOM_dmetal1
F_reg2a = EXT MOM_field2 < 0.19 OPPOSITE REGION
F_reg2b = ( F_reg2a AND MOMDMY2 ) NOT M2
F_reg2  = F_reg2b INTERACT MOM_field2 == 2
F_regn2 = ( MOMDMY2 NOT MOM_field2 ) NOT F_reg2

MOM_dmetal2   = M2 INTERACT MOMDMY_all 
MOM_dmetal1_2 = MOM_dmetal1_1 OR MOM_dmetal2
F_reg3a = EXT MOM_field3 < 0.19 OPPOSITE REGION
F_reg3b = ( F_reg3a AND MOMDMY3 ) NOT M3
F_reg3  = F_reg3b INTERACT MOM_field3 == 2
F_regn3 = ( MOMDMY3 NOT MOM_field3 ) NOT F_reg3

MOM_dmetal3   = M3 INTERACT MOMDMY_all 
MOM_dmetal1_3 = MOM_dmetal1_2 OR MOM_dmetal3
F_reg4a = EXT MOM_field4 < 0.19 OPPOSITE REGION
F_reg4b = ( F_reg4a AND MOMDMY4 ) NOT M4
F_reg4  = F_reg4b INTERACT MOM_field4 == 2
F_regn4 = ( MOMDMY4 NOT MOM_field4 ) NOT F_reg4

MOM_dmetal4   = M4 INTERACT MOMDMY_all 
MOM_dmetal1_4 = MOM_dmetal1_3 OR MOM_dmetal4
F_reg5a = EXT MOM_field5 < 0.19 OPPOSITE REGION
F_reg5b = ( F_reg5a AND MOMDMY5 ) NOT M5
F_reg5  = F_reg5b INTERACT MOM_field5 == 2
F_regn5 = ( MOMDMY5 NOT MOM_field5 ) NOT F_reg5

MOM_dmetal5   = M5 INTERACT MOMDMY_all 
MOM_dmetal1_5 = MOM_dmetal1_4 OR MOM_dmetal5





mom13_1 = MOMDMY3 INTERACT MOM_field1

mom13_2 = mom13_1 INTERACT MOM_field2

mom13_3 = mom13_2 INTERACT MOM_field3


mom13_Left4 = mom13_3 NOT INTERACT MOM_field4
mom13_Left5 = mom13_Left4 NOT INTERACT MOM_field5

mom13_reg1          = mom13_Left5 NOT MOMDMY22
mom13_reg2          = mom13_reg1 NOT INTERACT MOMDMY100
mom13_reg3          = mom13_reg2 NOT INTERACT RFDMY
mom13_reg4          = mom13_reg3 INTERACT poly
mom13_reg5          = mom13_reg4 NOT INTERACT MOMDMY_2T
mom13_reg           = mom13_reg5 NOT INTERACT MOM_dmetal1_0
mom13_reg_npo_wo    = mom13_reg3 INTERACT RPO
mom13_reg_npo_2t    = mom13_reg2 INTERACT MOMDMY_2T
mom13_reg_2t1       = mom13_reg_npo_2t NOT INTERACT MOMDMY31
mom13_reg_2t2       = mom13_reg_2t1 NOT INTERACT MOMDMY32
mom13_reg_2t        = mom13_reg_2t2 NOT INTERACT MOMDMY33
mom13_reg_nw1       = mom13_reg_npo_wo INTERACT MOMDMY31
mom13_reg_nw2       = mom13_reg_nw1 INTERACT nxwell
mom13_reg_nw        = mom13_reg_nw2 NOT INTERACT MOM_dmetal1_0
mom13_reg_pw1       = mom13_reg_npo_wo INTERACT MOMDMY32
mom13_reg_pw2       = mom13_reg_pw1 INTERACT psub

mom13_reg_pw        = mom13_reg_pw2 NOT INTERACT MOM_dmetal1_0
mom13_reg_ntn1      = mom13_reg_npo_wo INTERACT MOMDMY33
mom13_reg_ntn2      = mom13_reg_ntn1 INTERACT NT_N

mom13_reg_ntn       = mom13_reg_ntn2 NOT INTERACT MOM_dmetal1_0
mom13_reg_rf1       = mom13_Left5 INTERACT RFDMY
mom13_reg_rf2       = mom13_reg_rf1 NOT INTERACT MOMDMY100
mom13_reg_rf3       = mom13_reg_rf2 NOT MOMDMY22 
mom13_reg_rf4       = mom13_reg_rf3 INTERACT poly
mom13_reg_rf5       = mom13_reg_rf4 NOT INTERACT MOMDMY_2T
mom13_reg_rf6       = mom13_reg_rf5 NOT RFDMY67G
mom13_reg_rf        = mom13_reg_rf6 NOT INTERACT MOM_dmetal1_0
mom13_reg_rf_67g1   = mom13_reg_rf5 AND RFDMY67G
mom13_reg_rf_67g    = mom13_reg_rf_67g1 NOT INTERACT MOM_dmetal1_0

mom13_reg_npo_rf1   = mom13_reg_rf3 NOT INTERACT MOMDMY100
mom13_reg_npo_rf_wo = mom13_reg_npo_rf1 INTERACT RPO
mom13_reg_rf_2t1    = mom13_reg_npo_rf1 NOT INTERACT MOMDMY31
mom13_reg_rf_2t2    = mom13_reg_rf_2t1 NOT INTERACT MOMDMY32
mom13_reg_rf_2t     = mom13_reg_rf_2t2 NOT INTERACT MOMDMY33
mom13_reg_nw_rf1    = mom13_reg_npo_rf_wo INTERACT MOMDMY31
mom13_reg_nw_rf2    = mom13_reg_nw_rf1 INTERACT nxwell
mom13_reg_nw_rf     = mom13_reg_nw_rf2 NOT INTERACT MOM_dmetal1_0
mom13_reg_pw_rf1    = mom13_reg_npo_rf_wo INTERACT MOMDMY32
mom13_reg_pw_rf2    = mom13_reg_pw_rf1 INTERACT psub

mom13_reg_pw_rf     = mom13_reg_pw_rf2 NOT INTERACT MOM_dmetal1_0

mom13_reg_ntn_rf1   = mom13_reg_npo_rf_wo INTERACT MOMDMY33
mom13_reg_ntn_rf2   = mom13_reg_ntn_rf1 INTERACT NT_N

mom13_reg_ntn_rf      = mom13_reg_ntn_rf2 NOT INTERACT MOM_dmetal1_0
mom13_mx_reg1       = MOMDMY22 INTERACT mom13_Left5
mom13_mx_reg2       = mom13_mx_reg1 NOT INTERACT RFDMY
mom13_mx_reg3       = mom13_mx_reg2 NOT INTERACT MOMDMY100
mom13_mx_reg4       = mom13_mx_reg3 INTERACT poly_mom
mom13_mx_reg5       = mom13_mx_reg4 NOT INTERACT MOMDMY_2T
mom13_mx_reg        = mom13_mx_reg5 NOT INTERACT MOM_dmetal1_0
mom13_mx_reg_npo_wo = mom13_mx_reg3 INTERACT RPO
mom13_mx_reg_npo_4t = mom13_mx_reg3 INTERACT MOMDMY_2T
mom13_mx_reg_4t1    = mom13_mx_reg_npo_4t NOT INTERACT MOMDMY31
mom13_mx_reg_4t2    = mom13_mx_reg_4t1 NOT INTERACT MOMDMY32
mom13_mx_reg_4t     = mom13_mx_reg_4t2 NOT INTERACT MOMDMY33
mom13_mx_reg_nw1    = mom13_mx_reg_npo_wo INTERACT MOMDMY31
mom13_mx_reg_nw2    = mom13_mx_reg_nw1 INTERACT nxwell
mom13_mx_reg_nw     = mom13_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0
mom13_mx_reg_pw1    = mom13_mx_reg_npo_wo INTERACT MOMDMY32
mom13_mx_reg_pw2    = mom13_mx_reg_pw1 INTERACT psub

mom13_mx_reg_pw     = mom13_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0
mom13_mx_reg_ntn1   = mom13_mx_reg_npo_wo INTERACT MOMDMY33
mom13_mx_reg_ntn2   = mom13_mx_reg_ntn1 INTERACT NT_N

mom13_mx_reg_ntn     = mom13_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0
mom13_mx_aux = mom13_Left5 AND MOMDMY22

mom13_ext1 = F_regn1 NOT INTERACT MOM_field1 > 2
mom13_exta = mom13_ext1 AND MOM_field2
mom13_extb = F_regn2 AND MOM_field1

DEVICE crtmom mom13_reg metal3(PLUS) metal3(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]

DEVICE crtmom_wo mom13_reg_nw metal3(PLUS) metal3(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_nw)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo mom13_reg_pw metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_pw)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo mom13_reg_ntn metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_ntn)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]


DEVICE crtmom_2t mom13_reg_2t metal3(PLUS) metal3(MINUS) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_2t)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
]


DEVICE crtmom_rf mom13_reg_rf metal3(PLUS) metal3(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]

DEVICE crtmom_wo_rf mom13_reg_nw_rf metal3(PLUS) metal3(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_nw_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_rf mom13_reg_pw_rf metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_pw_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_rf mom13_reg_ntn_rf metal3(PLUS) metal3(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_exta> <mom13_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom13_reg_ntn_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]



DEVICE crtmom_mx mom13_mx_reg mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) poly_mom(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_mx_aux> <mom13_exta> <mom13_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    dmflag = 0
]

DEVICE crtmom_wo_mx mom13_mx_reg_nw mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_mx_aux> <mom13_exta> <mom13_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_mx mom13_mx_reg_pw mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_mx_aux> <mom13_exta> <mom13_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_mx mom13_mx_reg_ntn mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom13_mx_aux> <mom13_exta> <mom13_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    dmflag = 0
]


DEVICE crtmom_mx_4t mom13_mx_reg_4t mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) <MOM_field1> <MOM_field2> <F_reg1> <mom13_mx_aux> <mom13_exta> <mom13_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip
    mf1 = count(mom13_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom13_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 3
    Aw  = ( Area(mom13_exta) + Area(mom13_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
]







mom14_1 = MOMDMY4 INTERACT MOM_field1

mom14_2 = mom14_1 INTERACT MOM_field2

mom14_3 = mom14_2 INTERACT MOM_field3

mom14_4 = mom14_3 INTERACT MOM_field4


mom14_Left5 = mom14_4 NOT INTERACT MOM_field5

mom14_reg1          = mom14_Left5 NOT MOMDMY22
mom14_reg2          = mom14_reg1 NOT INTERACT MOMDMY100
mom14_reg3          = mom14_reg2 NOT INTERACT RFDMY
mom14_reg4          = mom14_reg3 INTERACT poly
mom14_reg5          = mom14_reg4 NOT INTERACT MOMDMY_2T
mom14_reg           = mom14_reg5 NOT INTERACT MOM_dmetal1_0
mom14_reg_npo_wo    = mom14_reg3 INTERACT RPO
mom14_reg_npo_2t    = mom14_reg2 INTERACT MOMDMY_2T
mom14_reg_2t1       = mom14_reg_npo_2t NOT INTERACT MOMDMY31
mom14_reg_2t2       = mom14_reg_2t1 NOT INTERACT MOMDMY32
mom14_reg_2t        = mom14_reg_2t2 NOT INTERACT MOMDMY33
mom14_reg_nw1       = mom14_reg_npo_wo INTERACT MOMDMY31
mom14_reg_nw2       = mom14_reg_nw1 INTERACT nxwell
mom14_reg_nw        = mom14_reg_nw2 NOT INTERACT MOM_dmetal1_0
mom14_reg_pw1       = mom14_reg_npo_wo INTERACT MOMDMY32
mom14_reg_pw2       = mom14_reg_pw1 INTERACT psub

mom14_reg_pw        = mom14_reg_pw2 NOT INTERACT MOM_dmetal1_0
mom14_reg_ntn1      = mom14_reg_npo_wo INTERACT MOMDMY33
mom14_reg_ntn2      = mom14_reg_ntn1 INTERACT NT_N

mom14_reg_ntn       = mom14_reg_ntn2 NOT INTERACT MOM_dmetal1_0
mom14_reg_rf1       = mom14_Left5 INTERACT RFDMY
mom14_reg_rf2       = mom14_reg_rf1 NOT INTERACT MOMDMY100
mom14_reg_rf3       = mom14_reg_rf2 NOT MOMDMY22 
mom14_reg_rf4       = mom14_reg_rf3 INTERACT poly
mom14_reg_rf5       = mom14_reg_rf4 NOT INTERACT MOMDMY_2T
mom14_reg_rf6       = mom14_reg_rf5 NOT RFDMY67G
mom14_reg_rf        = mom14_reg_rf6 NOT INTERACT MOM_dmetal1_0
mom14_reg_rf_67g1   = mom14_reg_rf5 AND RFDMY67G
mom14_reg_rf_67g    = mom14_reg_rf_67g1 NOT INTERACT MOM_dmetal1_0

mom14_reg_npo_rf1   = mom14_reg_rf3 NOT INTERACT MOMDMY100
mom14_reg_npo_rf_wo = mom14_reg_npo_rf1 INTERACT RPO
mom14_reg_rf_2t1    = mom14_reg_npo_rf1 NOT INTERACT MOMDMY31
mom14_reg_rf_2t2    = mom14_reg_rf_2t1 NOT INTERACT MOMDMY32
mom14_reg_rf_2t     = mom14_reg_rf_2t2 NOT INTERACT MOMDMY33
mom14_reg_nw_rf1    = mom14_reg_npo_rf_wo INTERACT MOMDMY31
mom14_reg_nw_rf2    = mom14_reg_nw_rf1 INTERACT nxwell
mom14_reg_nw_rf     = mom14_reg_nw_rf2 NOT INTERACT MOM_dmetal1_0
mom14_reg_pw_rf1    = mom14_reg_npo_rf_wo INTERACT MOMDMY32
mom14_reg_pw_rf2    = mom14_reg_pw_rf1 INTERACT psub

mom14_reg_pw_rf     = mom14_reg_pw_rf2 NOT INTERACT MOM_dmetal1_0

mom14_reg_ntn_rf1   = mom14_reg_npo_rf_wo INTERACT MOMDMY33
mom14_reg_ntn_rf2   = mom14_reg_ntn_rf1 INTERACT NT_N

mom14_reg_ntn_rf      = mom14_reg_ntn_rf2 NOT INTERACT MOM_dmetal1_0
mom14_mx_reg1       = MOMDMY22 INTERACT mom14_Left5
mom14_mx_reg2       = mom14_mx_reg1 NOT INTERACT RFDMY
mom14_mx_reg3       = mom14_mx_reg2 NOT INTERACT MOMDMY100
mom14_mx_reg4       = mom14_mx_reg3 INTERACT poly_mom
mom14_mx_reg5       = mom14_mx_reg4 NOT INTERACT MOMDMY_2T
mom14_mx_reg        = mom14_mx_reg5 NOT INTERACT MOM_dmetal1_0
mom14_mx_reg_npo_wo = mom14_mx_reg3 INTERACT RPO
mom14_mx_reg_npo_4t = mom14_mx_reg3 INTERACT MOMDMY_2T
mom14_mx_reg_4t1    = mom14_mx_reg_npo_4t NOT INTERACT MOMDMY31
mom14_mx_reg_4t2    = mom14_mx_reg_4t1 NOT INTERACT MOMDMY32
mom14_mx_reg_4t     = mom14_mx_reg_4t2 NOT INTERACT MOMDMY33
mom14_mx_reg_nw1    = mom14_mx_reg_npo_wo INTERACT MOMDMY31
mom14_mx_reg_nw2    = mom14_mx_reg_nw1 INTERACT nxwell
mom14_mx_reg_nw     = mom14_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0
mom14_mx_reg_pw1    = mom14_mx_reg_npo_wo INTERACT MOMDMY32
mom14_mx_reg_pw2    = mom14_mx_reg_pw1 INTERACT psub

mom14_mx_reg_pw     = mom14_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0
mom14_mx_reg_ntn1   = mom14_mx_reg_npo_wo INTERACT MOMDMY33
mom14_mx_reg_ntn2   = mom14_mx_reg_ntn1 INTERACT NT_N

mom14_mx_reg_ntn     = mom14_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0
mom14_mx_aux = mom14_Left5 AND MOMDMY22

mom14_ext1 = F_regn1 NOT INTERACT MOM_field1 > 2
mom14_exta = mom14_ext1 AND MOM_field2
mom14_extb = F_regn2 AND MOM_field1

DEVICE crtmom mom14_reg metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]

DEVICE crtmom_wo mom14_reg_nw metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_nw)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo mom14_reg_pw metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_pw)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo mom14_reg_ntn metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_ntn)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]


DEVICE crtmom_2t mom14_reg_2t metal4(PLUS) metal4(MINUS) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_2t)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
]


DEVICE crtmom_rf mom14_reg_rf metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]

DEVICE crtmom_wo_rf mom14_reg_nw_rf metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_nw_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_rf mom14_reg_pw_rf metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_pw_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_rf mom14_reg_ntn_rf metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_exta> <mom14_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom14_reg_ntn_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]



DEVICE crtmom_mx mom14_mx_reg mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) poly_mom(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_mx_aux> <mom14_exta> <mom14_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    dmflag = 0
]

DEVICE crtmom_wo_mx mom14_mx_reg_nw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_mx_aux> <mom14_exta> <mom14_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_mx mom14_mx_reg_pw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_mx_aux> <mom14_exta> <mom14_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_mx mom14_mx_reg_ntn mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom14_mx_aux> <mom14_exta> <mom14_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    dmflag = 0
]


DEVICE crtmom_mx_4t mom14_mx_reg_4t mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) <MOM_field1> <MOM_field2> <F_reg1> <mom14_mx_aux> <mom14_exta> <mom14_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip
    mf1 = count(mom14_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom14_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 4
    Aw  = ( Area(mom14_exta) + Area(mom14_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
]







mom15_1 = MOMDMY5 INTERACT MOM_field1

mom15_2 = mom15_1 INTERACT MOM_field2

mom15_3 = mom15_2 INTERACT MOM_field3

mom15_4 = mom15_3 INTERACT MOM_field4

mom15_5 = mom15_4 INTERACT MOM_field5



mom15_reg1          = mom15_5 NOT MOMDMY22
mom15_reg2          = mom15_reg1 NOT INTERACT MOMDMY100
mom15_reg3          = mom15_reg2 NOT INTERACT RFDMY
mom15_reg4          = mom15_reg3 INTERACT poly
mom15_reg5          = mom15_reg4 NOT INTERACT MOMDMY_2T
mom15_reg           = mom15_reg5 NOT INTERACT MOM_dmetal1_0
mom15_reg_npo_wo    = mom15_reg3 INTERACT RPO
mom15_reg_npo_2t    = mom15_reg2 INTERACT MOMDMY_2T
mom15_reg_2t1       = mom15_reg_npo_2t NOT INTERACT MOMDMY31
mom15_reg_2t2       = mom15_reg_2t1 NOT INTERACT MOMDMY32
mom15_reg_2t        = mom15_reg_2t2 NOT INTERACT MOMDMY33
mom15_reg_nw1       = mom15_reg_npo_wo INTERACT MOMDMY31
mom15_reg_nw2       = mom15_reg_nw1 INTERACT nxwell
mom15_reg_nw        = mom15_reg_nw2 NOT INTERACT MOM_dmetal1_0
mom15_reg_pw1       = mom15_reg_npo_wo INTERACT MOMDMY32
mom15_reg_pw2       = mom15_reg_pw1 INTERACT psub

mom15_reg_pw        = mom15_reg_pw2 NOT INTERACT MOM_dmetal1_0
mom15_reg_ntn1      = mom15_reg_npo_wo INTERACT MOMDMY33
mom15_reg_ntn2      = mom15_reg_ntn1 INTERACT NT_N

mom15_reg_ntn       = mom15_reg_ntn2 NOT INTERACT MOM_dmetal1_0
mom15_reg_rf1       = mom15_5 INTERACT RFDMY
mom15_reg_rf2       = mom15_reg_rf1 NOT INTERACT MOMDMY100
mom15_reg_rf3       = mom15_reg_rf2 NOT MOMDMY22 
mom15_reg_rf4       = mom15_reg_rf3 INTERACT poly
mom15_reg_rf5       = mom15_reg_rf4 NOT INTERACT MOMDMY_2T
mom15_reg_rf6       = mom15_reg_rf5 NOT RFDMY67G
mom15_reg_rf        = mom15_reg_rf6 NOT INTERACT MOM_dmetal1_0
mom15_reg_rf_67g1   = mom15_reg_rf5 AND RFDMY67G
mom15_reg_rf_67g    = mom15_reg_rf_67g1 NOT INTERACT MOM_dmetal1_0

mom15_reg_npo_rf1   = mom15_reg_rf3 NOT INTERACT MOMDMY100
mom15_reg_npo_rf_wo = mom15_reg_npo_rf1 INTERACT RPO
mom15_reg_rf_2t1    = mom15_reg_npo_rf1 NOT INTERACT MOMDMY31
mom15_reg_rf_2t2    = mom15_reg_rf_2t1 NOT INTERACT MOMDMY32
mom15_reg_rf_2t     = mom15_reg_rf_2t2 NOT INTERACT MOMDMY33
mom15_reg_nw_rf1    = mom15_reg_npo_rf_wo INTERACT MOMDMY31
mom15_reg_nw_rf2    = mom15_reg_nw_rf1 INTERACT nxwell
mom15_reg_nw_rf     = mom15_reg_nw_rf2 NOT INTERACT MOM_dmetal1_0
mom15_reg_pw_rf1    = mom15_reg_npo_rf_wo INTERACT MOMDMY32
mom15_reg_pw_rf2    = mom15_reg_pw_rf1 INTERACT psub

mom15_reg_pw_rf     = mom15_reg_pw_rf2 NOT INTERACT MOM_dmetal1_0

mom15_reg_ntn_rf1   = mom15_reg_npo_rf_wo INTERACT MOMDMY33
mom15_reg_ntn_rf2   = mom15_reg_ntn_rf1 INTERACT NT_N

mom15_reg_ntn_rf      = mom15_reg_ntn_rf2 NOT INTERACT MOM_dmetal1_0
mom15_mx_reg1       = MOMDMY22 INTERACT mom15_5
mom15_mx_reg2       = mom15_mx_reg1 NOT INTERACT RFDMY
mom15_mx_reg3       = mom15_mx_reg2 NOT INTERACT MOMDMY100
mom15_mx_reg4       = mom15_mx_reg3 INTERACT poly_mom
mom15_mx_reg5       = mom15_mx_reg4 NOT INTERACT MOMDMY_2T
mom15_mx_reg        = mom15_mx_reg5 NOT INTERACT MOM_dmetal1_0
mom15_mx_reg_npo_wo = mom15_mx_reg3 INTERACT RPO
mom15_mx_reg_npo_4t = mom15_mx_reg3 INTERACT MOMDMY_2T
mom15_mx_reg_4t1    = mom15_mx_reg_npo_4t NOT INTERACT MOMDMY31
mom15_mx_reg_4t2    = mom15_mx_reg_4t1 NOT INTERACT MOMDMY32
mom15_mx_reg_4t     = mom15_mx_reg_4t2 NOT INTERACT MOMDMY33
mom15_mx_reg_nw1    = mom15_mx_reg_npo_wo INTERACT MOMDMY31
mom15_mx_reg_nw2    = mom15_mx_reg_nw1 INTERACT nxwell
mom15_mx_reg_nw     = mom15_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0
mom15_mx_reg_pw1    = mom15_mx_reg_npo_wo INTERACT MOMDMY32
mom15_mx_reg_pw2    = mom15_mx_reg_pw1 INTERACT psub

mom15_mx_reg_pw     = mom15_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0
mom15_mx_reg_ntn1   = mom15_mx_reg_npo_wo INTERACT MOMDMY33
mom15_mx_reg_ntn2   = mom15_mx_reg_ntn1 INTERACT NT_N

mom15_mx_reg_ntn     = mom15_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0
mom15_mx_aux = mom15_5 AND MOMDMY22

mom15_ext1 = F_regn1 NOT INTERACT MOM_field1 > 2
mom15_exta = mom15_ext1 AND MOM_field2
mom15_extb = F_regn2 AND MOM_field1

DEVICE crtmom mom15_reg metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]

DEVICE crtmom_wo mom15_reg_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_nw)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo mom15_reg_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_pw)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo mom15_reg_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_ntn)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]


DEVICE crtmom_2t mom15_reg_2t metal5(PLUS) metal5(MINUS) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_2t)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
]


DEVICE crtmom_rf mom15_reg_rf metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]

DEVICE crtmom_wo_rf mom15_reg_nw_rf metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_nw_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_rf mom15_reg_pw_rf metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_pw_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_rf mom15_reg_ntn_rf metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_exta> <mom15_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field1)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom15_reg_ntn_rf)/ nh
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(nv-1)
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]



DEVICE crtmom_mx mom15_mx_reg mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_mx_aux> <mom15_exta> <mom15_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    dmflag = 0
]

DEVICE crtmom_wo_mx mom15_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_mx_aux> <mom15_exta> <mom15_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_mx mom15_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_mx_aux> <mom15_exta> <mom15_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_mx mom15_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_field2> <F_reg1> <mom15_mx_aux> <mom15_exta> <mom15_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    dmflag = 0
]


DEVICE crtmom_mx_4t mom15_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOM_field1> <MOM_field2> <F_reg1> <mom15_mx_aux> <mom15_exta> <mom15_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip
    mf1 = count(mom15_mx_aux)
    multi = mf1/2
    nv = count(MOM_field1)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom15_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg1)-perimeter_coincide(F_reg1,MOM_field1))/2)/(mf1*(nv-1))
    stm = 1
    spm = 5
    Aw  = ( Area(mom15_exta) + Area(mom15_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
]






mom24_1 = MOMDMY4 NOT INTERACT MOM_field1


mom24_2 = mom24_1 INTERACT MOM_field2

mom24_3 = mom24_2 INTERACT MOM_field3

mom24_4 = mom24_3 INTERACT MOM_field4


mom24_Left5 = mom24_4 NOT INTERACT MOM_field5

mom24_reg1          = mom24_Left5 NOT MOMDMY22
mom24_reg2          = mom24_reg1 NOT INTERACT MOMDMY100
mom24_reg3          = mom24_reg2 NOT INTERACT RFDMY
mom24_reg4          = mom24_reg3 INTERACT poly
mom24_reg5          = mom24_reg4 NOT INTERACT MOMDMY_2T
mom24_reg           = mom24_reg5 NOT INTERACT MOM_dmetal1_1
mom24_reg_dm        = mom24_reg5 INTERACT MOM_dmetal1_1	
mom24_reg_npo_wo    = mom24_reg3 INTERACT RPO
mom24_reg_npo_2t    = mom24_reg2 INTERACT MOMDMY_2T
mom24_reg_2t1       = mom24_reg_npo_2t NOT INTERACT MOMDMY31
mom24_reg_2t2       = mom24_reg_2t1 NOT INTERACT MOMDMY32
mom24_reg_2t        = mom24_reg_2t2 NOT INTERACT MOMDMY33
mom24_reg_nw1       = mom24_reg_npo_wo INTERACT MOMDMY31
mom24_reg_nw2       = mom24_reg_nw1 INTERACT nxwell
mom24_reg_nw        = mom24_reg_nw2 NOT INTERACT MOM_dmetal1_1
mom24_reg_nw_dm     = mom24_reg_nw2 INTERACT MOM_dmetal1_1
mom24_reg_pw1       = mom24_reg_npo_wo INTERACT MOMDMY32
mom24_reg_pw2       = mom24_reg_pw1 INTERACT psub

mom24_reg_pw        = mom24_reg_pw2 NOT INTERACT MOM_dmetal1_1
mom24_reg_pw_dm     = mom24_reg_pw2 INTERACT MOM_dmetal1_1

mom24_reg_ntn1      = mom24_reg_npo_wo INTERACT MOMDMY33
mom24_reg_ntn2      = mom24_reg_ntn1 INTERACT NT_N

mom24_reg_ntn       = mom24_reg_ntn2 NOT INTERACT MOM_dmetal1_1
mom24_reg_ntn_dm     = mom24_reg_ntn2 INTERACT MOM_dmetal1_1

mom24_reg_rf1       = mom24_Left5 INTERACT RFDMY
mom24_reg_rf2       = mom24_reg_rf1 NOT INTERACT MOMDMY100
mom24_reg_rf3       = mom24_reg_rf2 NOT MOMDMY22 
mom24_reg_rf4       = mom24_reg_rf3 INTERACT poly
mom24_reg_rf5       = mom24_reg_rf4 NOT INTERACT MOMDMY_2T
mom24_reg_rf6       = mom24_reg_rf5 NOT RFDMY67G
mom24_reg_rf        = mom24_reg_rf6 NOT INTERACT MOM_dmetal1_1
mom24_reg_rf_dm     = mom24_reg_rf6 INTERACT MOM_dmetal1_1
mom24_reg_rf_67g1   = mom24_reg_rf5 AND RFDMY67G
mom24_reg_rf_67g    = mom24_reg_rf_67g1 NOT INTERACT MOM_dmetal1_1
mom24_reg_rf_67g_dm = mom24_reg_rf_67g1 INTERACT MOM_dmetal1_1

mom24_reg_npo_rf1   = mom24_reg_rf3 NOT INTERACT MOMDMY100
mom24_reg_npo_rf_wo = mom24_reg_npo_rf1 INTERACT RPO
mom24_reg_rf_2t1    = mom24_reg_npo_rf1 NOT INTERACT MOMDMY31
mom24_reg_rf_2t2    = mom24_reg_rf_2t1 NOT INTERACT MOMDMY32
mom24_reg_rf_2t     = mom24_reg_rf_2t2 NOT INTERACT MOMDMY33
mom24_reg_nw_rf1    = mom24_reg_npo_rf_wo INTERACT MOMDMY31
mom24_reg_nw_rf2    = mom24_reg_nw_rf1 INTERACT nxwell
mom24_reg_nw_rf     = mom24_reg_nw_rf2 NOT INTERACT MOM_dmetal1_1
mom24_reg_nw_rf_dm  = mom24_reg_nw_rf2 INTERACT MOM_dmetal1_1
mom24_reg_pw_rf1    = mom24_reg_npo_rf_wo INTERACT MOMDMY32
mom24_reg_pw_rf2    = mom24_reg_pw_rf1 INTERACT psub

mom24_reg_pw_rf     = mom24_reg_pw_rf2 NOT INTERACT MOM_dmetal1_1
mom24_reg_pw_rf_dm      = mom24_reg_pw_rf2 INTERACT MOM_dmetal1_1


mom24_reg_ntn_rf1   = mom24_reg_npo_rf_wo INTERACT MOMDMY33
mom24_reg_ntn_rf2   = mom24_reg_ntn_rf1 INTERACT NT_N

mom24_reg_ntn_rf      = mom24_reg_ntn_rf2 NOT INTERACT MOM_dmetal1_1
mom24_reg_ntn_rf_dm     = mom24_reg_ntn_rf2 INTERACT MOM_dmetal1_1

mom24_mx_reg1       = MOMDMY22 INTERACT mom24_Left5
mom24_mx_reg2       = mom24_mx_reg1 NOT INTERACT RFDMY
mom24_mx_reg3       = mom24_mx_reg2 NOT INTERACT MOMDMY100
mom24_mx_reg4       = mom24_mx_reg3 INTERACT poly_mom
mom24_mx_reg5       = mom24_mx_reg4 NOT INTERACT MOMDMY_2T
mom24_mx_reg        = mom24_mx_reg5 NOT INTERACT MOM_dmetal1_1
mom24_mx_reg_dm     = mom24_mx_reg5 INTERACT MOM_dmetal1_1
mom24_mx_reg_npo_wo = mom24_mx_reg3 INTERACT RPO
mom24_mx_reg_npo_4t = mom24_mx_reg3 INTERACT MOMDMY_2T
mom24_mx_reg_4t1    = mom24_mx_reg_npo_4t NOT INTERACT MOMDMY31
mom24_mx_reg_4t2    = mom24_mx_reg_4t1 NOT INTERACT MOMDMY32
mom24_mx_reg_4t     = mom24_mx_reg_4t2 NOT INTERACT MOMDMY33
mom24_mx_reg_nw1    = mom24_mx_reg_npo_wo INTERACT MOMDMY31
mom24_mx_reg_nw2    = mom24_mx_reg_nw1 INTERACT nxwell
mom24_mx_reg_nw     = mom24_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1
mom24_mx_reg_nw_dm  = mom24_mx_reg_nw2 INTERACT MOM_dmetal1_1
mom24_mx_reg_pw1    = mom24_mx_reg_npo_wo INTERACT MOMDMY32
mom24_mx_reg_pw2    = mom24_mx_reg_pw1 INTERACT psub

mom24_mx_reg_pw     = mom24_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1
mom24_mx_reg_pw_dm      = mom24_mx_reg_pw2 INTERACT MOM_dmetal1_1

mom24_mx_reg_ntn1   = mom24_mx_reg_npo_wo INTERACT MOMDMY33
mom24_mx_reg_ntn2   = mom24_mx_reg_ntn1 INTERACT NT_N

mom24_mx_reg_ntn     = mom24_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1
mom24_mx_reg_ntn_dm     = mom24_mx_reg_ntn2 INTERACT MOM_dmetal1_1

mom24_mx_aux = mom24_Left5 AND MOMDMY22

mom24_ext1 = F_regn3 NOT INTERACT MOM_field3 > 2
mom24_exta = mom24_ext1 AND MOM_field2
mom24_extb = F_regn2 AND MOM_field3

DEVICE crtmom mom24_reg metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]
DEVICE crtmom mom24_reg_dm metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo mom24_reg_nw metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_nw)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo mom24_reg_nw_dm metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_nw_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo mom24_reg_pw metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_pw)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo mom24_reg_pw_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_pw_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo mom24_reg_ntn metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_ntn)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo mom24_reg_ntn_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_ntn_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE crtmom_2t mom24_reg_2t metal4(PLUS) metal4(MINUS) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_2t)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
]


DEVICE crtmom_rf mom24_reg_rf metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]
DEVICE crtmom_rf mom24_reg_rf_dm metal4(PLUS) metal4(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo_rf mom24_reg_nw_rf metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_nw_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_rf mom24_reg_nw_rf_dm metal4(PLUS) metal4(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_nw_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_rf mom24_reg_pw_rf metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_pw_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_rf mom24_reg_pw_rf_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_pw_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_rf mom24_reg_ntn_rf metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_ntn_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo_rf mom24_reg_ntn_rf_dm metal4(PLUS) metal4(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_exta> <mom24_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom24_reg_ntn_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]



DEVICE crtmom_mx mom24_mx_reg mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    dmflag = 0
]
DEVICE crtmom_mx mom24_mx_reg_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo_mx mom24_mx_reg_nw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_mx mom24_mx_reg_nw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_mx mom24_mx_reg_pw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_mx mom24_mx_reg_pw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_mx mom24_mx_reg_ntn mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo_mx mom24_mx_reg_ntn_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE crtmom_mx_4t mom24_mx_reg_4t mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) <MOM_field3> <MOM_field2> <F_reg2> <mom24_mx_aux> <mom24_exta> <mom24_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip
    mf1 = count(mom24_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 4
    Aw  = ( Area(mom24_exta) + Area(mom24_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
]






mom25_1 = MOMDMY5 NOT INTERACT MOM_field1


mom25_2 = mom25_1 INTERACT MOM_field2

mom25_3 = mom25_2 INTERACT MOM_field3

mom25_4 = mom25_3 INTERACT MOM_field4

mom25_5 = mom25_4 INTERACT MOM_field5



mom25_reg1          = mom25_5 NOT MOMDMY22
mom25_reg2          = mom25_reg1 NOT INTERACT MOMDMY100
mom25_reg3          = mom25_reg2 NOT INTERACT RFDMY
mom25_reg4          = mom25_reg3 INTERACT poly
mom25_reg5          = mom25_reg4 NOT INTERACT MOMDMY_2T
mom25_reg           = mom25_reg5 NOT INTERACT MOM_dmetal1_1
mom25_reg_dm        = mom25_reg5 INTERACT MOM_dmetal1_1	
mom25_reg_npo_wo    = mom25_reg3 INTERACT RPO
mom25_reg_npo_2t    = mom25_reg2 INTERACT MOMDMY_2T
mom25_reg_2t1       = mom25_reg_npo_2t NOT INTERACT MOMDMY31
mom25_reg_2t2       = mom25_reg_2t1 NOT INTERACT MOMDMY32
mom25_reg_2t        = mom25_reg_2t2 NOT INTERACT MOMDMY33
mom25_reg_nw1       = mom25_reg_npo_wo INTERACT MOMDMY31
mom25_reg_nw2       = mom25_reg_nw1 INTERACT nxwell
mom25_reg_nw        = mom25_reg_nw2 NOT INTERACT MOM_dmetal1_1
mom25_reg_nw_dm     = mom25_reg_nw2 INTERACT MOM_dmetal1_1
mom25_reg_pw1       = mom25_reg_npo_wo INTERACT MOMDMY32
mom25_reg_pw2       = mom25_reg_pw1 INTERACT psub

mom25_reg_pw        = mom25_reg_pw2 NOT INTERACT MOM_dmetal1_1
mom25_reg_pw_dm     = mom25_reg_pw2 INTERACT MOM_dmetal1_1

mom25_reg_ntn1      = mom25_reg_npo_wo INTERACT MOMDMY33
mom25_reg_ntn2      = mom25_reg_ntn1 INTERACT NT_N

mom25_reg_ntn       = mom25_reg_ntn2 NOT INTERACT MOM_dmetal1_1
mom25_reg_ntn_dm     = mom25_reg_ntn2 INTERACT MOM_dmetal1_1

mom25_reg_rf1       = mom25_5 INTERACT RFDMY
mom25_reg_rf2       = mom25_reg_rf1 NOT INTERACT MOMDMY100
mom25_reg_rf3       = mom25_reg_rf2 NOT MOMDMY22 
mom25_reg_rf4       = mom25_reg_rf3 INTERACT poly
mom25_reg_rf5       = mom25_reg_rf4 NOT INTERACT MOMDMY_2T
mom25_reg_rf6       = mom25_reg_rf5 NOT RFDMY67G
mom25_reg_rf        = mom25_reg_rf6 NOT INTERACT MOM_dmetal1_1
mom25_reg_rf_dm     = mom25_reg_rf6 INTERACT MOM_dmetal1_1
mom25_reg_rf_67g1   = mom25_reg_rf5 AND RFDMY67G
mom25_reg_rf_67g    = mom25_reg_rf_67g1 NOT INTERACT MOM_dmetal1_1
mom25_reg_rf_67g_dm = mom25_reg_rf_67g1 INTERACT MOM_dmetal1_1

mom25_reg_npo_rf1   = mom25_reg_rf3 NOT INTERACT MOMDMY100
mom25_reg_npo_rf_wo = mom25_reg_npo_rf1 INTERACT RPO
mom25_reg_rf_2t1    = mom25_reg_npo_rf1 NOT INTERACT MOMDMY31
mom25_reg_rf_2t2    = mom25_reg_rf_2t1 NOT INTERACT MOMDMY32
mom25_reg_rf_2t     = mom25_reg_rf_2t2 NOT INTERACT MOMDMY33
mom25_reg_nw_rf1    = mom25_reg_npo_rf_wo INTERACT MOMDMY31
mom25_reg_nw_rf2    = mom25_reg_nw_rf1 INTERACT nxwell
mom25_reg_nw_rf     = mom25_reg_nw_rf2 NOT INTERACT MOM_dmetal1_1
mom25_reg_nw_rf_dm  = mom25_reg_nw_rf2 INTERACT MOM_dmetal1_1
mom25_reg_pw_rf1    = mom25_reg_npo_rf_wo INTERACT MOMDMY32
mom25_reg_pw_rf2    = mom25_reg_pw_rf1 INTERACT psub

mom25_reg_pw_rf     = mom25_reg_pw_rf2 NOT INTERACT MOM_dmetal1_1
mom25_reg_pw_rf_dm      = mom25_reg_pw_rf2 INTERACT MOM_dmetal1_1


mom25_reg_ntn_rf1   = mom25_reg_npo_rf_wo INTERACT MOMDMY33
mom25_reg_ntn_rf2   = mom25_reg_ntn_rf1 INTERACT NT_N

mom25_reg_ntn_rf      = mom25_reg_ntn_rf2 NOT INTERACT MOM_dmetal1_1
mom25_reg_ntn_rf_dm     = mom25_reg_ntn_rf2 INTERACT MOM_dmetal1_1

mom25_mx_reg1       = MOMDMY22 INTERACT mom25_5
mom25_mx_reg2       = mom25_mx_reg1 NOT INTERACT RFDMY
mom25_mx_reg3       = mom25_mx_reg2 NOT INTERACT MOMDMY100
mom25_mx_reg4       = mom25_mx_reg3 INTERACT poly_mom
mom25_mx_reg5       = mom25_mx_reg4 NOT INTERACT MOMDMY_2T
mom25_mx_reg        = mom25_mx_reg5 NOT INTERACT MOM_dmetal1_1
mom25_mx_reg_dm     = mom25_mx_reg5 INTERACT MOM_dmetal1_1
mom25_mx_reg_npo_wo = mom25_mx_reg3 INTERACT RPO
mom25_mx_reg_npo_4t = mom25_mx_reg3 INTERACT MOMDMY_2T
mom25_mx_reg_4t1    = mom25_mx_reg_npo_4t NOT INTERACT MOMDMY31
mom25_mx_reg_4t2    = mom25_mx_reg_4t1 NOT INTERACT MOMDMY32
mom25_mx_reg_4t     = mom25_mx_reg_4t2 NOT INTERACT MOMDMY33
mom25_mx_reg_nw1    = mom25_mx_reg_npo_wo INTERACT MOMDMY31
mom25_mx_reg_nw2    = mom25_mx_reg_nw1 INTERACT nxwell
mom25_mx_reg_nw     = mom25_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1
mom25_mx_reg_nw_dm  = mom25_mx_reg_nw2 INTERACT MOM_dmetal1_1
mom25_mx_reg_pw1    = mom25_mx_reg_npo_wo INTERACT MOMDMY32
mom25_mx_reg_pw2    = mom25_mx_reg_pw1 INTERACT psub

mom25_mx_reg_pw     = mom25_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1
mom25_mx_reg_pw_dm      = mom25_mx_reg_pw2 INTERACT MOM_dmetal1_1

mom25_mx_reg_ntn1   = mom25_mx_reg_npo_wo INTERACT MOMDMY33
mom25_mx_reg_ntn2   = mom25_mx_reg_ntn1 INTERACT NT_N

mom25_mx_reg_ntn     = mom25_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1
mom25_mx_reg_ntn_dm     = mom25_mx_reg_ntn2 INTERACT MOM_dmetal1_1

mom25_mx_aux = mom25_5 AND MOMDMY22

mom25_ext1 = F_regn3 NOT INTERACT MOM_field3 > 2
mom25_exta = mom25_ext1 AND MOM_field2
mom25_extb = F_regn2 AND MOM_field3

DEVICE crtmom mom25_reg metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]
DEVICE crtmom mom25_reg_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo mom25_reg_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_nw)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo mom25_reg_nw_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_nw_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo mom25_reg_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_pw)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo mom25_reg_pw_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_pw_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo mom25_reg_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_ntn)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo mom25_reg_ntn_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_ntn_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE crtmom_2t mom25_reg_2t metal5(PLUS) metal5(MINUS) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_2t)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
]


DEVICE crtmom_rf mom25_reg_rf metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]
DEVICE crtmom_rf mom25_reg_rf_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo_rf mom25_reg_nw_rf metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_nw_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_rf mom25_reg_nw_rf_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_nw_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_rf mom25_reg_pw_rf metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_pw_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_rf mom25_reg_pw_rf_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_pw_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_rf mom25_reg_ntn_rf metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_ntn_rf)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo_rf mom25_reg_ntn_rf_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_exta> <mom25_extb>   <dmetal1> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,mom25_reg_ntn_rf_dm)/ nh
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(nh-1)
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]



DEVICE crtmom_mx mom25_mx_reg mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    dmflag = 0
]
DEVICE crtmom_mx mom25_mx_reg_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo_mx mom25_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_mx mom25_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_mx mom25_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_mx mom25_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_mx mom25_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo_mx mom25_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> <MOMDMY0>   <dmetal1> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE crtmom_mx_4t mom25_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOM_field3> <MOM_field2> <F_reg2> <mom25_mx_aux> <mom25_exta> <mom25_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip
    mf1 = count(mom25_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg2)-perimeter_coincide(F_reg2,MOM_field2))/2)/(mf1*(nh-1))
    stm = 2
    spm = 5
    Aw  = ( Area(mom25_exta) + Area(mom25_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
]






mom35_1 = MOMDMY5 NOT INTERACT MOM_field1
mom35_2 = mom35_1 NOT INTERACT MOM_field2


mom35_3 = mom35_2 INTERACT MOM_field3

mom35_4 = mom35_3 INTERACT MOM_field4

mom35_5 = mom35_4 INTERACT MOM_field5



mom35_reg1          = mom35_5 NOT MOMDMY22
mom35_reg2          = mom35_reg1 NOT INTERACT MOMDMY100
mom35_reg3          = mom35_reg2 NOT INTERACT RFDMY
mom35_reg4          = mom35_reg3 INTERACT poly
mom35_reg5          = mom35_reg4 NOT INTERACT MOMDMY_2T
mom35_reg           = mom35_reg5 NOT INTERACT MOM_dmetal1_2
mom35_reg_dm        = mom35_reg5 INTERACT MOM_dmetal1_2	
mom35_reg_npo_wo    = mom35_reg3 INTERACT RPO
mom35_reg_npo_2t    = mom35_reg2 INTERACT MOMDMY_2T
mom35_reg_2t1       = mom35_reg_npo_2t NOT INTERACT MOMDMY31
mom35_reg_2t2       = mom35_reg_2t1 NOT INTERACT MOMDMY32
mom35_reg_2t        = mom35_reg_2t2 NOT INTERACT MOMDMY33
mom35_reg_nw1       = mom35_reg_npo_wo INTERACT MOMDMY31
mom35_reg_nw2       = mom35_reg_nw1 INTERACT nxwell
mom35_reg_nw        = mom35_reg_nw2 NOT INTERACT MOM_dmetal1_2
mom35_reg_nw_dm     = mom35_reg_nw2 INTERACT MOM_dmetal1_2
mom35_reg_pw1       = mom35_reg_npo_wo INTERACT MOMDMY32
mom35_reg_pw2       = mom35_reg_pw1 INTERACT psub

mom35_reg_pw        = mom35_reg_pw2 NOT INTERACT MOM_dmetal1_2
mom35_reg_pw_dm     = mom35_reg_pw2 INTERACT MOM_dmetal1_2

mom35_reg_ntn1      = mom35_reg_npo_wo INTERACT MOMDMY33
mom35_reg_ntn2      = mom35_reg_ntn1 INTERACT NT_N

mom35_reg_ntn       = mom35_reg_ntn2 NOT INTERACT MOM_dmetal1_2
mom35_reg_ntn_dm     = mom35_reg_ntn2 INTERACT MOM_dmetal1_2

mom35_reg_rf1       = mom35_5 INTERACT RFDMY
mom35_reg_rf2       = mom35_reg_rf1 NOT INTERACT MOMDMY100
mom35_reg_rf3       = mom35_reg_rf2 NOT MOMDMY22 
mom35_reg_rf4       = mom35_reg_rf3 INTERACT poly
mom35_reg_rf5       = mom35_reg_rf4 NOT INTERACT MOMDMY_2T
mom35_reg_rf6       = mom35_reg_rf5 NOT RFDMY67G
mom35_reg_rf        = mom35_reg_rf6 NOT INTERACT MOM_dmetal1_2
mom35_reg_rf_dm     = mom35_reg_rf6 INTERACT MOM_dmetal1_2
mom35_reg_rf_67g1   = mom35_reg_rf5 AND RFDMY67G
mom35_reg_rf_67g    = mom35_reg_rf_67g1 NOT INTERACT MOM_dmetal1_2
mom35_reg_rf_67g_dm = mom35_reg_rf_67g1 INTERACT MOM_dmetal1_2

mom35_reg_npo_rf1   = mom35_reg_rf3 NOT INTERACT MOMDMY100
mom35_reg_npo_rf_wo = mom35_reg_npo_rf1 INTERACT RPO
mom35_reg_rf_2t1    = mom35_reg_npo_rf1 NOT INTERACT MOMDMY31
mom35_reg_rf_2t2    = mom35_reg_rf_2t1 NOT INTERACT MOMDMY32
mom35_reg_rf_2t     = mom35_reg_rf_2t2 NOT INTERACT MOMDMY33
mom35_reg_nw_rf1    = mom35_reg_npo_rf_wo INTERACT MOMDMY31
mom35_reg_nw_rf2    = mom35_reg_nw_rf1 INTERACT nxwell
mom35_reg_nw_rf     = mom35_reg_nw_rf2 NOT INTERACT MOM_dmetal1_2
mom35_reg_nw_rf_dm  = mom35_reg_nw_rf2 INTERACT MOM_dmetal1_2
mom35_reg_pw_rf1    = mom35_reg_npo_rf_wo INTERACT MOMDMY32
mom35_reg_pw_rf2    = mom35_reg_pw_rf1 INTERACT psub

mom35_reg_pw_rf     = mom35_reg_pw_rf2 NOT INTERACT MOM_dmetal1_2
mom35_reg_pw_rf_dm      = mom35_reg_pw_rf2 INTERACT MOM_dmetal1_2


mom35_reg_ntn_rf1   = mom35_reg_npo_rf_wo INTERACT MOMDMY33
mom35_reg_ntn_rf2   = mom35_reg_ntn_rf1 INTERACT NT_N

mom35_reg_ntn_rf      = mom35_reg_ntn_rf2 NOT INTERACT MOM_dmetal1_2
mom35_reg_ntn_rf_dm     = mom35_reg_ntn_rf2 INTERACT MOM_dmetal1_2

mom35_mx_reg1       = MOMDMY22 INTERACT mom35_5
mom35_mx_reg2       = mom35_mx_reg1 NOT INTERACT RFDMY
mom35_mx_reg3       = mom35_mx_reg2 NOT INTERACT MOMDMY100
mom35_mx_reg4       = mom35_mx_reg3 INTERACT poly_mom
mom35_mx_reg5       = mom35_mx_reg4 NOT INTERACT MOMDMY_2T
mom35_mx_reg        = mom35_mx_reg5 NOT INTERACT MOM_dmetal1_2
mom35_mx_reg_dm     = mom35_mx_reg5 INTERACT MOM_dmetal1_2
mom35_mx_reg_npo_wo = mom35_mx_reg3 INTERACT RPO
mom35_mx_reg_npo_4t = mom35_mx_reg3 INTERACT MOMDMY_2T
mom35_mx_reg_4t1    = mom35_mx_reg_npo_4t NOT INTERACT MOMDMY31
mom35_mx_reg_4t2    = mom35_mx_reg_4t1 NOT INTERACT MOMDMY32
mom35_mx_reg_4t     = mom35_mx_reg_4t2 NOT INTERACT MOMDMY33
mom35_mx_reg_nw1    = mom35_mx_reg_npo_wo INTERACT MOMDMY31
mom35_mx_reg_nw2    = mom35_mx_reg_nw1 INTERACT nxwell
mom35_mx_reg_nw     = mom35_mx_reg_nw2 NOT INTERACT MOM_dmetal1_2
mom35_mx_reg_nw_dm  = mom35_mx_reg_nw2 INTERACT MOM_dmetal1_2
mom35_mx_reg_pw1    = mom35_mx_reg_npo_wo INTERACT MOMDMY32
mom35_mx_reg_pw2    = mom35_mx_reg_pw1 INTERACT psub

mom35_mx_reg_pw     = mom35_mx_reg_pw2 NOT INTERACT MOM_dmetal1_2
mom35_mx_reg_pw_dm      = mom35_mx_reg_pw2 INTERACT MOM_dmetal1_2

mom35_mx_reg_ntn1   = mom35_mx_reg_npo_wo INTERACT MOMDMY33
mom35_mx_reg_ntn2   = mom35_mx_reg_ntn1 INTERACT NT_N

mom35_mx_reg_ntn     = mom35_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_2
mom35_mx_reg_ntn_dm     = mom35_mx_reg_ntn2 INTERACT MOM_dmetal1_2

mom35_mx_aux = mom35_5 AND MOMDMY22

mom35_ext1 = F_regn3 NOT INTERACT MOM_field3 > 2
mom35_exta = mom35_ext1 AND MOM_field4
mom35_extb = F_regn4 AND MOM_field3

DEVICE crtmom mom35_reg metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]
DEVICE crtmom mom35_reg_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo mom35_reg_nw metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_nw)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo mom35_reg_nw_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_nw_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo mom35_reg_pw metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_pw)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo mom35_reg_pw_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_pw_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo mom35_reg_ntn metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_ntn)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo mom35_reg_ntn_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_ntn_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE crtmom_2t mom35_reg_2t metal5(PLUS) metal5(MINUS) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_2t)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
]


DEVICE crtmom_rf mom35_reg_rf metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_rf)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    dmflag = 0
]
DEVICE crtmom_rf mom35_reg_rf_dm metal5(PLUS) metal5(MINUS) poly(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_rf_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo_rf mom35_reg_nw_rf metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_nw_rf)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_rf mom35_reg_nw_rf_dm metal5(PLUS) metal5(MINUS) nxwell(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_nw_rf_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_rf mom35_reg_pw_rf metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_pw_rf)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_rf mom35_reg_pw_rf_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_pw_rf_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_rf mom35_reg_ntn_rf metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_ntn_rf)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo_rf mom35_reg_ntn_rf_dm metal5(PLUS) metal5(MINUS) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_exta> <mom35_extb>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nv,nh,stm,spm,ftip,dmflag,shield
    nv = count(MOM_field3)
    nh = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,mom35_reg_ntn_rf_dm)/ nh
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(nv-1)
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]



DEVICE crtmom_mx mom35_mx_reg mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    dmflag = 0
]
DEVICE crtmom_mx mom35_mx_reg_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) poly_mom(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> <MOMDMY0>   <dmetal1> <dmetal2> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.87e-6)
    ylen = moml + (2*0.25e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE crtmom_wo_mx mom35_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    dmflag = 0
]
DEVICE crtmom_wo_mx mom35_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> <MOMDMY0>   <dmetal1> <dmetal2> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 1
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_mx mom35_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    dmflag = 0
]
DEVICE crtmom_wo_mx mom35_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> <MOMDMY0>   <dmetal1> <dmetal2> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 2
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE crtmom_wo_mx mom35_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    dmflag = 0
]
DEVICE crtmom_wo_mx mom35_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> <MOMDMY0>   <dmetal1> <dmetal2> [
    property w,s,nv,nh,stm,spm,multi,ftip,dmflag,shield
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
    shield = 3
    momw = nv*w + (nv-1)*s + 2*ftip
    moml = nh*w + (nh-1)*s + 2*ftip
    xlen = momw + (2*0.82e-6)
    ylen = moml + (2*0.82e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]


DEVICE crtmom_mx_4t mom35_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOM_field3> <MOM_field4> <F_reg3> <mom35_mx_aux> <mom35_exta> <mom35_extb> [
    property w,s,nv,nh,stm,spm,multi,ftip
    mf1 = count(mom35_mx_aux)
    multi = mf1/2
    nv = count(MOM_field3)/mf1
    nh = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom35_mx_aux)/ (nh*mf1)
    s =  ((perimeter(F_reg3)-perimeter_coincide(F_reg3,MOM_field3))/2)/(mf1*(nv-1))
    stm = 3
    spm = 5
    Aw  = ( Area(mom35_exta) + Area(mom35_extb) ) / w
    ftip = Aw /(nv+nh)/mf1
]





TRACE PROPERTY crtmom_rf nv nv 0
TRACE PROPERTY crtmom_rf nh nh 0
TRACE PROPERTY crtmom_rf s  s MOM_Serr
TRACE PROPERTY crtmom_rf w  w MOM_Werr
TRACE PROPERTY crtmom_rf stm stm 0
TRACE PROPERTY crtmom_rf spm spm 0
TRACE PROPERTY crtmom_rf ftip ftip 0
TRACE PROPERTY crtmom_rf dmflag dmflag 0

TRACE PROPERTY crtmom nv nv 0
TRACE PROPERTY crtmom nh nh 0
TRACE PROPERTY crtmom s  s MOM_Serr
TRACE PROPERTY crtmom w  w MOM_Werr
TRACE PROPERTY crtmom stm stm 0
TRACE PROPERTY crtmom spm spm 0
TRACE PROPERTY crtmom ftip ftip 0
TRACE PROPERTY crtmom dmflag dmflag 0


TRACE PROPERTY crtmom_2t nv nv 0
TRACE PROPERTY crtmom_2t nh nh 0
TRACE PROPERTY crtmom_2t s  s MOM_Serr
TRACE PROPERTY crtmom_2t w  w MOM_Werr
TRACE PROPERTY crtmom_2t stm stm 0
TRACE PROPERTY crtmom_2t spm spm 0
TRACE PROPERTY crtmom_2t ftip ftip 0

TRACE PROPERTY crtmom_wo nv nv 0
TRACE PROPERTY crtmom_wo nh nh 0
TRACE PROPERTY crtmom_wo s  s MOM_Serr
TRACE PROPERTY crtmom_wo w  w MOM_Werr
TRACE PROPERTY crtmom_wo stm stm 0
TRACE PROPERTY crtmom_wo spm spm 0
TRACE PROPERTY crtmom_wo ftip ftip 0
TRACE PROPERTY crtmom_wo shield shield 0
TRACE PROPERTY crtmom_wo dmflag dmflag 0

TRACE PROPERTY crtmom_wo_mx nv nv 0
TRACE PROPERTY crtmom_wo_mx nh nh 0
TRACE PROPERTY crtmom_wo_mx s  s MOM_Serr
TRACE PROPERTY crtmom_wo_mx w  w MOM_Werr
TRACE PROPERTY crtmom_wo_mx stm stm 0
TRACE PROPERTY crtmom_wo_mx spm spm 0
TRACE PROPERTY crtmom_wo_mx ftip ftip 0
TRACE PROPERTY crtmom_wo_mx shield shield 0
TRACE PROPERTY crtmom_wo_mx dmflag dmflag 0
TRACE PROPERTY crtmom_wo_mx multi multi 0

TRACE PROPERTY crtmom_wo_rf nv nv 0
TRACE PROPERTY crtmom_wo_rf nh nh 0
TRACE PROPERTY crtmom_wo_rf s  s MOM_Serr
TRACE PROPERTY crtmom_wo_rf w  w MOM_Werr
TRACE PROPERTY crtmom_wo_rf stm stm 0
TRACE PROPERTY crtmom_wo_rf spm spm 0
TRACE PROPERTY crtmom_wo_rf ftip ftip 0
TRACE PROPERTY crtmom_wo_rf shield shield 0
TRACE PROPERTY crtmom_wo_rf dmflag dmflag 0

TRACE PROPERTY crtmom_mx nv nv 0
TRACE PROPERTY crtmom_mx nh nh 0
TRACE PROPERTY crtmom_mx s  s MOM_Serr
TRACE PROPERTY crtmom_mx w  w MOM_Werr
TRACE PROPERTY crtmom_mx stm stm 0
TRACE PROPERTY crtmom_mx spm spm 0
TRACE PROPERTY crtmom_mx ftip ftip 0
TRACE PROPERTY crtmom_mx dmflag dmflag 0
TRACE PROPERTY crtmom_mx multi multi 0

TRACE PROPERTY crtmom_mx_4t nv nv 0
TRACE PROPERTY crtmom_mx_4t nh nh 0
TRACE PROPERTY crtmom_mx_4t s  s MOM_Serr
TRACE PROPERTY crtmom_mx_4t w  w MOM_Werr
TRACE PROPERTY crtmom_mx_4t stm stm 0
TRACE PROPERTY crtmom_mx_4t spm spm 0
TRACE PROPERTY crtmom_mx_4t ftip ftip 0
TRACE PROPERTY crtmom_mx_4t multi multi 0



//

//

//

//

//

//

//

#IFDEF extract_dnwdio
DEVICE D(pwdnw) rwdio psub DNW
TRACE PROPERTY D(pwdnw) a a DIOWELL_Aerr
DEVICE D(dnwpsub) dnwdio psub_term DNW [
   property a,pj
   a = area(dnw)
   pj = perimeter(dnw)
]
TRACE PROPERTY D(dnwpsub) a a DIOWELL_Aerr
#ENDIF
//parasitic nw-psub diode
#IFDEF extract_pnwdio
DEVICE D(pnwdio) pnwdio_r psub nxwell netlist model nwdio
#ENDIF
LVS FILTER D(pnwdio) LAYOUT OPEN

DEVICE D(pp_dnwpsub_iso) dnwdio_iso psub_term DNW netlist model dnwpsub_iso [
   property a,pj
   a = area(dnw)
   pj = perimeter(dnw)
]
LVS FILTER D(pp_dnwpsub_iso) LAYOUT OPEN

DEVICE moscap_rf var_nw3_rf poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf br br 0
TRACE PROPERTY moscap_rf gr gr 0

DEVICE moscap_rf25 var_nw_rf25 poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf25> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf25)/gr
  wr = (perimeter_coincide(vargt_rf25,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf25)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf25 lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf25 wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf25 br br 0
TRACE PROPERTY moscap_rf25 gr gr 0

DEVICE moscap_rf25_nw var_nw_rf25_nw poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf25> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf25)/gr
  wr = (perimeter_coincide(vargt_rf25,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf25)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf25_nw lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf25_nw wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf25_nw br br 0
TRACE PROPERTY moscap_rf25_nw gr gr 0

DEVICE moscap_rf_nw var_nw3_rf_nw poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf_nw lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf_nw wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf_nw br br 0
TRACE PROPERTY moscap_rf_nw gr gr 0

DEVICE ndio_hia_rf hia_ndio_rf_r psub(PLUS) tndiff(MINUS) <hia_ndio_rf> [
  property al,aw,fn
  fn = count(hia_ndio_rf)  
  A_DIO = area(hia_ndio_rf)/fn
  P_DIO = perimeter(hia_ndio_rf)/fn
  P_2_DIO = P_DIO * P_DIO
  AD4 = A_DIO * 16
  KKK = P_2_DIO-AD4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  al = (P_DIO+SQ)/4
  aw = (P_DIO-SQ)/4
]    

TRACE PROPERTY ndio_hia_rf aw aw 0
TRACE PROPERTY ndio_hia_rf al al 0
TRACE PROPERTY ndio_hia_rf fn fn 0

DEVICE njf_4_mac njf_4_mac_reg dnw_4vnjfet_d(D) rwel_4vnjfet(G) dnw_4vnjfet_s(S) psub_under_jfet(SUB) <JFET_WL> [
   property l,w
   
   w = ( perimeter_coincide(JFET_WL,njf_4_mac_reg) / count(JFET_WL) ) / 2
   l = ( area(JFET_WL) / count(JFET_WL) ) / w
]
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
njf_4_mac_ODN_layer = DEVICE LAYER njf_4_mac ANNOTATE
       [PROPERTY pname
       pname = "njf_4_mac"
       ]
LVS ANNOTATE DEVICES njf_4_mac_ODN_layer
#ENDIF
#ENDIF 
TRACE PROPERTY njf_4_mac w w 0 
TRACE PROPERTY njf_4_mac l l 0

#IFDEF RC_DECK
DEVICE njf_poly_25_mac njf_poly_25_mac_reg tndiff_jfet(D) tpdiff_jfet(G) tndiff_jfet(S) DNW(NS_ISO) psub_under_jfet(SUB) <poly> <PP_2d5v_JFET> (S D) [
   property l,w,dnwpsub_area,dnwpsub_pj

   w = perimeter_coincide(njf_poly_25_mac_reg,tndiff_jfet) / count(tndiff_jfet) 
   l1 =  perimeter_inside(PP_2d5v_JFET, poly) / 2 
   l =  area(poly) / l1
   dnwpsub_area = 0
   dnwpsub_pj   = 0
]
#ELSE
DEVICE njf_poly_25_mac njf_poly_25_mac_reg tndiff_jfet(D) tpdiff_jfet(G) tndiff_jfet(S) DNW(NS_ISO) psub_under_jfet(SUB) <poly> <PP_2d5v_JFET> (S D) [
   property l,w

   w = perimeter_coincide(njf_poly_25_mac_reg,tndiff_jfet) / count(tndiff_jfet) 
   l1 =  perimeter_inside(PP_2d5v_JFET, poly) / 2 
   l =  area(poly) / l1
]
#ENDIF
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
njf_poly_25_mac_ODN_layer = DEVICE LAYER njf_poly_25_mac ANNOTATE
       [PROPERTY pname
       pname = "njf_poly_25_mac"
       ]
LVS ANNOTATE DEVICES njf_poly_25_mac_ODN_layer
#ENDIF
#ENDIF  
TRACE PROPERTY njf_poly_25_mac w w 0 
TRACE PROPERTY njf_poly_25_mac l l 0

DEVICE nmos_rf ngate_nthin d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf> [
   property lr,wr,nr
   nr = count(ngate_rf)
   wr = ((perimeter_coincide(ngate_rf,s_tndiff)+ perimeter_coincide(ngate_rf,d_tndiff))/2)/nr
   lr = (area(ngate_rf)/wr)/nr
]
TRACE PROPERTY nmos_rf wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_layer = DEVICE LAYER nmos_rf ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf"
]
LVS ANNOTATE DEVICES nmos_rf_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25 ngate_nthin_25 d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25> [
   property lr,wr,nr
   nr = count(ngate_rf_25)
   wr = ((perimeter_coincide(ngate_rf_25,s_tndiff)+ perimeter_coincide(ngate_rf_25,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25)/wr)/nr
]
TRACE PROPERTY nmos_rf_25 wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25 lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25_layer = DEVICE LAYER nmos_rf_25 ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25"
]
LVS ANNOTATE DEVICES nmos_rf_25_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25_6t ngate_nthin_25_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rf_25> [
   property lr,wr,nr
   nr = count(ngate_rf_25)
   wr = ((perimeter_coincide(ngate_rf_25,s_tndiff)+ perimeter_coincide(ngate_rf_25,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25)/wr)/nr
]
TRACE PROPERTY nmos_rf_25_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25_6t_layer = DEVICE LAYER nmos_rf_25_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25_6t"
]
LVS ANNOTATE DEVICES nmos_rf_25_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25_nodnw ngate_nthin_25nodnw d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25> netlist model nmos_rf_25 [
   property lr,wr,nr
   nr = count(ngate_rf_25)
   wr = ((perimeter_coincide(ngate_rf_25,s_tndiff)+ perimeter_coincide(ngate_rf_25,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25)/wr)/nr
]
TRACE PROPERTY nmos_rf_25_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_25_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25_nodnw_layer = DEVICE LAYER nmos_rf_25_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_25_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25od33 ngate_nthin_25od d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25od> [
   property lr,wr,nr
   nr = count(ngate_rf_25od)
   wr = ((perimeter_coincide(ngate_rf_25od,s_tndiff)+ perimeter_coincide(ngate_rf_25od,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25od)/wr)/nr
]
TRACE PROPERTY nmos_rf_25od33 wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25od33 lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25od33 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25od33_layer = DEVICE LAYER nmos_rf_25od33 ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25od33"
]
LVS ANNOTATE DEVICES nmos_rf_25od33_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25od33_6t ngate_nthin_25od_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rf_25od> [
   property lr,wr,nr
   nr = count(ngate_rf_25od)
   wr = ((perimeter_coincide(ngate_rf_25od,s_tndiff)+ perimeter_coincide(ngate_rf_25od,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25od)/wr)/nr
]
TRACE PROPERTY nmos_rf_25od33_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25od33_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25od33_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25od33_6t_layer = DEVICE LAYER nmos_rf_25od33_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25od33_6t"
]
LVS ANNOTATE DEVICES nmos_rf_25od33_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25od33_nodnw ngate_nthin_25nodnwod d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25od> netlist model nmos_rf_25od33 [
   property lr,wr,nr
   nr = count(ngate_rf_25od)
   wr = ((perimeter_coincide(ngate_rf_25od,s_tndiff)+ perimeter_coincide(ngate_rf_25od,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25od)/wr)/nr
]
TRACE PROPERTY nmos_rf_25od33_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_25od33_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25od33_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25od33_nodnw_layer = DEVICE LAYER nmos_rf_25od33_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25od33_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_25od33_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25ud18 ngate_nthin_25ud d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25ud> [
   property lr,wr,nr
   nr = count(ngate_rf_25ud)
   wr = ((perimeter_coincide(ngate_rf_25ud,s_tndiff)+ perimeter_coincide(ngate_rf_25ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25ud)/wr)/nr
]
TRACE PROPERTY nmos_rf_25ud18 wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25ud18 lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25ud18 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25ud18_layer = DEVICE LAYER nmos_rf_25ud18 ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25ud18"
]
LVS ANNOTATE DEVICES nmos_rf_25ud18_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25ud18_6t ngate_nthin_25ud_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rf_25ud> [
   property lr,wr,nr
   nr = count(ngate_rf_25ud)
   wr = ((perimeter_coincide(ngate_rf_25ud,s_tndiff)+ perimeter_coincide(ngate_rf_25ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25ud)/wr)/nr
]
TRACE PROPERTY nmos_rf_25ud18_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25ud18_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25ud18_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25ud18_6t_layer = DEVICE LAYER nmos_rf_25ud18_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25ud18_6t"
]
LVS ANNOTATE DEVICES nmos_rf_25ud18_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_25ud18_nodnw ngate_nthin_25nodnwud d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25ud> netlist model nmos_rf_25ud18 [
   property lr,wr,nr
   nr = count(ngate_rf_25ud)
   wr = ((perimeter_coincide(ngate_rf_25ud,s_tndiff)+ perimeter_coincide(ngate_rf_25ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25ud)/wr)/nr
]
TRACE PROPERTY nmos_rf_25ud18_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_25ud18_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25ud18_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25ud18_nodnw_layer = DEVICE LAYER nmos_rf_25ud18_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25ud18_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_25ud18_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_6t ngate_nthin_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rf> [
   property lr,wr,nr
   nr = count(ngate_rf)
   wr = ((perimeter_coincide(ngate_rf,s_tndiff)+ perimeter_coincide(ngate_rf,d_tndiff))/2)/nr
   lr = (area(ngate_rf)/wr)/nr
]
TRACE PROPERTY nmos_rf_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_6t_layer = DEVICE LAYER nmos_rf_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_6t"
]
LVS ANNOTATE DEVICES nmos_rf_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_elvt ngate_nthin_elv d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rfelv> [
   property lr,wr,nr
   nr = count(ngate_rfelv)
   wr = ((perimeter_coincide(ngate_rfelv,s_tndiff)+ perimeter_coincide(ngate_rfelv,d_tndiff))/2)/nr
   lr = (area(ngate_rfelv)/wr)/nr
]
TRACE PROPERTY nmos_rf_elvt wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_elvt lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_elvt nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_elvt_layer = DEVICE LAYER nmos_rf_elvt ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_elvt"
]
LVS ANNOTATE DEVICES nmos_rf_elvt_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_elvt_6t ngate_nthin_elv_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rfelv> [
   property lr,wr,nr
   nr = count(ngate_rfelv)
   wr = ((perimeter_coincide(ngate_rfelv,s_tndiff)+ perimeter_coincide(ngate_rfelv,d_tndiff))/2)/nr
   lr = (area(ngate_rfelv)/wr)/nr
]
TRACE PROPERTY nmos_rf_elvt_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_elvt_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_elvt_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_elvt_6t_layer = DEVICE LAYER nmos_rf_elvt_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_elvt_6t"
]
LVS ANNOTATE DEVICES nmos_rf_elvt_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_elvt_nodnw ngate_nthin_elvnodnw d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rfelv> netlist model nmos_rf_elvt [
   property lr,wr,nr
   nr = count(ngate_rfelv)
   wr = ((perimeter_coincide(ngate_rfelv,s_tndiff)+ perimeter_coincide(ngate_rfelv,d_tndiff))/2)/nr
   lr = (area(ngate_rfelv)/wr)/nr
]
TRACE PROPERTY nmos_rf_elvt_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_elvt_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_elvt_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_elvt_nodnw_layer = DEVICE LAYER nmos_rf_elvt_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_elvt_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_elvt_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_hv25 ngate_denthin d_tndiff_dehv(D) poly_rf(G) s_tndiff_dehv(S) psub(B) <ngate_derf> [
   property lr,wr,nr
   nr = count(ngate_derf)
   wr = ((perimeter_coincide(ngate_derf,s_tndiff_dehv)+ perimeter_coincide(ngate_derf,d_tndiff_dehv))/2)/nr
   lr = (area(ngate_derf)/wr)/nr
]
TRACE PROPERTY nmos_rf_hv25 wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_hv25 lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hv25 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hv25_layer = DEVICE LAYER nmos_rf_hv25 ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hv25"
]
LVS ANNOTATE DEVICES nmos_rf_hv25_layer
#ENDIF
#ENDIF


DEVICE nmos_rf_hvt ngate_nthin_hv d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rfhv> [
   property lr,wr,nr
   nr = count(ngate_rfhv)
   wr = ((perimeter_coincide(ngate_rfhv,s_tndiff)+ perimeter_coincide(ngate_rfhv,d_tndiff))/2)/nr
   lr = (area(ngate_rfhv)/wr)/nr
]
TRACE PROPERTY nmos_rf_hvt wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_hvt lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hvt nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hvt_layer = DEVICE LAYER nmos_rf_hvt ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hvt"
]
LVS ANNOTATE DEVICES nmos_rf_hvt_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_hvt_6t ngate_nthin_hv_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rfhv> [
   property lr,wr,nr
   nr = count(ngate_rfhv)
   wr = ((perimeter_coincide(ngate_rfhv,s_tndiff)+ perimeter_coincide(ngate_rfhv,d_tndiff))/2)/nr
   lr = (area(ngate_rfhv)/wr)/nr
]
TRACE PROPERTY nmos_rf_hvt_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_hvt_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hvt_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hvt_6t_layer = DEVICE LAYER nmos_rf_hvt_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hvt_6t"
]
LVS ANNOTATE DEVICES nmos_rf_hvt_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_hvt_nodnw ngate_nthin_hvnodnw d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rfhv> netlist model nmos_rf_hvt [
   property lr,wr,nr
   nr = count(ngate_rfhv)
   wr = ((perimeter_coincide(ngate_rfhv,s_tndiff)+ perimeter_coincide(ngate_rfhv,d_tndiff))/2)/nr
   lr = (area(ngate_rfhv)/wr)/nr
]
TRACE PROPERTY nmos_rf_hvt_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_hvt_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hvt_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hvt_nodnw_layer = DEVICE LAYER nmos_rf_hvt_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hvt_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_hvt_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_lvt ngate_nthin_lv d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rflv> [
   property lr,wr,nr
   nr = count(ngate_rflv)
   wr = ((perimeter_coincide(ngate_rflv,s_tndiff)+ perimeter_coincide(ngate_rflv,d_tndiff))/2)/nr
   lr = (area(ngate_rflv)/wr)/nr
]
TRACE PROPERTY nmos_rf_lvt wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_lvt lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_lvt nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_lvt_layer = DEVICE LAYER nmos_rf_lvt ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_lvt"
]
LVS ANNOTATE DEVICES nmos_rf_lvt_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_lvt_6t ngate_nthin_lv_6t d_tndiff(D) poly_rf(G) s_tndiff(S) rwel(B) DNW(NG) rfdmy56(PG) <ngate_rflv> [
   property lr,wr,nr
   nr = count(ngate_rflv)
   wr = ((perimeter_coincide(ngate_rflv,s_tndiff)+ perimeter_coincide(ngate_rflv,d_tndiff))/2)/nr
   lr = (area(ngate_rflv)/wr)/nr
]
TRACE PROPERTY nmos_rf_lvt_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_lvt_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_lvt_6t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_lvt_6t_layer = DEVICE LAYER nmos_rf_lvt_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_lvt_6t"
]
LVS ANNOTATE DEVICES nmos_rf_lvt_6t_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_lvt_nodnw ngate_nthin_lvnodnw d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rflv> netlist model nmos_rf_lvt [
   property lr,wr,nr
   nr = count(ngate_rflv)
   wr = ((perimeter_coincide(ngate_rflv,s_tndiff)+ perimeter_coincide(ngate_rflv,d_tndiff))/2)/nr
   lr = (area(ngate_rflv)/wr)/nr
]
TRACE PROPERTY nmos_rf_lvt_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_lvt_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_lvt_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_lvt_nodnw_layer = DEVICE LAYER nmos_rf_lvt_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_lvt_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_lvt_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmos_rf_nodnw ngate_nthin_nodnw d_tndiff(D) poly_rf(G) s_tndiff(S) psub(B) <ngate_rf> netlist model nmos_rf [
   property lr,wr,nr
   nr = count(ngate_rf)
   wr = ((perimeter_coincide(ngate_rf,s_tndiff)+ perimeter_coincide(ngate_rf,d_tndiff))/2)/nr
   lr = (area(ngate_rf)/wr)/nr
]
TRACE PROPERTY nmos_rf_nodnw wr wr RFMOS_Werr
TRACE PROPERTY nmos_rf_nodnw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_nodnw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_nodnw_layer = DEVICE LAYER nmos_rf_nodnw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_nodnw"
]
LVS ANNOTATE DEVICES nmos_rf_nodnw_layer
#ENDIF
#ENDIF

DEVICE nmoscap vargt vargt(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt)
       lr = perimeter_coincide(vargt,nthin)/nr/2
       A  = area(vargt)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap lr lr MOSCAP_Lerr

DEVICE nmoscap_18 vargt_18 vargt_18(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt_18)
       lr = perimeter_coincide(vargt_18,nthin)/nr/2
       A  = area(vargt_18)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_18 wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_18 lr lr MOSCAP_Lerr

DEVICE nmoscap_25 vargt_25 vargt_25(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt_25)
       lr = perimeter_coincide(vargt_25,nthin)/nr/2
       A  = area(vargt_25)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_25 wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_25 lr lr MOSCAP_Lerr

DEVICE pdio_hia_rf hia_pdio_rf_r tpdiff(PLUS) nxwell(MINUS) RFDMY_HIA_bulk(BULK) <hia_pdio_rf> [
  property al,aw,fn
  fn = count(hia_pdio_rf)  
  A_DIO = area(hia_pdio_rf)/fn
  P_DIO = perimeter(hia_pdio_rf)/fn
  P_2_DIO = P_DIO * P_DIO
  AD4 = A_DIO * 16
  KKK = P_2_DIO-AD4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  al = (P_DIO+SQ)/4
  aw = (P_DIO-SQ)/4
]    

TRACE PROPERTY pdio_hia_rf aw aw 0
TRACE PROPERTY pdio_hia_rf al al 0
TRACE PROPERTY pdio_hia_rf fn fn 0

#IFDEF RC_DECK
DEVICE pjf_4_mac pjf_4_mac_reg rwel_4vpjfet_d(D) JNW(G) rwel_4vpjfet_s(S) psub_under_jfet(SUB) <OD> <nxwell> [
   property l,w,dnwpsub_area,dnwpsub_pj

   w = perimeter_inside(pjf_4_mac_reg, OD)
   l = perimeter_inside(pjf_4_mac_reg, nxwell) / 2
   dnwpsub_area = 0
   dnwpsub_pj   = 0
]
#ELSE
DEVICE pjf_4_mac pjf_4_mac_reg rwel_4vpjfet_d(D) JNW(G) rwel_4vpjfet_s(S) psub_under_jfet(SUB) <OD> <nxwell> [
   property l,w

   w = perimeter_inside(pjf_4_mac_reg, OD)
   l = perimeter_inside(pjf_4_mac_reg, nxwell) / 2
]
#ENDIF
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pjf_4_mac_ODN_layer = DEVICE LAYER pjf_4_mac ANNOTATE 
       [PROPERTY pname
       pname = "pjf_4_mac"
       ]
LVS ANNOTATE DEVICES pjf_4_mac_ODN_layer
#ENDIF
#ENDIF
TRACE PROPERTY pjf_4_mac w w 0
TRACE PROPERTY pjf_4_mac l l 0

DEVICE pjf_poly_25_mac pjf_poly_25_mac_reg tpdiff_jfet(D) tndiff_jfet(G) tpdiff_jfet(S) psub_under_jfet(SUB) <poly> <NP_2d5v_JFET> (S D) [
   property l,w
   
   w = perimeter_coincide(pjf_poly_25_mac_reg,tpdiff_jfet) / count(tpdiff_jfet) 
   l1 =  perimeter_inside(NP_2d5v_JFET, poly) / 2 
   l =  area(poly) / l1
]
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pjf_poly_25_mac_ODN_layer = DEVICE LAYER pjf_poly_25_mac ANNOTATE
       [PROPERTY pname
       pname = "pjf_poly_25_mac"
       ]
LVS ANNOTATE DEVICES pjf_poly_25_mac_ODN_layer
#ENDIF
#ENDIF  
TRACE PROPERTY pjf_poly_25_mac w w 0 
TRACE PROPERTY pjf_poly_25_mac l l 0

DEVICE pmos_rf pgate_pthin d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf> [
   property lr,wr,nr
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
]
TRACE PROPERTY pmos_rf wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_layer = DEVICE LAYER pmos_rf ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf"
]
LVS ANNOTATE DEVICES pmos_rf_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25 pgate_pthin_25 d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25> [
   property lr,wr,nr
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
]
TRACE PROPERTY pmos_rf_25 wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25 lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_layer = DEVICE LAYER pmos_rf_25 ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25"
]
LVS ANNOTATE DEVICES pmos_rf_25_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25_5t pgate_pthin_25_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25> [
   property lr,wr,nr
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
]
TRACE PROPERTY pmos_rf_25_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_5t_layer = DEVICE LAYER pmos_rf_25_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25_nw pgate_pthin_25nw d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25> [
   property lr,wr,nr
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
]
TRACE PROPERTY pmos_rf_25_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_nw_layer = DEVICE LAYER pmos_rf_25_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25_nw"
]
LVS ANNOTATE DEVICES pmos_rf_25_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25_nw_5t pgate_pthin_25nw_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25> [
   property lr,wr,nr
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
]
TRACE PROPERTY pmos_rf_25_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_nw_5t_layer = DEVICE LAYER pmos_rf_25_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25od33 pgate_pthin_25od d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25od> [
   property lr,wr,nr
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
]
TRACE PROPERTY pmos_rf_25od33 wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33 lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_layer = DEVICE LAYER pmos_rf_25od33 ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25od33_5t pgate_pthin_25od_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25od> [
   property lr,wr,nr
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
]
TRACE PROPERTY pmos_rf_25od33_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_5t_layer = DEVICE LAYER pmos_rf_25od33_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25od33_nw pgate_pthin_25nwod d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25od> [
   property lr,wr,nr
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
]
TRACE PROPERTY pmos_rf_25od33_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_nw_layer = DEVICE LAYER pmos_rf_25od33_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33_nw"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25od33_nw_5t pgate_pthin_25nwod_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25od> [
   property lr,wr,nr
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
]
TRACE PROPERTY pmos_rf_25od33_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_nw_5t_layer = DEVICE LAYER pmos_rf_25od33_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25ud18 pgate_pthin_25ud d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
TRACE PROPERTY pmos_rf_25ud18 wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18 lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18 nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_layer = DEVICE LAYER pmos_rf_25ud18 ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25ud18_5t pgate_pthin_25ud_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
TRACE PROPERTY pmos_rf_25ud18_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_5t_layer = DEVICE LAYER pmos_rf_25ud18_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25ud18_nw pgate_pthin_25nwud d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
TRACE PROPERTY pmos_rf_25ud18_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_nw_layer = DEVICE LAYER pmos_rf_25ud18_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18_nw"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_25ud18_nw_5t pgate_pthin_25nwud_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
TRACE PROPERTY pmos_rf_25ud18_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_nw_5t_layer = DEVICE LAYER pmos_rf_25ud18_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_5t pgate_pthin_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf> [
   property lr,wr,nr
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
]
TRACE PROPERTY pmos_rf_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_5t_layer = DEVICE LAYER pmos_rf_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_5t"
]
LVS ANNOTATE DEVICES pmos_rf_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_elvt pgate_pthin_elv d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfelv> [
   property lr,wr,nr
   nr = count(pgate_rfelv)
   wr = ((perimeter_coincide(pgate_rfelv,s_tpdiff)+ perimeter_coincide(pgate_rfelv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfelv)/wr)/nr
]
TRACE PROPERTY pmos_rf_elvt wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_elvt lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_elvt nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_elvt_layer = DEVICE LAYER pmos_rf_elvt ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_elvt"
]
LVS ANNOTATE DEVICES pmos_rf_elvt_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_elvt_5t pgate_pthin_elv_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfelv> [
   property lr,wr,nr
   nr = count(pgate_rfelv)
   wr = ((perimeter_coincide(pgate_rfelv,s_tpdiff)+ perimeter_coincide(pgate_rfelv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfelv)/wr)/nr
]
TRACE PROPERTY pmos_rf_elvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_elvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_elvt_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_elvt_5t_layer = DEVICE LAYER pmos_rf_elvt_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_elvt_5t"
]
LVS ANNOTATE DEVICES pmos_rf_elvt_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_elvt_nw pgate_pthin_elvnw d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfelv> [
   property lr,wr,nr
   nr = count(pgate_rfelv)
   wr = ((perimeter_coincide(pgate_rfelv,s_tpdiff)+ perimeter_coincide(pgate_rfelv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfelv)/wr)/nr
]
TRACE PROPERTY pmos_rf_elvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_elvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_elvt_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_elvt_nw_layer = DEVICE LAYER pmos_rf_elvt_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_elvt_nw"
]
LVS ANNOTATE DEVICES pmos_rf_elvt_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_elvt_nw_5t pgate_pthin_elvnw_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfelv> [
   property lr,wr,nr
   nr = count(pgate_rfelv)
   wr = ((perimeter_coincide(pgate_rfelv,s_tpdiff)+ perimeter_coincide(pgate_rfelv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfelv)/wr)/nr
]
TRACE PROPERTY pmos_rf_elvt_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_elvt_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_elvt_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_elvt_nw_5t_layer = DEVICE LAYER pmos_rf_elvt_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_elvt_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_elvt_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_hvt pgate_pthin_hv d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
TRACE PROPERTY pmos_rf_hvt wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_layer = DEVICE LAYER pmos_rf_hvt ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_hvt_5t pgate_pthin_hv_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
TRACE PROPERTY pmos_rf_hvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_5t_layer = DEVICE LAYER pmos_rf_hvt_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt_5t"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_hvt_nw pgate_pthin_hvnw d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
TRACE PROPERTY pmos_rf_hvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_nw_layer = DEVICE LAYER pmos_rf_hvt_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt_nw"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_hvt_nw_5t pgate_pthin_hvnw_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
TRACE PROPERTY pmos_rf_hvt_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_nw_5t_layer = DEVICE LAYER pmos_rf_hvt_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_lvt pgate_pthin_lv d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rflv> [
   property lr,wr,nr
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
]
TRACE PROPERTY pmos_rf_lvt wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_layer = DEVICE LAYER pmos_rf_lvt ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_lvt_5t pgate_pthin_lv_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rflv> [
   property lr,wr,nr
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
]
TRACE PROPERTY pmos_rf_lvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_5t_layer = DEVICE LAYER pmos_rf_lvt_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt_5t"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_lvt_nw pgate_pthin_lvnw d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rflv> [
   property lr,wr,nr
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
]
TRACE PROPERTY pmos_rf_lvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_nw_layer = DEVICE LAYER pmos_rf_lvt_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt_nw"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_lvt_nw_5t pgate_pthin_lvnw_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rflv> [
   property lr,wr,nr
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
]
TRACE PROPERTY pmos_rf_lvt_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_nw_5t_layer = DEVICE LAYER pmos_rf_lvt_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_nw pgate_pthin_nw d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf> [
   property lr,wr,nr
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
]
TRACE PROPERTY pmos_rf_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_nw nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_nw_layer = DEVICE LAYER pmos_rf_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_nw"
]
LVS ANNOTATE DEVICES pmos_rf_nw_layer
#ENDIF
#ENDIF

DEVICE pmos_rf_nw_5t pgate_pthin_nw_5t d_tpdiff(D) poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf> [
   property lr,wr,nr
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
]
TRACE PROPERTY pmos_rf_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_nw_5t nr nr 0
#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_nw_5t_layer = DEVICE LAYER pmos_rf_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_nw_5t_layer
#ENDIF
#ENDIF

DEVICE pmoscap_rf var_pw_rf poly3(PLUS) tpdiff(MINUS) DNW(BULK) <pvargt_rf> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf)/gr
  wr = (perimeter_coincide(pvargt_rf,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY pmoscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY pmoscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap_rf br br 0
TRACE PROPERTY pmoscap_rf gr gr 0

DEVICE pmoscap_rf25 var_pw_rf25 poly3(PLUS) tpdiff(MINUS) DNW(BULK) <pvargt_rf25> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf25)/gr
  wr = (perimeter_coincide(pvargt_rf25,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf25)/wr)/(br*gr)
]
TRACE PROPERTY pmoscap_rf25 lr lr MOSCAP_Lerr
TRACE PROPERTY pmoscap_rf25 wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap_rf25 br br 0
TRACE PROPERTY pmoscap_rf25 gr gr 0

//

DEVICE probe1 PROBEM1 metal1(TOP) PROBEM1_T(BULK) [
property a,pj
   a  = area(PROBEM1)
   pj = perimeter(PROBEM1) 
]
TRACE PROPERTY probe1 a a PROBE_Aerr
TRACE PROPERTY probe1 pj pj PROBE_Perr

DEVICE probe2 PROBEM2 metal2(TOP) PROBEM2_T(BULK) [
property a,pj
   a  = area(PROBEM2)
   pj = perimeter(PROBEM2) 
]
TRACE PROPERTY probe2 a a PROBE_Aerr
TRACE PROPERTY probe2 pj pj PROBE_Perr

DEVICE probe3 PROBEM3 metal3(TOP) PROBEM3_T(BULK) [
property a,pj
   a  = area(PROBEM3)
   pj = perimeter(PROBEM3) 
]
TRACE PROPERTY probe3 a a PROBE_Aerr
TRACE PROPERTY probe3 pj pj PROBE_Perr

DEVICE probe4 PROBEM4 metal4(TOP) PROBEM4_T(BULK) [
property a,pj
   a  = area(PROBEM4)
   pj = perimeter(PROBEM4) 
]
TRACE PROPERTY probe4 a a PROBE_Aerr
TRACE PROPERTY probe4 pj pj PROBE_Perr

//

DEVICE rm11 mtAPres metal7(PLUS) metal7(MINUS) netlist model rm11 (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mtAPres,metal7)/2
	l = area(mtAPres)/w
]
TRACE PROPERTY rm11 w  w  RES_Werr
TRACE PROPERTY rm11 l  l  RES_Lerr

DEVICE rm1w mt1res metal1(PLUS) metal1(MINUS) netlist model rm1w (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt1res,metal1)/2
	l = area(mt1res)/w
]
	TRACE PROPERTY rm1w w  w  RES_Werr
	TRACE PROPERTY rm1w l  l  RES_Lerr

DEVICE rm2w mt2res metal2(PLUS) metal2(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt2res,metal2)/2
	l = area(mt2res)/w
]
TRACE PROPERTY rm2w w  w  RES_Werr
TRACE PROPERTY rm2w l  l  RES_Lerr

DEVICE rm3w mt3res metal3(PLUS) metal3(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt3res,metal3)/2
	l = area(mt3res)/w
]
TRACE PROPERTY rm3w w  w  RES_Werr
TRACE PROPERTY rm3w l  l  RES_Lerr

DEVICE rm4w mt4res metal4(PLUS) metal4(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt4res,metal4)/2
	l = area(mt4res)/w
]
TRACE PROPERTY rm4w w  w  RES_Werr
TRACE PROPERTY rm4w l  l  RES_Lerr

DEVICE rm5w mt5res metal5(PLUS) metal5(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt5res,metal5)/2
	l = area(mt5res)/w
]
TRACE PROPERTY rm5w w  w  RES_Werr
TRACE PROPERTY rm5w l  l  RES_Lerr

DEVICE rm6w mt6res metal6(PLUS) metal6(MINUS) netlist model rmzw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt6res,metal6)/2
	l = area(mt6res)/w
]
TRACE PROPERTY rm6w w  w  RES_Werr
TRACE PROPERTY rm6w l  l  RES_Lerr

DEVICE rnodl rnodl_r tndiff(PLUS) tndiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnodl_r,tndiff)/2
	l = area(rnodl_r)/w
]
	TRACE PROPERTY rnodl w  w  RES_Werr
	TRACE PROPERTY rnodl l  l  RES_Lerr

DEVICE rnodl_m rnodl_mr tndiff(PLUS) tndiff(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rnodl_mr,tndiff)/2
   lr = area(rnodl_mr)/wr
]
TRACE PROPERTY rnodl_m wr wr RES_Werr
TRACE PROPERTY rnodl_m lr lr RES_Lerr

DEVICE rnods rnods_r tndiff(PLUS) tndiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnods_r,tndiff)/2
	l = area(rnods_r)/w
]
	TRACE PROPERTY rnods w  w  RES_Werr
	TRACE PROPERTY rnods l  l  RES_Lerr

DEVICE rnods_m rnods_mr tndiff(PLUS) tndiff(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rnods_mr,tndiff)/2
   lr = area(rnods_mr)/wr
]
TRACE PROPERTY rnods_m wr wr RES_Werr
TRACE PROPERTY rnods_m lr lr RES_Lerr

DEVICE rnodwo rnodwo_r tndiff(PLUS) tndiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnodwo_r,tndiff)/2
	l = area(rnodwo_r)/w
]
	TRACE PROPERTY rnodwo w  w  RES_Werr
	TRACE PROPERTY rnodwo l  l  RES_Lerr

DEVICE rnodwo_m rnodwo_mr tndiff(PLUS) tndiff(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rnodwo_mr,tndiff)/2
   lr = area(rnodwo_mr)/wr
]
TRACE PROPERTY rnodwo_m wr wr RES_Werr
TRACE PROPERTY rnodwo_m lr lr RES_Lerr

DEVICE rnpolyl rnpolyl_r poly(PLUS) poly(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnpolyl_r,poly)/2
	l = area(rnpolyl_r)/w
]
	TRACE PROPERTY rnpolyl w  w  RES_Werr
	TRACE PROPERTY rnpolyl l  l  RES_Lerr

DEVICE rnpolyl_m rnpolyl_dp poly(PLUS) poly(MINUS) psub(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rnpolyl_dp,poly)/2
  lr = area(rnpolyl_dp)/wr
]
DEVICE rnpolyl_m rnpolyl_dn poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rnpolyl_dn,poly)/2
  lr = area(rnpolyl_dn)/wr
]
TRACE PROPERTY rnpolyl_m wr wr RES_Werr
TRACE PROPERTY rnpolyl_m lr lr RES_Lerr

DEVICE rnpolys rnpolys_r poly(PLUS) poly(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnpolys_r,poly)/2
	l = area(rnpolys_r)/w
]
	TRACE PROPERTY rnpolys w  w  RES_Werr
	TRACE PROPERTY rnpolys l  l  RES_Lerr

DEVICE rnpolys_m rnpolys_dp poly(PLUS) poly(MINUS) psub(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rnpolys_dp,poly)/2
  lr = area(rnpolys_dp)/wr
]
DEVICE rnpolys_m rnpolys_dn poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rnpolys_dn,poly)/2
  lr = area(rnpolys_dn)/wr
]
TRACE PROPERTY rnpolys_m wr wr RES_Werr
TRACE PROPERTY rnpolys_m lr lr RES_Lerr

DEVICE rnpolywo rnpolywo_r poly(PLUS) poly(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnpolywo_r,poly)/2
	l = area(rnpolywo_r)/w
]
	TRACE PROPERTY rnpolywo w w RES_Werr
	TRACE PROPERTY rnpolywo l l RES_Lerr

DEVICE rnpolywo_m rnpolywo_dp poly(PLUS) poly(MINUS) psub(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rnpolywo_dp,poly)/2
  lr = area(rnpolywo_dp)/wr
]
DEVICE rnpolywo_m rnpolywo_dn poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rnpolywo_dn,poly)/2
  lr = area(rnpolywo_dn)/wr
]
TRACE PROPERTY rnpolywo_m wr wr RES_Werr
TRACE PROPERTY rnpolywo_m lr lr RES_Lerr

DEVICE rnpolywo_rf rnpolywo_rf poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rnpolywo_rf,poly)/2
  l = area(rnpolywo_rf)/w
]
TRACE PROPERTY rnpolywo_rf w w RES_Werr
TRACE PROPERTY rnpolywo_rf l l RES_Lerr

DEVICE rnwod nwod_r nxwell(PLUS) nxwell(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(nwod_r,nxwell)/2
	l = area(nwod_r)/w
]
	TRACE PROPERTY rnwod w w RES_Werr
	TRACE PROPERTY rnwod l l RES_Lerr

DEVICE rnwod_m nwod_mr nxwell(PLUS) nxwell(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(nwod_mr,nxwell)/2
   lr = area(nwod_mr)/wr
]
TRACE PROPERTY rnwod_m wr wr RES_Werr
TRACE PROPERTY rnwod_m lr lr RES_Lerr

DEVICE rnwsti nwsti_r nxwell(PLUS) nxwell(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(nwsti_r,nxwell)/2
	l = area(nwsti_r)/w
]
	TRACE PROPERTY rnwsti w w RES_Werr
	TRACE PROPERTY rnwsti l l RES_Lerr

DEVICE rnwsti_m nwsti_mr nxwell(PLUS) nxwell(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(nwsti_mr,nxwell)/2
   lr = area(nwsti_mr)/wr
]
TRACE PROPERTY rnwsti_m wr wr RES_Werr
TRACE PROPERTY rnwsti_m lr lr RES_Lerr

DEVICE rpodl rpodl_r tpdiff(PLUS) tpdiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rpodl_r,tpdiff)/2
	l = area(rpodl_r)/w
]
	TRACE PROPERTY rpodl w  w  RES_Werr
	TRACE PROPERTY rpodl l  l  RES_Lerr

DEVICE rpodl_m rpodl_mr tpdiff(PLUS) tpdiff(MINUS) nxwell(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rpodl_mr,tpdiff)/2
   lr = area(rpodl_mr)/wr
]
TRACE PROPERTY rpodl_m wr wr RES_Werr
TRACE PROPERTY rpodl_m lr lr RES_Lerr

DEVICE rpods rpods_r tpdiff(PLUS) tpdiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rpods_r,tpdiff)/2
	l = area(rpods_r)/w
]
	TRACE PROPERTY rpods w  w  RES_Werr
	TRACE PROPERTY rpods l  l  RES_Lerr

DEVICE rpods_m rpods_mr tpdiff(PLUS) tpdiff(MINUS) nxwell(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rpods_mr,tpdiff)/2
   lr = area(rpods_mr)/wr
]
TRACE PROPERTY rpods_m wr wr RES_Werr
TRACE PROPERTY rpods_m lr lr RES_Lerr

DEVICE rpodwo rpodwo_r tpdiff(PLUS) tpdiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rpodwo_r,tpdiff)/2
	l = area(rpodwo_r)/w
]
	TRACE PROPERTY rpodwo w  w  RES_Werr
	TRACE PROPERTY rpodwo l  l  RES_Lerr

DEVICE rpodwo_m rpodwo_mr tpdiff(PLUS) tpdiff(MINUS) nxwell(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rpodwo_mr,tpdiff)/2
   lr = area(rpodwo_mr)/wr
]
TRACE PROPERTY rpodwo_m wr wr RES_Werr
TRACE PROPERTY rpodwo_m lr lr RES_Lerr

DEVICE rppolyl rppolyl_r poly(PLUS) poly(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rppolyl_r,poly)/2
	l = area(rppolyl_r)/w
]
	TRACE PROPERTY rppolyl w  w  RES_Werr
	TRACE PROPERTY rppolyl l  l  RES_Lerr

DEVICE rppolyl_m rppolyl_dp poly(PLUS) poly(MINUS) psub(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolyl_dp,poly)/2
  lr = area(rppolyl_dp)/wr
]
DEVICE rppolyl_m rppolyl_dn poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolyl_dn,poly)/2
  lr = area(rppolyl_dn)/wr
]
TRACE PROPERTY rppolyl_m wr wr RES_Werr
TRACE PROPERTY rppolyl_m lr lr RES_Lerr

DEVICE rppolyl_rf rppolyl_rf poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rppolyl_rf,poly)/2
  l = area(rppolyl_rf)/w
]
TRACE PROPERTY rppolyl_rf w w RES_Werr
TRACE PROPERTY rppolyl_rf l l RES_Lerr

DEVICE rppolys rppolys_r poly(PLUS) poly(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rppolys_r,poly)/2
	l = area(rppolys_r)/w
]
	TRACE PROPERTY rppolys w  w  RES_Werr
	TRACE PROPERTY rppolys l  l  RES_Lerr

DEVICE rppolys_m rppolys_dp poly(PLUS) poly(MINUS) psub(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolys_dp,poly)/2
  lr = area(rppolys_dp)/wr
]
DEVICE rppolys_m rppolys_dn poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolys_dn,poly)/2
  lr = area(rppolys_dn)/wr
]
TRACE PROPERTY rppolys_m wr wr RES_Werr
TRACE PROPERTY rppolys_m lr lr RES_Lerr

DEVICE rppolys_rf rppolys_rf poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rppolys_rf,poly)/2
  l = area(rppolys_rf)/w
]
TRACE PROPERTY rppolys_rf w w RES_Werr
TRACE PROPERTY rppolys_rf l l RES_Lerr

DEVICE rppolywo rppolywo_r poly(PLUS) poly(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rppolywo_r,poly)/2
	l = area(rppolywo_r)/w
]
	TRACE PROPERTY rppolywo w w RES_Werr
	TRACE PROPERTY rppolywo l l RES_Lerr

DEVICE rppolywo_m rppolywo_dp poly(PLUS) poly(MINUS) psub(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolywo_dp,poly)/2
  lr = area(rppolywo_dp)/wr
]
DEVICE rppolywo_m rppolywo_dn poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolywo_dn,poly)/2
  lr = area(rppolywo_dn)/wr
]
TRACE PROPERTY rppolywo_m wr wr RES_Werr
TRACE PROPERTY rppolywo_m lr lr RES_Lerr

DEVICE rppolywo_rf rppolywo_rf poly(PLUS) poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rppolywo_rf,poly)/2
  l = area(rppolywo_rf)/w
]
TRACE PROPERTY rppolywo_rf w w RES_Werr
TRACE PROPERTY rppolywo_rf l l RES_Lerr

DEVICE rppolywo_serp_m rppolywo_serp_dp poly(PLUS) poly(MINUS) psub(BULK) <rppolywo_serp_d_aux> (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolywo_serp_dp,poly)/2
  lr = area(rppolywo_serp_dp)/wr
]
DEVICE rppolywo_serp_m rppolywo_serp_dn poly(PLUS) poly(MINUS) nxwell(BULK) <rppolywo_serp_d_aux> (PLUS MINUS) [
  property lr,wr
  wr = perimeter_coincide(rppolywo_serp_dn,poly)/2
  lr = area(rppolywo_serp_dn)/wr
]
TRACE PROPERTY rppolywo_serp_m wr wr RES_Werr
TRACE PROPERTY rppolywo_serp_m lr lr RES_Lerr

DEVICE sbd_pw_mac sbd_pw_reg rwel(PLUS) tndiff_sbd(MINUS) <sbd_w> netlist model sbd_pw_mac netlist element "X" [
   property l,w,nf
   nf = count(tndiff_sbd)
   w = perimeter_coincide(tndiff_sbd,sbd_w)/2/nf
   l = area(tndiff_sbd)/w/nf
]
TRACE PROPERTY sbd_pw_mac nf nf 0
TRACE PROPERTY sbd_pw_mac w w 0
TRACE PROPERTY sbd_pw_mac l l 0

DEVICE spiral_std_m2za_za std_m2za_za_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_m2za_za [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_m2za_za lay lay 0
  TRACE PROPERTY spiral_std_m2za_za w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_m2za_za spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_m2za_za nr nr 0
  TRACE PROPERTY spiral_std_m2za_za rad rad 0
  TRACE PROPERTY spiral_std_m2za_za gdis gdis 0

DEVICE spiral_std_mu_a std_mu_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mu_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mu_a lay lay 0
  TRACE PROPERTY spiral_std_mu_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mu_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mu_a nr nr 0
  TRACE PROPERTY spiral_std_mu_a rad rad 0
  TRACE PROPERTY spiral_std_mu_a gdis gdis 0

DEVICE spiral_std_mu_x std_mu_x_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mu_x [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mu_x lay lay 0
  TRACE PROPERTY spiral_std_mu_x w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mu_x spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mu_x nr nr 0
  TRACE PROPERTY spiral_std_mu_x rad rad 0
  TRACE PROPERTY spiral_std_mu_x gdis gdis 0

DEVICE spiral_std_mu_z std_mu_z_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mu_z [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mu_z lay lay 0
  TRACE PROPERTY spiral_std_mu_z w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mu_z spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mu_z nr nr 0
  TRACE PROPERTY spiral_std_mu_z rad rad 0
  TRACE PROPERTY spiral_std_mu_z gdis gdis 0

DEVICE spiral_std_mz_a std_mz_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mz_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mz_a lay lay 0
  TRACE PROPERTY spiral_std_mz_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mz_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mz_a nr nr 0
  TRACE PROPERTY spiral_std_mz_a rad rad 0
  TRACE PROPERTY spiral_std_mz_a gdis gdis 0

DEVICE spiral_std_mza_a std_mza_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mza_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mza_a lay lay 0
  TRACE PROPERTY spiral_std_mza_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mza_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mza_a nr nr 0
  TRACE PROPERTY spiral_std_mza_a rad rad 0
  TRACE PROPERTY spiral_std_mza_a gdis gdis 0

DEVICE spiral_sym_ct_m2za_z_a sym_ct_m2za_z_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm7c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_m2za_z_a [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_m2za_z_a lay lay 0
  TRACE PROPERTY spiral_sym_ct_m2za_z_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_m2za_z_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_m2za_z_a nr nr 0
  TRACE PROPERTY spiral_sym_ct_m2za_z_a rad rad 0
  TRACE PROPERTY spiral_sym_ct_m2za_z_a gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_m2za_z_a ctapw ctapw 0 

DEVICE spiral_sym_ct_mu_a_a sym_ct_mu_a_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm7c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_ct_mu_a_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_ct_mu_a_a lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_a_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_a_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_a_a nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_a_a rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_a_a gdis gdis 0 

DEVICE spiral_sym_ct_mu_a_x sym_ct_mu_a_x_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm6c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_mu_a_x [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mu_a_x lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_a_x w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_a_x spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_a_x nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_a_x rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_a_x gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_mu_a_x ctapw ctapw 0 

DEVICE spiral_sym_ct_mu_x_a sym_ct_mu_x_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm7c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_mu_x_a [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mu_x_a lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_x_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_x_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_x_a nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_x_a rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_x_a gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_mu_x_a ctapw ctapw 0 

DEVICE spiral_sym_ct_mu_z_a sym_ct_mu_z_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm7c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_mu_z_a [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mu_z_a lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_z_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_z_a nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_mu_z_a ctapw ctapw 0 

DEVICE spiral_sym_ct_mu_z_x sym_ct_mu_z_x_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm6c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_mu_z_x [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mu_z_x lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_z_x w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_z_x spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_z_x nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_z_x rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_z_x gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_mu_z_x ctapw ctapw 0 

DEVICE spiral_sym_ct_mz_a_x sym_ct_mz_a_x_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm6c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTX> <IND_CTW> netlist model spiral_sym_ct_mz_a_x [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctx,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctx = ( perimeter(IND_CTX) - 5e-9*2 ) * 5e6
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mz_a_x lay lay 0
  TRACE PROPERTY spiral_sym_ct_mz_a_x w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mz_a_x spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mz_a_x nr nr 0
  TRACE PROPERTY spiral_sym_ct_mz_a_x rad rad 0
  TRACE PROPERTY spiral_sym_ct_mz_a_x gdis gdis 0
  TRACE PROPERTY spiral_sym_ct_mz_a_x ctx ctx 0
  TRACE PROPERTY spiral_sym_ct_mz_a_x ctapw ctapw 0 

DEVICE spiral_sym_ct_mz_ax_a sym_ct_mz_ax_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm7c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_ct_mz_ax_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_ct_mz_ax_a lay lay 0
  TRACE PROPERTY spiral_sym_ct_mz_ax_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mz_ax_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mz_ax_a nr nr 0
  TRACE PROPERTY spiral_sym_ct_mz_ax_a rad rad 0
  TRACE PROPERTY spiral_sym_ct_mz_ax_a gdis gdis 0 

DEVICE spiral_sym_ct_mza_a_x sym_ct_mza_a_x_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) indm7c(CTAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTX> <IND_CTW> netlist model spiral_sym_ct_mza_a_x [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctx,ctapw
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctx = ( perimeter(IND_CTX) - 5e-9*2 ) * 5e6
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mza_a_x lay lay 0
  TRACE PROPERTY spiral_sym_ct_mza_a_x w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mza_a_x spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mza_a_x nr nr 0
  TRACE PROPERTY spiral_sym_ct_mza_a_x rad rad 0
  TRACE PROPERTY spiral_sym_ct_mza_a_x gdis gdis 0
  TRACE PROPERTY spiral_sym_ct_mza_a_x ctx ctx 0
  TRACE PROPERTY spiral_sym_ct_mza_a_x ctapw ctapw 0 

DEVICE spiral_sym_m2za_z sym_m2za_z_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_m2za_z [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_m2za_z lay lay 0
  TRACE PROPERTY spiral_sym_m2za_z w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_m2za_z spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_m2za_z nr nr 0
  TRACE PROPERTY spiral_sym_m2za_z rad rad 0
  TRACE PROPERTY spiral_sym_m2za_z gdis gdis 0

DEVICE spiral_sym_mu_a sym_mu_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mu_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mu_a lay lay 0
  TRACE PROPERTY spiral_sym_mu_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mu_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mu_a nr nr 0
  TRACE PROPERTY spiral_sym_mu_a rad rad 0
  TRACE PROPERTY spiral_sym_mu_a gdis gdis 0

DEVICE spiral_sym_mu_x sym_mu_x_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mu_x [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mu_x lay lay 0
  TRACE PROPERTY spiral_sym_mu_x w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mu_x spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mu_x nr nr 0
  TRACE PROPERTY spiral_sym_mu_x rad rad 0
  TRACE PROPERTY spiral_sym_mu_x gdis gdis 0

DEVICE spiral_sym_mu_z sym_mu_z_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mu_z [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mu_z lay lay 0
  TRACE PROPERTY spiral_sym_mu_z w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mu_z spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mu_z nr nr 0
  TRACE PROPERTY spiral_sym_mu_z rad rad 0
  TRACE PROPERTY spiral_sym_mu_z gdis gdis 0

DEVICE spiral_sym_mz_a sym_mz_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mz_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mz_a lay lay 0
  TRACE PROPERTY spiral_sym_mz_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mz_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mz_a nr nr 0
  TRACE PROPERTY spiral_sym_mz_a rad rad 0
  TRACE PROPERTY spiral_sym_mz_a gdis gdis 0

DEVICE spiral_sym_mz_ax sym_mz_ax_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mz_ax [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mz_ax lay lay 0
  TRACE PROPERTY spiral_sym_mz_ax w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mz_ax spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mz_ax nr nr 0
  TRACE PROPERTY spiral_sym_mz_ax rad rad 0
  TRACE PROPERTY spiral_sym_mz_ax gdis gdis 0

DEVICE spiral_sym_mza_a sym_mza_a_ind indm6p(PLUS) indm6m(MINUS) psub(BULK) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mza_a [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 6
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mza_a lay lay 0
  TRACE PROPERTY spiral_sym_mza_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mza_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mza_a nr nr 0
  TRACE PROPERTY spiral_sym_mza_a rad rad 0
  TRACE PROPERTY spiral_sym_mza_a gdis gdis 0

w_fac = EXT tpdiff_jvar tndiff_jvar < 0.29 OPPOSITE REGION
DEVICE xjvar jvar_rf tpdiff(PLUS) tndiff(MINUS) psub(BULK) <w_fac> <jvar3_rf> [
   property l,w,nr
   nr = count(jvar3_rf)
   w = (perimeter_coincide(jvar3_rf,w_fac)/nr)/2
   l = (area(jvar3_rf)/w)/nr
]
TRACE PROPERTY xjvar w w VAR_Werr
TRACE PROPERTY xjvar l l VAR_Lerr
TRACE PROPERTY xjvar nr nr 0

w_fac1 = EXT tpdiff_jvar tndiff_jvar < 0.29 OPPOSITE REGION
DEVICE xjvar_nw jvar_rfnw tpdiff(PLUS) tndiff(MINUS) psub(BULK) <w_fac1> <jvar3_rf> [
   property l,w,nr
   nr = count(jvar3_rf)
   w = (perimeter_coincide(jvar3_rf,w_fac1)/nr)/2
   l = (area(jvar3_rf)/w)/nr
]
TRACE PROPERTY xjvar_nw w w VAR_Werr
TRACE PROPERTY xjvar_nw l l VAR_Lerr
TRACE PROPERTY xjvar_nw nr nr 0

#IFDEF RC_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
ERC TVF do_Perc_ADP Perc_ADP_properties annotate_adp_properties

TVF FUNCTION Perc_ADP_properties [/*
    package require CalibreLVS_ERC_TVF

    proc annotate_adp_properties {} {

#IFDEF FLICKER_CORNER_EXTRACTION
     erc::setup_parallel_device_parameters -devices { LDDN(nch_hv25_snw) LDDP(pch_hv25_spw) MN(nch) MN(nch_18) MN(nch_18_dnw) MN(nch_18ud15) MN(nch_18ud15_dnw) MN(nch_25) MN(nch_25_dnw) MN(nch_25_fgd_dnw_mac) MN(nch_25_fgd_mac) MN(nch_25_ngd_dnw_mac) MN(nch_25_ngd_mac) MN(nch_25od33) MN(nch_25od33_dnw) MN(nch_25ud18) MN(nch_25ud18_dnw) MN(nch_ana25_dnw_mac) MN(nch_ana25_mac) MN(nch_avt) MN(nch_avt_dnw) MN(nch_dnw) MN(nch_ehvt) MN(nch_ehvt_dnw) MN(nch_elvt) MN(nch_elvt_dnw) MN(nch_hvt) MN(nch_hvt_dnw) MN(nch_lvt) MN(nch_lvt_dnw) MN(nch_na) MN(nch_na18) MN(nch_na25) MN(nch_na25od33) MN(nch_na25ud18) MN(nch_naavt) MP(pch) MP(pch_18) MP(pch_18ud15) MP(pch_25) MP(pch_25od33) MP(pch_25ud18) MP(pch_avt) MP(pch_ehvt) MP(pch_elvt) MP(pch_hvt) MP(pch_lvt)  } -total { total { drawn_l drawn_w } }
     erc::setup_parallel_device_parameters -devices { njf_4_mac pjf_4_mac njf_poly_25_mac pjf_poly_25_mac  } -total { total { l w } }
     erc::setup_parallel_device_parameters -devices { nmos_rf nmos_rf_nodnw nmos_rf_hvt nmos_rf_hvt_nodnw nmos_rf_lvt nmos_rf_lvt_nodnw nmos_rf_elvt nmos_rf_elvt_nodnw nmos_rf_25 nmos_rf_25_nodnw nmos_rf_25od33 nmos_rf_25od33_nodnw nmos_rf_25ud18 nmos_rf_25ud18_nodnw pmos_rf pmos_rf_nw pmos_rf_hvt pmos_rf_hvt_nw pmos_rf_lvt pmos_rf_lvt_nw pmos_rf_elvt pmos_rf_elvt_nw pmos_rf_25 pmos_rf_25_nw pmos_rf_25od33 pmos_rf_25od33_nw pmos_rf_25ud18 pmos_rf_25ud18_nw nmos_rf_6t nmos_rf_elvt_6t nmos_rf_25_6t nmos_rf_25od33_6t nmos_rf_25ud18_6t pmos_rf_5t pmos_rf_nw_5t pmos_rf_25_5t pmos_rf_25_nw_5t pmos_rf_25od33_5t pmos_rf_25od33_nw_5t pmos_rf_25ud18_5t pmos_rf_25ud18_nw_5t nmos_rf_hvt_6t nmos_rf_lvt_6t pmos_rf_hvt_5t pmos_rf_hvt_nw_5t pmos_rf_lvt_5t pmos_rf_lvt_nw_5t pmos_rf_elvt_5t pmos_rf_elvt_nw_5t  } -sum { nr total_rf { lr wr } }
     erc::execute_parallel_device_parameters 
#ENDIF
    }
*/]
#ENDIF
#ENDIF
TVF FUNCTION device_function [/*

    package require CalibreLVS_DEVICE_DFM
    namespace import device::*
    proc catching_expr { arg } {
      	#puts "called catching_expr"
      	set rtval 0.0
      	if { [ catch {
            set rtval [ expr $arg ]
      	} result ] } {
            global errorCode
            set tmpError $errorCode
            #puts $result
            if { [ string match "ARITH UNDERFLOW *" $errorCode ] } {
            	#puts "$errorCode error caught during expr"
            	set rtval 0.0
            } elseif { [ string match "ARITH OVERFLOW *" $errorCode ] } {
	    	#puts "$errorCode error caught during expr"
            	set rtval 1e200
            } else {
            	#puts "error propagated during expr"
            	error $result $tmpError
            }
      	}
      	return $rtval
    }

    proc calc_sca { SCH SCV W L LR_EXT TOP_EXT BOT_EXT SCALE } {
  	set sca_sum1 0.0
  	set sca_sum2 0.0
  	set SCref 1.0
  	set slice_count1 [ $SCH slice_count ]
  	set slice_count2 [ $SCV slice_count ]

  	for { set i 0 } { $i < $slice_count1} { incr i } {
       	    set sca_sum1 [ expr { $sca_sum1 + ( ([$SCALE]*[$SCH w $i]) * ( ($SCref * $SCref/([$SCALE]*([$SCH a $i]+[$LR_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))) +  ($SCref * $SCref/([$SCALE]*([$SCH b $i]+[$LR_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))))) }]
       	}

  	for { set i 0 } { $i < $slice_count2} { incr i } {
            set sca_sum2 [ expr { $sca_sum2 + ( ([$SCALE]*[$SCV w $i]) * ( ($SCref * $SCref/([$SCALE]*([$SCV a $i]+[$BOT_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))) + ($SCref * $SCref/([$SCALE]*([$SCV b $i]+[$TOP_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))))) }]
       	}

  	return [ expr { ($sca_sum1 + $sca_sum2) / ( (([$SCALE]*[$W]) * ([$SCALE]*[$L])) * 1e12) }]
    }

    proc calc_scb {  SCH SCV W  L LR_EXT TOP_EXT BOT_EXT SCALE } {
  	set scb_sum1 0.0
	set scb_sum2 0.0
  	set SCref 1.0
  	set slice_count1 [ $SCH slice_count ]
  	set slice_count2 [ $SCV slice_count ]
  	for { set i 0 } { $i < $slice_count1} { incr i } {
  	    set exp_term1 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
  	    set exp_term2 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
  	    set exp_term3 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
    	    set exp_term4 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
   	    set exp_term5 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
  	    set exp_term6 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set scb_sum1 [ expr { $scb_sum1 + ( ([$SCALE]*[ $SCH w $i ])*1e6 * (   (([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6*( $exp_term1/10)) +   ($SCref*($exp_term2/100)) - (([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6*($exp_term3/10)) - (($SCref*($exp_term4/100))) + (([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6*( $exp_term5/10)) +   ($SCref*($exp_term6/100)) - (([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6*($exp_term7/10)) - ($SCref*($exp_term8/100))       )) } ]
     	}
   	for { set i 0 } { $i < $slice_count2} { incr i } {
	    set exp_term1 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term2 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term3 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term4 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term5 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term6 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set scb_sum2 [ expr { $scb_sum2 + ( ([$SCALE]*[$SCV w $i])*1e6 * (   (([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6*( $exp_term1/10)) +   ($SCref*($exp_term2/100)) - (([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6*($exp_term3/10)) - ($SCref*($exp_term4/100)) + (([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6*( $exp_term5/10)) +   ($SCref*($exp_term6/100)) - (([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6*($exp_term7/10)) - ($SCref*($exp_term8/100))       )) } ]
     	}
	return [ expr { ( $scb_sum1 + $scb_sum2)  / ( (([$SCALE]*[$W]) * ([$SCALE]*[$L])) *1e12) }]
    }

    proc calc_scc { SCH SCV W L LR_EXT TOP_EXT BOT_EXT SCALE } {
  	set scc_sum1 0.0
	set scc_sum2 0.0
	set SCref 1.0
	set slice_count1 [ $SCH slice_count ]
	set slice_count2 [ $SCV slice_count ]
	for { set i 0 } { $i < $slice_count1} { incr i } { 
	    set exp_term1 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term2 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term3 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term4 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term5 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term6 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set scc_sum1 [ expr { $scc_sum1 + ( ([$SCALE]*[$SCH w $i])*1e6 * (   (([$SCALE]*([$SCH a $i]+ [$LR_EXT]))*1e6*( $exp_term1/20)) +   ($SCref*($exp_term2/400)) - (([$SCALE]*([$SCH a $i]+[$L]+ [$LR_EXT]))*1e6*($exp_term3/20)) - ($SCref*($exp_term4/400)) + (([$SCALE]*([$SCH b $i]+ [$LR_EXT]))*1e6*( $exp_term5/20)) +   ($SCref*($exp_term6/400)) - (([$SCALE]*([$SCH b $i]+[$L]+ [$LR_EXT]))*1e6*($exp_term7/20)) - ($SCref*($exp_term8/400))       )) } ]
	}
	for { set i 0 } { $i < $slice_count2} { incr i } {
	    set exp_term1 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term2 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term3 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term4 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term5 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term6 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set scc_sum2 [ expr { $scc_sum2 + ( ([$SCALE]*[$SCV w $i])*1e6 * (   (([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6*( $exp_term1/20)) +   ($SCref*($exp_term2/400)) - (([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6*($exp_term3/20)) - ($SCref*($exp_term4/400)) + (([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6*( $exp_term5/20)) +   ($SCref*($exp_term6/400)) - (([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6*($exp_term7/20)) - ($SCref*($exp_term8/400))       )) } ]
	}
	return [ expr { ( $scc_sum1 + $scc_sum2)  / ( (([$SCALE]*[$W]) * ([$SCALE]*[$L])) *1e12) }]
    }
    proc calc_lod_sasb { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/($sa+0.5*$Lsi)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ((1.0/$accum)-0.5*$Lsi)/[$scale] } ]
    }
    
    proc calc_lod_sa1sb1 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/pow($sa+0.1*$Lsi,3)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { (pow(1.0/$accum,1.0/3)-0.1*$Lsi)/[$scale] } ]
    }

    proc calc_lod_sa2sb2 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*sqrt(pow(5e-7/($sa+0.5*$Lsi),2)+1)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ( 5e-7/sqrt(pow($accum,2)-1) - 0.5*$Lsi ) /[$scale] } ]
    }

    proc calc_lod_sa3sb3 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)/(1+pow(5e-7/($sa+0.1*$Lsi),3))} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ( 5e-7/pow(1.0/$accum - 1,1.0/3) - 0.1*$Lsi ) /[$scale] } ]
    }

    proc calc_sca_dfm__getsum { tclvec pgw ext units WPED } {
        
        # scale cancels out in this ratio, discarded
        # pgw = perpendicular gate width (L for sides, W for ends)
        # ext = encval extension (LR_EXT for sides, TOP_EXT/BOT_EXT for ends)
        
        set SCref 1.0
        set sum 0.0
        
        foreach segment $tclvec {
        	foreach { width encval } $segment {
        	    set width [ expr { $width * $units } ]
        	    set encval [ min $encval $WPED ]
        	    set encval [ expr { $encval * $units } ]
        	    set sum [ expr { $sum + $width * ( \
        		   $SCref * $SCref / ( $encval + $ext ) - \
        		   $SCref * $SCref / ( $encval + $pgw + $ext ) \
        		   ) } ]
        	}
        }
        
        return $sum
    }
    
    proc calc_sca_dfm { PER_1 PER_2 PAR_1 PAR_2 W L LR_EXT TOP_EXT BOT_EXT UNITS SCALE WPED} {
        
        set side_1 [ dfm_vec_measurements $PER_1 ]
        set side_2 [ dfm_vec_measurements $PER_2 ]
        set sides  [ concat $side_1 $side_2 ]
    
        set end_1  [ dfm_vec_measurements $PAR_1 ]
        set end_2  [ dfm_vec_measurements $PAR_2 ]
        
        set sum [ expr { [ calc_sca_dfm__getsum $sides [$L] [$LR_EXT] [$UNITS] [$WPED] ] + \
    			 [ calc_sca_dfm__getsum $end_1 [$W] [$BOT_EXT] [$UNITS] [$WPED] ] + \
    			 [ calc_sca_dfm__getsum $end_2 [$W] [$TOP_EXT] [$UNITS] [$WPED] ] } ]
        
        return [ expr { $sum / ( [$SCALE] * [$W] * [$SCALE] * [$L] * 1e12 ) } ]
    }	

    proc calc_scbscc_dfm__getsum { tclvec pgw ext units scale em d1 d2 WPED} {
    
        # pgw = perpendicular gate width (L for sides, W for ends)
        # ext = encval extension (LR_EXT for sides, TOP_EXT/BOT_EXT for ends)
        # em = multiplier for args to exp
        # d1 = denominator1 (for 1st and 3rd terms)
        # d2 = denominator2 (for 2nd and 4th terms)
        
        set SCref 1.0
        set sum 0.0
        set constant 1e6
        
        foreach segment $tclvec {
        	foreach { width encval } $segment {
        	    set width [ expr { $width * $units } ]
        	    set encval [ expr { $encval * $units } ]
        	    set encval [ min $encval $WPED ]
        	    set encval_1 [ expr { $scale * ( $encval + $ext ) } ]
        	    set encval_2 [ expr { $scale * ( $encval + $pgw + $ext ) } ]
                    set encval_1_exp [ catching_expr "exp( $em * $encval_1 * $constant / $SCref )" ]
                    set encval_2_exp [ catching_expr "exp( $em * $encval_2 * $constant / $SCref )" ]
        	    set sum [ expr { $sum + $scale * $width * $constant * ( \
        		       $encval_1 * $constant * ( $encval_1_exp/$d1 ) + \
    			       $SCref * ( $encval_1_exp/$d2 ) - \
    			       $encval_2 * $constant * ( $encval_2_exp/$d1 ) - \
    			       $SCref * ( $encval_2_exp/$d2 ) \
    			      ) } ]
    		}
        }
        
        return $sum
    }
    
    
    proc calc_scb_dfm { PER_1 PER_2 PAR_1 PAR_2 W L LR_EXT TOP_EXT BOT_EXT UNITS SCALE WPED } {
    
        set side_1 [ dfm_vec_measurements $PER_1 ]
        set side_2 [ dfm_vec_measurements $PER_2 ]
        set sides  [ concat $side_1 $side_2 ]
    
        set end_1  [ dfm_vec_measurements $PAR_1 ]
        set end_2  [ dfm_vec_measurements $PAR_2 ]
        
        set sum [ expr { [ calc_scbscc_dfm__getsum $sides [$L] [$LR_EXT] [$UNITS] [$SCALE] -10 10 100 [$WPED] ] + \
    			 [ calc_scbscc_dfm__getsum $end_1 [$W] [$BOT_EXT] [$UNITS] [$SCALE] -10 10 100 [$WPED] ] + \
    			 [ calc_scbscc_dfm__getsum $end_2 [$W] [$TOP_EXT] [$UNITS] [$SCALE] -10 10 100 [$WPED] ] } ]
        
        return [ expr { $sum / ( [$SCALE] * [$W] * [$SCALE] * [$L] * 1e12 ) } ]
    }

    proc calc_scc_dfm { PER_1 PER_2 PAR_1 PAR_2 W L LR_EXT TOP_EXT BOT_EXT UNITS SCALE WPED } {
    
        set side_1 [ dfm_vec_measurements $PER_1 ]
        set side_2 [ dfm_vec_measurements $PER_2 ]
        set sides  [ concat $side_1 $side_2 ]
        
        set end_1  [ dfm_vec_measurements $PAR_1 ]
        set end_2  [ dfm_vec_measurements $PAR_2 ]
        
        set sum [ expr { [ calc_scbscc_dfm__getsum $sides [$L] [$LR_EXT] [$UNITS] [$SCALE] -20 20 400 [$WPED] ] + \
			 [ calc_scbscc_dfm__getsum $end_1 [$W] [$BOT_EXT] [$UNITS] [$SCALE] -20 20 400 [$WPED] ] + \
			 [ calc_scbscc_dfm__getsum $end_2 [$W] [$TOP_EXT] [$UNITS] [$SCALE] -20 20 400 [$WPED] ] } ]
        
        return [ expr { $sum / ( [$SCALE] * [$W] * [$SCALE] * [$L] * 1e12 ) } ]
    }

    proc min { a b } {
            return [ expr { ($a < $b) ? $a : $b } ]
    }

    proc calc_lod_sa1 { SCH W L GATE_EXT SCALE } {
      	set sum1 0.0     
      	set slice_count1 [ $SCH slice_count ]     

      	for { set i 0 } { $i < $slice_count1 } { incr i } {
            set sum1 [ expr { $sum1 + [$SCALE]*[$SCH w $i] / pow([$SCALE]*([$SCH a $i] + [$GATE_EXT] + 0.1*[$L]),3) }]
        }
        return [ expr { ( pow(([$SCALE]*[$W] / $sum1) , (1.0/3.0)) - 0.1*[$SCALE]*[$L] )/[$SCALE] }]
    }

    proc calc_lod_sb1 { SCH W L GATE_EXT SCALE } {
      	set sum1 0.0     
      	set slice_count1 [ $SCH slice_count ]     

        for { set i 0 } { $i < $slice_count1 } { incr i } {
            set sum1 [ expr { $sum1 + [$SCALE]*[$SCH w $i] / pow([$SCALE]*([$SCH b $i] + [$GATE_EXT] + 0.1*[$L]),3) }]
        }
        return [ expr { ( pow(([$SCALE]*[$W] / $sum1) , (1.0/3.0)) - 0.1*[$SCALE]*[$L] )/[$SCALE] }]
    }

    proc calc_lod_sa2 { SCH W L GATE_EXT SCALE } {
    	set slice_count [ $SCH slice_count ]
        set constant1 5e-07
        set constant2 0.5
        set sum 0.0
        for { set i 0 } { $i < $slice_count } { incr i } {
            set sum [ expr { $sum + ( (([$SCALE]*[$SCH w $i])/([$SCALE]*[$W])) * sqrt( pow( ($constant1/(([$SCALE]*[$SCH a $i])+([$SCALE]*[$GATE_EXT]) + ($constant2*[$L]*[$SCALE]))), 2 ) 
+1 ) ) } ]
        }
        return [ expr { (($constant1 /sqrt( pow($sum, 2) -1 )) - ($constant2*[$L]*[$SCALE]))/[$SCALE] } ]
    }

    proc calc_lod_sb2 { SCH W L GATE_EXT SCALE } {
        set slice_count [ $SCH slice_count ]
        set constant1 5e-07
        set constant2 0.5
        set sum 0.0
        for { set i 0 } { $i < $slice_count } { incr i } {
            set sum [ expr { $sum + ( (([$SCALE]*[$SCH w $i])/([$W]*[$SCALE])) * sqrt( pow( ($constant1/(([$SCALE]*[$SCH b $i])+([$SCALE]*[$GATE_EXT]) + ($constant2*[$L]*[$SCALE]))), 2 )
+1 ) ) } ]
        }
        return [ expr { (($constant1 /sqrt( pow($sum, 2) -1 )) - ($constant2*[$L]*[$SCALE]))/[$SCALE] } ]
    }

    proc calc_lod_sa3 { SCH W L GATE_EXT SCALE } {
    	set accum 0.0
        set slice_count1 [ $SCH slice_count ]
        set constant [ expr { 5e-7} ] 
        for { set i 0 } { $i < $slice_count1 } { incr i } {
            set val [ expr { ( [$SCALE]*[$SCH w $i]) /  ( 1 + pow($constant/([$SCALE]*[$SCH a $i] +([$SCALE]*[$GATE_EXT]) + (0.1*[$L]*[$SCALE])),3))  }]
	    set accum [ expr { $accum + $val}]
        }
        return [ expr { (( $constant /   pow(([$SCALE]*[$W]/$accum)-1, 1.0/3))   - 0.1*[$SCALE]*[$L])/[$SCALE]  }]
    }

    proc calc_lod_sb3 { SCH W L GATE_EXT SCALE } {
        set accum 0.0
        set slice_count1 [ $SCH slice_count ]
        set constant [ expr { 5e-7} ]
        for { set i 0 } { $i < $slice_count1 } { incr i } {
            set val [ expr { ( [$SCALE]*[$SCH w $i]) /  ( 1 + pow($constant/([$SCALE]*[$SCH b $i] +([$SCALE]*[$GATE_EXT]) + (0.1*[$L]*[$SCALE])),3))  }]
            set accum [ expr { $accum + $val}]
        }
        return [ expr { (( $constant /   pow(([$SCALE]*[$W]/$accum)-1, 1.0/3))   - 0.1*[$SCALE]*[$L])/[$SCALE]  }]
    }


    proc compute_spa { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    	set constant [ expr { 3e-07 / [$units] } ]
    	
	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set val   [ expr { [$scale]*$width / ([$scale]*$spa + $constant) } ] 
	    	set accum [ expr { $accum + $val } ]
	    }
     	}
	
    	return [ expr { (((( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum ) - $constant) * [$units])/[$scale] } ]
    }

    proc compute_spa1 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    	set constant [ expr { 3e-07 / [$units] } ]
    	
	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set val   [ expr { [$scale]*$width / pow(([$scale]*$spa + $constant),2) } ] 
	    	set accum [ expr { $accum + $val } ]
	    }
    	}
	
    	return [ expr {( (sqrt(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum ) - $constant) * [$units])/[$scale] } ]
    }

    proc compute_spa2 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    
	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set val   [ expr { [$scale]*$width / pow([$scale]*$spa+0.1*[$scale]*[$drawn_length]/[$units],3) } ] 
	    	set accum [ expr { $accum + $val } ]
	    }
    	}
	
    	return [ expr { ((pow(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum, 1.0/3)-0.1*[$scale]*[$drawn_length]/[$units]) * [$units])/[$scale] } ]
	    
    }

    proc compute_spa3 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width spa spb se } $segment {
            	set val   [ expr { [$scale]*$width / pow([$scale]*$spa+0.5*[$scale]*[$drawn_length]/[$units],2) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
	
    	return [ expr { ((sqrt(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum)-0.5*[$scale]*[$drawn_length]/[$units]) * [$units])/[$scale] } ]
    }

    proc compute_sap { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width spa spb se } $segment {
            	set val   [ expr { [$scale]*$width / ( ([$scale]*$se+$constant) *  pow([$scale]*$spa+$constant,2) ) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
	
    	return [ expr {(( pow(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum,1.0/3))*[$units])/[$scale] } ] 
    }

    proc compute_sa4 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width spa spb se } $segment {
            	set val   [ expr { [$scale]*$width / ([$scale]*$se+$constant) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
	
    	return [ expr { (((( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum)-$constant)*[$units])/[$scale] } ] 
    }

    proc compute_spba { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left  ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    	set max_test [ expr { 5e-08 / [$units] } ]

    	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set diff  [ expr { [$scale]*$spb - [$scale]*$spa } ]
	    	set maxd  [ max $diff $max_test ]
	    	set val   [ expr { [$scale]*$width / ( pow([$scale]*$spa+0.1*[$scale]*[$drawn_length]/[$units],3) * pow($maxd,3) ) } ]
	    	set accum [ expr { $accum + $val } ]
	    }
        }

    	return [ expr { ((pow( (( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum), 1.0/6)) * [$units])/[$scale] } ]
    }

    proc compute_spba1 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale} {
    
        set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left  ]
        set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
        set measurements [ concat $measurements_left $measurements_right ]
        set accum 0.0
        set max_test [ expr { 5e-08 / [$units] } ]

        foreach segment $measurements {
        	foreach { width spa spb se } $segment {
        	    set diff  [ expr { [$scale]*$spb - [$scale]*$spa + 0.1*[$scale]*[$drawn_length]/[$units]} ]
        	    set maxd  [ max $diff $max_test ]
        	    set val   [ expr { [$scale]*$width / ( pow([$scale]*$spa+0.1*[$scale]*[$drawn_length]/[$units],3) * pow($maxd,3) ) } ]
        	    set accum [ expr { $accum + $val } ]
        	}
        }
        return [ expr { ((pow( (( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum), 1.0/6)) * [$units])/[$scale] } ]
    }


    proc compute_sapb { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
	set measurements [ concat $measurements_left $measurements_right ]
	set accum 0.0
	set constant [ expr { 1e-09 / [$units] } ]

	foreach segment $measurements {
		foreach { width spa spb se } $segment {
			set val [ expr { ([$scale]*$width) / (([$scale]*$se + $constant)*pow( ([$scale]*$spb - [$scale]*$spa + $constant) ,3)) } ]
			set accum [ expr { $accum + $val } ]
		}
	}
	return [ expr { pow( (2 * ([$scale]*[$drawn_width]/[$units]) / $accum), 0.25) * [$units] / [$scale] } ]
    }


*/]
#IFDEF RC_DECK
INCLUDE $TSMC_CAL_DFM_PATH/odSpace.encrypt
#ENDIF
// Serve X-resistor as an built-in resistor (for PATHCHK)
LVS DEVICE TYPE RESISTOR rm11 rm1w rm2w rm3w rm4w rm5w rm6w rnodl rnodl_m rnods rnods_m rnodwo rnodwo_m rnpolyl rnpolyl_m rnpolys rnpolys_m rnpolywo rnpolywo_m rnpolywo_rf rnwod rnwod_m rnwsti rnwsti_m rpodl rpodl_m rpods rpods_m rpodwo rpodwo_m rppolyl rppolyl_m rppolyl_rf rppolys rppolys_m rppolys_rf rppolywo rppolywo_m rppolywo_rf rppolywo_serp_m [POS=PLUS NEG=MINUS]
LVS REDUCE rnpolywo_rf PARALLEL NO
LVS REDUCE rnpolywo_rf SERIES PLUS MINUS NO
LVS REDUCE rppolyl_rf PARALLEL NO
LVS REDUCE rppolyl_rf SERIES PLUS MINUS NO
LVS REDUCE rppolys_rf PARALLEL NO
LVS REDUCE rppolys_rf SERIES PLUS MINUS NO
LVS REDUCE rppolywo_rf PARALLEL NO
LVS REDUCE rppolywo_rf SERIES PLUS MINUS NO

#IFDEF RC_DECK
//=============================
//======= Setup for PEX =======
//=============================
#IFDEF MULTI_DEVICE_EXTRACTION
  MASK SVDB DIRECTORY "svdb" XRC SI
#ELSE
  MASK SVDB DIRECTORY "svdb" XRC
#ENDIF
#IFDEF NATIVE_N40
//PEX MAGNIFY 1.0
#ELSE
//PEX MAGNIFY 0.9
#ENDIF
//PEX DELAY                      none   //PENFIELD 0.7 MASK DIRECT

PEX EXTRACT EXCLUDE            "VDD" "AVDD" "VD33" "VDDSA" "VDDPST" "VDD5V"
PEX NETLIST                    "net.dist" HSPICE LAYOUTNAMES GROUND VSS LOCATION RCNAMED
PEX NETLIST SIMPLE             "net.simple" HSPICE LAYOUTNAMES LOCATION RCNAMED 		
//Back-annotation xcalibre flow
//PEX NETLIST                    "net.dist" HSPICE SOURCENAMES GROUND VSS LOCATION RCNAMED
//PEX NETLIST SIMPLE             "net.simple" HSPICE SOURCENAMES LOCATION  RCNAMED		 	    

PEX REPORT DISTRIBUTED         none  //"report.dist" ASCII LAYOUT MASK DIRECT
PEX REPORT LUMPED              none  //"report.lump" LAYOUT MASK DIRECT

//PEX REDUCE CC ABSOLUTE 10000000              		

PEX IDEAL XCELL                YES

// xcalibre capacitance and resistance file 
UNIT CAPACITANCE ff
UNIT RESISTANCE OHM
// Unzip RC techfile and include "rules" file here.
include ./rules

PEX ALIAS tndiff  d_tndiff_hv s_tndiff_hv d_tndiff_dehv s_tndiff_dehv cg_drain comso tndiff_sbd tndiff_jfet
PEX ALIAS tpdiff  d_tpdiff_hv s_tpdiff_hv tpdiff_sbd tpdiff_jfet
PEX ALIAS poly vargt
PEX ALIAS poly vargt_18
PEX ALIAS poly vargt_25
PEX IGNORE CAPACITANCE ALL vargt tndiff
PEX IGNORE CAPACITANCE INTRINSIC ALL vargt
PEX IGNORE CAPACITANCE ALL vargt_18 tndiff
PEX IGNORE CAPACITANCE INTRINSIC ALL vargt_18
PEX IGNORE CAPACITANCE ALL vargt_25 tndiff
PEX IGNORE CAPACITANCE INTRINSIC ALL vargt_25
PEX ALIAS poly poly3
PEX ALIAS tndiff ydio_t
PEX ALIAS tndiff tndiff_dmy
PEX ALIAS tpdiff tpdiff_dmy
PEX IGNORE CAPACITANCE INTRINSIC ALL tndiff_sbd
PEX IGNORE CAPACITANCE INTRINSIC ALL tndiff_jfet
PEX IGNORE CAPACITANCE INTRINSIC ALL tpdiff_jfet





#ELSE

//#############################################
//# ERC CHECK                                 #
//#############################################
// Reports regions on a DNW layer that connect to more than one node.
LVS SOFTCHK DNW CONTACT
// Reports regions on a JNW layer that connect to more than one node.
LVS SOFTCHK JNW CONTACT
// Reports regions on a PROBEM1_T layer that connect to more than one node.
LVS SOFTCHK PROBEM1_T CONTACT
// Reports regions on a PROBEM2_T layer that connect to more than one node.
LVS SOFTCHK PROBEM2_T CONTACT
// Reports regions on a PROBEM3_T layer that connect to more than one node.
LVS SOFTCHK PROBEM3_T CONTACT
// Reports regions on a PROBEM4_T layer that connect to more than one node.
LVS SOFTCHK PROBEM4_T CONTACT
// Reports regions on a dnw_4vnjfet_d layer that connect to more than one node.
LVS SOFTCHK dnw_4vnjfet_d CONTACT
// Reports regions on a dnw_4vnjfet_d_all layer that connect to more than one node.
LVS SOFTCHK dnw_4vnjfet_d_all CONTACT
// Reports regions on a dnw_4vnjfet_s layer that connect to more than one node.
LVS SOFTCHK dnw_4vnjfet_s CONTACT
// Reports regions on a dnw_4vnjfet_s_all layer that connect to more than one node.
LVS SOFTCHK dnw_4vnjfet_s_all CONTACT
// Reports regions on a tndiff_dmy layer that connect to more than one node.
LVS SOFTCHK tndiff_dmy CONTACT
// Reports regions on a LVBJTDMY_psub layer that connect to more than one node.
LVS SOFTCHK LVBJTDMY_psub CONTACT
// Reports regions on a RFDMY_HIA_psub layer that connect to more than one node.
LVS SOFTCHK RFDMY_HIA_psub CONTACT
// Reports regions on a psub_under_jfet layer that connect to more than one node.
LVS SOFTCHK psub_under_jfet CONTACT
// Reports regions on a rfdmy56 layer that connect to more than one node.
LVS SOFTCHK rfdmy56 CONTACT
// Reports regions on a tpdiff_dmy layer that connect to more than one node.
LVS SOFTCHK tpdiff_dmy CONTACT
// Reports regions on a HVNW layer that connect to more than one node.
LVS SOFTCHK HVNW CONTACT
// Reports regions on a NWLVT layer that connect to more than one node.
LVS SOFTCHK NWLVT CONTACT
// Reports regions on a nxwell layer that connect to more than one node.
LVS SOFTCHK nxwell CONTACT
// Reports regions on a HVPW layer that connect to more than one node.
LVS SOFTCHK HVPW CONTACT
// Reports regions on a LVBJTDMY layer that connect to more than one node.
LVS SOFTCHK LVBJTDMY CONTACT
// Reports regions on a PSUBi layer that connect to more than one node.
LVS SOFTCHK PSUBi CONTACT
// Reports regions on a PWLVT layer that connect to more than one node.
LVS SOFTCHK PWLVT CONTACT
// Reports regions on a RFDMY_HIA_bulk layer that connect to more than one node.
LVS SOFTCHK RFDMY_HIA_bulk CONTACT
// Reports regions on a coll1 layer that connect to more than one node.
LVS SOFTCHK coll1 CONTACT
// Reports regions on a n_psub layer that connect to more than one node.
#IFNDEF NW_RING
	LVS SOFTCHK n_psub CONTACT
#ENDIF
// Reports regions on a psub layer that connect to more than one node.
LVS SOFTCHK psub CONTACT
// Reports regions on a psub_term layer that connect to more than one node.
LVS SOFTCHK psub_term CONTACT
// Reports regions on a rwel layer that connect to more than one node.
LVS SOFTCHK rwel CONTACT
// Reports regions on a rwel_4vnjfet layer that connect to more than one node.
LVS SOFTCHK rwel_4vnjfet CONTACT
// Reports regions on a rwel_4vpjfet_d layer that connect to more than one node.
LVS SOFTCHK rwel_4vpjfet_d CONTACT
// Reports regions on a rwel_4vpjfet_s layer that connect to more than one node.
LVS SOFTCHK rwel_4vpjfet_s CONTACT

#IFDEF WELL_TO_PG_CHECK
GROUP ERC_WELL_TO_PG_CHECK  npvss49 ppvdd49
ERC SELECT CHECK ERC_WELL_TO_PG_CHECK
#ENDIF

#IFDEF GATE_TO_PG_CHECK
GROUP ERC_GATE_TO_PG_CHECK  npvss150 ppvdd150
ERC SELECT CHECK ERC_GATE_TO_PG_CHECK
#ENDIF

#IFDEF DS_TO_PG_CHECK
GROUP ERC_DS_TO_PG_CHECK  mnpg mppg mnpgldd mppgldd mnpgdeldd
ERC SELECT CHECK ERC_DS_TO_PG_CHECK
#ENDIF

#IFDEF FLOATING_WELL_CHECK
GROUP ERC_FLOATING_WELL_CHECK  floating.nxwell_float floating.nxwell_hv floating.psub
ERC SELECT CHECK ERC_FLOATING_WELL_CHECK
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpg*/
N1tndiff = NET tndiff POWER_NAME
T1tndiff = erc_nmos_gates TOUCH N1tndiff
N2tndiff = NET tndiff GROUND_NAME
T2tndiff = erc_nmos_gates TOUCH N2tndiff

#IFDEF DS_TO_PG_CHECK
mnpg { @ MOS connected to both power and ground
  T1tndiff AND T2tndiff
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppg*/
N1tpdiff = NET tpdiff POWER_NAME
T1tpdiff = erc_pmos_gates TOUCH N1tpdiff
N2tpdiff = NET tpdiff GROUND_NAME
T2tpdiff = erc_pmos_gates TOUCH N2tpdiff

#IFDEF DS_TO_PG_CHECK
mppg { @ MOS connected to both power and ground
  T1tpdiff AND T2tpdiff
}
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpgldd*/
N1s_tndiff_hv_mnpglddA = NET s_tndiff_hv POWER_NAME
T1s_tndiff_hv_mnpglddA = erc_nmos_gates TOUCH N1s_tndiff_hv_mnpglddA
N2d_tndiff_hv_mnpglddA = NET d_tndiff_hv GROUND_NAME
T2d_tndiff_hv_mnpglddA = erc_nmos_gates TOUCH N2d_tndiff_hv_mnpglddA

N1d_tndiff_hv_mnpglddB = NET d_tndiff_hv POWER_NAME
T1d_tndiff_hv_mnpglddB = erc_nmos_gates TOUCH N1d_tndiff_hv_mnpglddB
N2s_tndiff_hv_mnpglddB = NET s_tndiff_hv GROUND_NAME
T2s_tndiff_hv_mnpglddB = erc_nmos_gates TOUCH N2s_tndiff_hv_mnpglddB

#IFDEF DS_TO_PG_CHECK
mnpgldd { @ MOS connected to both power and ground
  (T1s_tndiff_hv_mnpglddA AND T2d_tndiff_hv_mnpglddA ) OR (T1d_tndiff_hv_mnpglddB AND T2s_tndiff_hv_mnpglddB )
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppgldd*/
N1s_tpdiff_hv_mppglddA = NET s_tpdiff_hv POWER_NAME
T1s_tpdiff_hv_mppglddA = erc_pmos_gates TOUCH N1s_tpdiff_hv_mppglddA
N2d_tpdiff_hv_mppglddA = NET d_tpdiff_hv GROUND_NAME
T2d_tpdiff_hv_mppglddA = erc_pmos_gates TOUCH N2d_tpdiff_hv_mppglddA

N1d_tpdiff_hv_mppglddB = NET d_tpdiff_hv POWER_NAME
T1d_tpdiff_hv_mppglddB = erc_pmos_gates TOUCH N1d_tpdiff_hv_mppglddB
N2s_tpdiff_hv_mppglddB = NET s_tpdiff_hv GROUND_NAME
T2s_tpdiff_hv_mppglddB = erc_pmos_gates TOUCH N2s_tpdiff_hv_mppglddB

#IFDEF DS_TO_PG_CHECK
mppgldd { @ MOS connected to both power and ground
  (T1s_tpdiff_hv_mppglddA AND T2d_tpdiff_hv_mppglddA ) OR (T1d_tpdiff_hv_mppglddB AND T2s_tpdiff_hv_mppglddB )
}
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpgdeldd*/
N1s_tndiff_dehv_mnpgdelddA = NET s_tndiff_dehv POWER_NAME
T1s_tndiff_dehv_mnpgdelddA = erc_nmos_gates TOUCH N1s_tndiff_dehv_mnpgdelddA
N2d_tndiff_dehv_mnpgdelddA = NET d_tndiff_dehv GROUND_NAME
T2d_tndiff_dehv_mnpgdelddA = erc_nmos_gates TOUCH N2d_tndiff_dehv_mnpgdelddA

N1d_tndiff_dehv_mnpgdelddB = NET d_tndiff_dehv POWER_NAME
T1d_tndiff_dehv_mnpgdelddB = erc_nmos_gates TOUCH N1d_tndiff_dehv_mnpgdelddB
N2s_tndiff_dehv_mnpgdelddB = NET s_tndiff_dehv GROUND_NAME
T2s_tndiff_dehv_mnpgdelddB = erc_nmos_gates TOUCH N2s_tndiff_dehv_mnpgdelddB

#IFDEF DS_TO_PG_CHECK
mnpgdeldd { @ MOS connected to both power and ground
  (T1s_tndiff_dehv_mnpgdelddA AND T2d_tndiff_dehv_mnpgdelddA ) OR (T1d_tndiff_dehv_mnpgdelddB AND T2s_tndiff_dehv_mnpgdelddB )
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
SCONNECT tndiff nxwell_float by nplug
SCONNECT tndiff_jfet nxwell_float by nplug
SCONNECT s_tndiff_dehv nxwell_float by nplug
SCONNECT d_tndiff_dehv nxwell_float by nplug
SCONNECT s_tndiff_hv nxwell_float by nplug
SCONNECT comso nxwell_float by nplug
SCONNECT d_tndiff_hv nxwell_float by nplug
SCONNECT cg_drain nxwell_float by nplug
SCONNECT tndiff_sbd nxwell_float by nplug
floating.nxwell_float { @ nxwell_float is not connected to POWER
  no_power_path = PATHCHK !POWER nxwell_float PORTS ALSO
  direct_connect_ground = NET nxwell_float GROUND_NAME
  no_power_path or direct_connect_ground
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
SCONNECT tndiff nxwell_hv by ntaphv
SCONNECT tndiff_jfet nxwell_hv by ntaphv
SCONNECT s_tndiff_dehv nxwell_hv by ntaphv
SCONNECT d_tndiff_dehv nxwell_hv by ntaphv
SCONNECT s_tndiff_hv nxwell_hv by ntaphv
SCONNECT comso nxwell_hv by ntaphv
SCONNECT d_tndiff_hv nxwell_hv by ntaphv
SCONNECT cg_drain nxwell_hv by ntaphv
SCONNECT tndiff_sbd nxwell_hv by ntaphv
floating.nxwell_hv { @ nxwell_hv is not connected to POWER
  no_power_path = PATHCHK !POWER nxwell_hv PORTS ALSO
  direct_connect_ground = NET nxwell_hv GROUND_NAME
  no_power_path or direct_connect_ground
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
floating.psub { @ psub is not connected to GROUND
  no_ground_path = PATHCHK !GROUND psub PORTS ALSO
  direct_connect_power = NET psub POWER_NAME
  no_ground_path or direct_connect_power
}
#ENDIF
gate1_not_IO2_GND = NET gate1_not_IO2_not_IO2 GROUND_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to ground 
npvss150 { @ gate1_not_IO2 connected to GROUND
  gate1_not_IO2_GND_pmos = gate1_not_IO2_GND INTERACT N1tpdiff
  gate1_not_IO2_GND_nmos = gate1_not_IO2_GND INTERACT N1tndiff
  nxwell_PWR = NET nxwell POWER_NAME
  psub_PWR = NET psub POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_GND_pmos_filter1_1 = gate1_not_IO2_GND_pmos INTERACT N1tpdiff == 2
  gate1_not_IO2_GND_pmos_filter1 = gate1_not_IO2_GND_pmos_filter1_1 INTERACT nxwell_PWR

  gate1_not_IO2_GND_nmos_filter1_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter1 = gate1_not_IO2_GND_nmos_filter1_1 INTERACT psub_PWR

  gate1_not_IO2_GND_nmos_filter2_1 = gate1_not_IO2_GND_nmos INTERACT N2tndiff
  gate1_not_IO2_GND_nmos_filter2 = gate1_not_IO2_GND_nmos_filter2_1 INTERACT psub_GND

  gate1_not_IO2_GND_nmos_filter3_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter3 = gate1_not_IO2_GND_nmos_filter3_1 INTERACT (nxwell_PWR AND VARi)

  ((((gate1_not_IO2_GND_pmos OR gate1_not_IO2_GND_nmos) NOT gate1_not_IO2_GND_pmos_filter1) NOT gate1_not_IO2_GND_nmos_filter1) NOT gate1_not_IO2_GND_nmos_filter2) NOT gate1_not_IO2_GND_nmos_filter3
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ntap connect to ground 
npvss49 { @ ntap connected to GROUND
  ntap_not_var = ntap NOT VARi
  NET ntap_not_var GROUND_NAME
}
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to ground but not power 
ERC PATHCHK GROUND && !POWER
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to power but not ground 
ERC PATHCHK POWER && !GROUND
#ENDIF

#IFDEF PATH_CHECK
// Nodes without a path to power and ground 
ERC PATHCHK !POWER && !GROUND NOFLOAT
#ENDIF

#IFDEF PATH_CHECK
ERC PATHCHK !LABELED NOFLOAT
#ENDIF
gate1_not_IO2_not_IO1 = gate1_not_IO2 NOT OD25
gate1_not_IO2_not_IO2 = gate1_not_IO2_not_IO1 NOT OD33
CONNECT gate1_not_IO2_not_IO2 poly
gate1_not_IO2_PWR = NET gate1_not_IO2_not_IO2 POWER_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to power 
ppvdd150 { @ gate1_not_IO2 connected to POWER
  gate1_not_IO2_PWR_pmos = gate1_not_IO2_PWR INTERACT N2tpdiff
  gate1_not_IO2_PWR_nmos = gate1_not_IO2_PWR INTERACT N2tndiff
  nxwell_GND = NET nxwell GROUND_NAME
  nxwell_PWR = NET nxwell POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_PWR_pmos_filter1_1 = gate1_not_IO2_PWR_pmos INTERACT N2tpdiff == 2
  gate1_not_IO2_PWR_pmos_filter1 = gate1_not_IO2_PWR_pmos_filter1_1 INTERACT nxwell_GND

  gate1_not_IO2_PWR_nmos_filter1_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter1 = gate1_not_IO2_PWR_nmos_filter1_1 INTERACT psub_GND

  gate1_not_IO2_PWR_pmos_filter2_1 = gate1_not_IO2_PWR_pmos INTERACT N1tpdiff
  gate1_not_IO2_PWR_pmos_filter2 = gate1_not_IO2_PWR_pmos_filter2_1 INTERACT nxwell_PWR

  gate1_not_IO2_PWR_nmos_filter3_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter3 = gate1_not_IO2_PWR_nmos_filter3_1 INTERACT (nxwell_GND AND VARi)

  ((((gate1_not_IO2_PWR_pmos OR gate1_not_IO2_PWR_nmos) NOT gate1_not_IO2_PWR_pmos_filter1) NOT gate1_not_IO2_PWR_nmos_filter1) NOT gate1_not_IO2_PWR_pmos_filter2 ) NOT gate1_not_IO2_PWR_nmos_filter3
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ptap connect to power 
ppvdd49 { @ ptap connected to POWER
  NET ptap POWER_NAME
}
#ENDIF

#ENDIF
////////////////////////////////////////////////////////////////////////////////
// STRAINED SILICON SEARCH DISTANCES
////////////////////////////////////////////////////////////////////////////////
all_sd = mdiff NOT gate1
LAYER1 = COPY OD // placeholder dummy layer
#IFNDEF SKIP_PSE
ngate_PROP = DFM COPY ngate_PROPx
pgate_PROP = DFM COPY pgate_PROPx
#ELSE
#IFNDEF SKIP_ODSE
ngate_PROP = DFM COPY ngate_PROPx
pgate_PROP = DFM COPY pgate_PROPx
#ELSE
ngate_PROP = DFM COPY gate
pgate_PROP = DFM COPY gate
#ENDIF
#ENDIF
}

package require CalibreDFM_DEVICE
### max_sp, max_sp2, max_sd : for PSE
# maximum search distance for gate-to-1st-poly spacing
set device::max_sp    3
# maximum search distance for gate-to-2nd-poly spacing
set device::max_sp2   4
# maximum search distance for gate-to-diffusion enclosure
set device::max_sd    11
### max_sp, max_se, max_sf, max_sle, max_slf : for Boundary
# maximum search distance for gate-to-layer1 enclosure (sides)
set device::max_se    0
# maximum search distance for gate-to-2nd-layer1 spacing (sides)
set device::max_sf    0
# maximum search distance for gate-to-layer1 enclosure (ends)
set device::max_sle   0
# maximum search distance for gate-to-2nd-layer1 spacing (ends)
set device::max_slf   0
### max_sp, max_sode, max_sodf, max_sodlf : for OD-OD
# maximum search distance for gate-to-1st-OD (sides)
set device::max_sode  11
# maximum search distance for gate-to-2nd-OD (sides)
set device::max_sodf  14
# maximum search distance for gate-to-2nd-OD (ends)
set device::max_sodlf 3
# sizing up vale for gate when measuring gate-to-2nd-OD (ends)
set device::lat_sodlf 0.05

tvf::SETLAYER ngate_PROPx = [
   device::strained_silicon_measurements -gate gate_mac -sd all_sd -active OD -poly POx -layer1 LAYER1
]
tvf::SETLAYER pgate_PROPx = [
   device::strained_silicon_measurements -gate gate_mac -sd all_sd -active OD -poly POx -layer1 LAYER1
]
tvf::SETLAYER nCore_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_nmcore_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER pCore_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_pmcore_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER nIO_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_nmIO_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER pIO_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_pmIO_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER lod_PROP = [
   device::enclosure_measurements -base gate_a -measurement OD -orient all_sd -max_par 0  -max_per 60 
]
